// Консоль запросов 1С от Евгения Лавелина
// e-mail:support@consquery.ru
// http: www.consquery.ru

&НаКлиенте
Перем мВыполняетсяЗакрытие, мКэшЗначений, мДлительнаяОперацияЗапущена;

&НаКлиенте
Перем мДеревоЗапросовВидимость, мСохранитьПередВыполнением;

&НаКлиенте
Перем мОперацииСЗапросами, мТипыИсточниковДанных, мОперацияПослеСохраненияИзменений;

&НаКлиенте
Перем RegExp, мЦветСтиляЦветРамки, мТекущаяСтрокаДереваЗапросов;

&НаКлиенте
Перем мРежимДобавленияСтрокиСЗапросом; // Принимаемые значения: 0 - добавление, 1- копирование, Неопределено - событие добавления строки не было инициировано

&НаКлиенте
Перем мВыполняетсяУдалениеСтроки, мВыполняетсяПеретаскиваниеСтроки Экспорт;

&НаКлиенте
Перем ПредыдущаяСтрока;


#Область ОбработчикиСобытийФормы

Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");  
	
     // установим внутреннее строковое представление типа значения объекта обработки
    ТипОбработка = ЗначениеВСтрокуВнутр(ТипЗнч(ОбработкаОбъект));
	
	СвойстваРеквизитаРезультатЗапроса = ОбработкаОбъект.гСвойстваРеквизитаРезультатЗапроса();
	
	лПлатформаАктуальна  = (ОбработкаОбъект.гСравнитьВерсии(, "8.3.6.2421") >= 0);	
	
	СеансовыеДанные = Новый Структура();	
	СеансовыеДанные.Вставить("ИдентификаторСеанса", Новый УникальныйИдентификатор);
	СеансовыеДанные.Вставить("КЭШ"                , Новый Структура);
	
	ОбработкаОбъект.гСеансовыеДанные = СеансовыеДанные; // ОБЯЗАТЕЛЬНО перед вызовом гИзвлечьКартинкиОбработкиНаСервере
	
	СеансовыеДанные.Вставить("ПутьККартинкам", ОбработкаОбъект.гИзвлечьКартинкиОбработкиНаСервере());
	
	Если лПлатформаАктуальна Тогда 
		ЭтотОбъектФорма = "ЭтотОбъект"
	Иначе
		ЭтотОбъектФорма = "ЭтаФорма"
	КонецЕсли;
	
	Попытка
		ЭтотОбъектДоступен = Вычислить("ЭтотОбъект <> Неопределено");
	Исключение
		ЭтотОбъектДоступен = Ложь;
	КонецПопытки; 
	
	Объект.ДоступныеТипыДанных = ОбработкаОбъект.Метаданные().Реквизиты.ДоступныеТипыДанных.Тип;
	Объект.ПутьКФормам         = ОбработкаОбъект.Метаданные().ПолноеИмя() + ".Форма";
	ПутьКФайлуСОбработкой      = ОбработкаОбъект.ИспользуемоеИмяФайла;
	СписокТипов                = ОбработкаОбъект.гСформироватьСписокТипов(Объект.ДоступныеТипыДанных.Типы());
	
	// +++ создаем пустую таблицу для отображения при открытии
	лРезультат = Новый ТаблицаЗначений;
	лРезультат.Колонки.Добавить("Поле1");
	//лРезультат.Добавить();
	
	АдресРезультата = ПоместитьВоВременноеХранилище(лРезультат, УникальныйИдентификатор);
	// --- создаем пустую таблицу для отображения при открытии
	
	СоздатьРеквизитCРезультатомЗапроса(АдресРезультата);
	
	лИмяЭлементаРезультатЗапроса = СвойстваРеквизитаРезультатЗапроса.ИмяРеквизита;
	лКоманднаяПанельРезультатаЗапроса = Вычислить("Элементы." + лИмяЭлементаРезультатЗапроса + ".КоманднаяПанель");
	
	// +++ формируем меню
	МассивМенюДляДобавления = Новый Массив;
	
	//лПунктМеню = Новый Структура();
	//лПунктМеню.Вставить("Имя"      , "Информация");
	//лПунктМеню.Вставить("Контейнер", КоманднаяПанель);
	//лПунктМеню.Вставить("Картинка" , ОбработкаОбъект.ПолучитьКартинку("Информация"));	
	//МассивМенюДляДобавления.Добавить(лПунктМеню);
	
	лПунктМеню = Новый Структура();
	лПунктМеню.Вставить("Имя"             , "Дополнительно");
	лПунктМеню.Вставить("Контейнер"       , Элементы.МенюОперации);
	лПунктМеню.Вставить("Картинка"        , ОбработкаОбъект.ПолучитьКартинку("НастроитьСписок"));
	лПунктМеню.Вставить("КореньЭтоПодменю", Ложь);	
	МассивМенюДляДобавления.Добавить(лПунктМеню);
	
	лПунктМеню = Новый Структура();
	лПунктМеню.Вставить("Имя"             , "ПреобразованияКодаВЗапросИОбратно");
	лПунктМеню.Вставить("Контейнер"       , Элементы.МенюОперации);
	лПунктМеню.Вставить("Картинка"        , );
	лПунктМеню.Вставить("КореньЭтоПодменю", Ложь);
	МассивМенюДляДобавления.Добавить(лПунктМеню);
	
	лПунктМеню = Новый Структура();
	лПунктМеню.Вставить("Имя"             , "Сервис");
	лПунктМеню.Вставить("Контейнер"       , лКоманднаяПанельРезультатаЗапроса);
	лПунктМеню.Вставить("Картинка"        , ОбработкаОбъект.ПолучитьКартинку("НастроитьСписок"));
	лПунктМеню.Вставить("КореньЭтоПодменю", Истина);
	МассивМенюДляДобавления.Добавить(лПунктМеню);
	
	лПунктМеню = Новый Структура();
	лПунктМеню.Вставить("Имя"             , "Запросы");
	лПунктМеню.Вставить("Контейнер"       , лКоманднаяПанельРезультатаЗапроса);
	лПунктМеню.Вставить("Картинка"        , Новый Картинка);
	лПунктМеню.Вставить("КореньЭтоПодменю", );	
	МассивМенюДляДобавления.Добавить(лПунктМеню);

	Для каждого ТекущееМеню Из МассивМенюДляДобавления Цикл
		лДеревоМеню = ОбработкаОбъект.гПолучитьМеню(ТекущееМеню.Имя, Истина, Ложь);
		ЗаполнитьМенюПоДеревуНаСервере(ТекущееМеню.Контейнер, лДеревоМеню, ТекущееМеню.КореньЭтоПодменю);
	КонецЦикла; 
	
	// добавляем контекстное меню самой таблицы с результатом
	лИмяКоманды  = "РезультатЗапросаПолучитьТипЗначения";
	
	КомандаФормы = Команды.Добавить(лИмяКоманды);
	КомандаФормы.Действие = лИмяКоманды;
	
	Кнопка = Элементы.Добавить("МенюТаблицыРезультатаПолучитьТипЗначения", Тип("КнопкаФормы"), Вычислить("Элементы." + лИмяЭлементаРезультатЗапроса).КонтекстноеМеню);
	Кнопка.ИмяКоманды = лИмяКоманды;
	Кнопка.Заголовок = "Получить тип значения";		
	// +++ формируем меню
	
	// добавляем строку состояния к элементу с результатом запроса
	лИмяКоманды  = "ПоказатьКоличествоСтрокРезультатаЗапроса";
	
	КомандаФормы = Команды.Добавить(лИмяКоманды);
	КомандаФормы.Действие = лИмяКоманды;
	
	Кнопка = Элементы.Добавить("КнопкаКоличествоСтрокРезультатаЗапроса", Тип("КнопкаФормы"), лКоманднаяПанельРезультатаЗапроса);
	Кнопка.ИмяКоманды = лИмяКоманды;
	Кнопка.ЦветТекста = Новый Цвет(0,0,255);	

	// +++ восстанавливаем настройки по умолчанию
	ЗначенияПоУмолчанию	= ВосстановитьНастройкиНаСервере();
	// --- восстанавливаем настройки по умолчанию
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Перем лЗначениеНастройки;
	
	ОбновитьСостояниеРезультатаЗапроса();
	
	мОперацииСЗапросами   = гОперацииСЗапросами(ТипОбработка, СеансовыеДанные);
	мТипыИсточниковДанных = гТипыИсточниковДанных(ТипОбработка, СеансовыеДанные);
	
	мЦветСтиляЦветРамки = ПолучитьЦветСтиляНаСервере("ЦветРамки");
	
	мДлительнаяОперацияЗапущена = Истина;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнитьДействиеЗавершение", Вычислить(ЭтотОбъектФорма));
	ПараметрыФормыДлительнойОперации = ПараметрыОжидания(Неопределено);
	ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов.Форма.ДлительнаяОперация", ПараметрыФормыДлительнойОперации, Вычислить(ЭтотОбъектФорма),,,,ОповещениеОЗавершении);

	// +++ восстанавливаем настройки по умолчанию
	Если ЗначениеЗаполнено(ЗначенияПоУмолчанию) Тогда 
		
		Если Не ЗначенияПоУмолчанию.Свойство("СохранитьПередВыполнением", мСохранитьПередВыполнением) Тогда 
			мСохранитьПередВыполнением = Ложь;
		КонецЕсли;
		
		лДеревоЗапросовВидимость = Неопределено;
		ЗначенияПоУмолчанию.Свойство("ДеревоЗапросовВидимость", лДеревоЗапросовВидимость);
		
		Если ЗначенияПоУмолчанию.Свойство(СвойстваРеквизитаРезультатЗапроса.ИмяЭлементаРодителя, лЗначениеНастройки) Тогда 
			лИмяРодителяЭлементаРезультатЗапроса = СвойстваРеквизитаРезультатЗапроса.ИмяЭлементаРодителя;
			Элементы[лИмяРодителяЭлементаРезультатЗапроса].Видимость = лЗначениеНастройки;
			ОформитьКнопкуПоказатьРезультат(лЗначениеНастройки);
		КонецЕсли;
		
		Если ЗначенияПоУмолчанию.Свойство("ГруппаДанныеЗапроса", лЗначениеНастройки) Тогда 
			ОбработкаДействияПоказатьСекциюСЗапросами(лЗначениеНастройки);
		Иначе
			ОбработкаДействияПоказатьСекциюСЗапросами(Истина);
		КонецЕсли;

		Если ЗначенияПоУмолчанию.Свойство("ГруппаПараметрыЗапросов", лЗначениеНастройки) Тогда 
			Элементы.ГруппаПараметрыЗапросов.Видимость = лЗначениеНастройки;
		Иначе
			Элементы.ГруппаПараметрыЗапросов.Видимость = Ложь;
		КонецЕсли;
		
		ОформитьКнопкуПоказатьПараметры(Элементы.ГруппаПараметрыЗапросов.Видимость);
		
		ЗначенияПоУмолчанию.Свойство("ИмяФайлаСЗапросом", ИмяФайлаСЗапросом);
		
	КонецЕсли;
	// --- восстанавливаем настройки по умолчанию
	
	ОформитьКнопкуПоказатьСекциюСЗапросами(Элементы.ГруппаДанныеЗапроса.Видимость);
	ОформитьКнопкуПоказатьРезультат(Элементы[СвойстваРеквизитаРезультатЗапроса.ИмяЭлементаРодителя].Видимость);
	ОформитьКнопкуПоказатьПараметры(Элементы.ГруппаПараметрыЗапросов.Видимость);
	
	ЗагрузитьЗапросы(ИмяФайлаСЗапросом, мОперацииСЗапросами.Открыть);
	
	Если лДеревоЗапросовВидимость <> Неопределено Тогда 
		Элементы.ДеревоЗапросов.Видимость = лДеревоЗапросовВидимость;
	КонецЕсли;
	
	мДеревоЗапросовВидимость = Элементы.ДеревоЗапросов.Видимость;
	
	ОтобразитьДеревоЗапросов(мДеревоЗапросовВидимость);
	
	Модифицированность          = Ложь;
	мДлительнаяОперацияЗапущена = Ложь;
	
	ПоместитьВоВременноеХранилище(Новый Структура("Статус", "Выполнено"), ПараметрыФормыДлительнойОперации.ИдентификаторЗадания);
	
	ИдентификаторСессии = гВосстановитьИдентификаторСессииConsqueryCloud(ТипОбработка, СеансовыеДанные);
	УстановитьИмяПользователяВОблаке();
	
	ОбновитьЗаголовок();

	ВывестиПозициюКурсора();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не мВыполняетсяЗакрытие Тогда 
	    СтандартнаяОбработка = Ложь;
		Отказ                = Истина;
		ПроверитьМодифицированность("ЗакрытьФорму");// #рефакторинг определить константу
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

&НаСервереБезКонтекста
Процедура УдалитьФайлыНаСервере(УдаляемыеФайлы)
	
	Если ТипЗнч(УдаляемыеФайлы) = Тип("Строка") Тогда 
		лФайл = Новый Файл(УдаляемыеФайлы);
		Если лФайл.Существует() Тогда 
			УдалитьФайлы(УдаляемыеФайлы);
		КонецЕсли;
	ИначеЕсли ТипЗнч(УдаляемыеФайлы) = Тип("Массив") Тогда 
		Для Каждого ФайлКУдалению Из УдаляемыеФайлы Цикл
			Если ТипЗнч(ФайлКУдалению) = Тип("Строка") Тогда 
				УдалитьФайлыНаСервере(ФайлКУдалению);
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // УдалитьФайлыНаСервере()
	
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьПараметрСТаблицейЗначений" Тогда	
		ОбновитьПараметрСТаблицейЗначений(Параметр);
	ИначеЕсли ИмяСобытия = "НеобходимоПереподключиться" Тогда 
		ПодключенияКОблакуДействие();
	ИначеЕсли ИмяСобытия = "ОбновитьНастройкиПрокси" Тогда 
		// добавить сохранение настроек покси
	ИначеЕсли ИмяСобытия = "ОбработатьИзменениеДанныехОПодключении" Тогда 
		ОбработатьИзменениеДанныехОПодключении(Параметр);
	ИначеЕсли ИмяСобытия = "СохранитьПередВыполнениемПриИзменении" Тогда 
		СохранитьПередВыполнением = ?(Параметр = Истина, Истина, Ложь);
	ИначеЕсли ИмяСобытия = "ДобавитьЗапросИзПредпросмотра" Тогда 
		ЗагрузитьЗапросыИзОблака(Параметр.идПакета, Параметр.идЗапроса, Параметр.идКода, Ложь, ПолучитьРодителяТекущейСтроки(мТекущаяСтрокаДереваЗапросов));
		Активизировать();
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовДереваЗапросов

&НаКлиенте
Процедура ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	мРежимДобавленияСтрокиСЗапросом = Копирование;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)
	
	Если мРежимДобавленияСтрокиСЗапросом = Неопределено Тогда 
		
		Если Элементы.ДеревоЗапросов.ТекущаяСтрока = ПредыдущаяСтрока Тогда
	        Возврат;
	    КонецЕсли;	
		
		ПредыдущаяСтрока = Элементы.ДеревоЗапросов.ТекущаяСтрока;		
		ПодключитьОбработчикОжидания("ДеревоЗапросовПриАктивизацииСтрокиДействие", 0.1, Истина);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПриАктивизацииСтрокиДействие()

	Если мВыполняетсяУдалениеСтроки <> Истина И мВыполняетсяПеретаскиваниеСтроки <> Истина  Тогда 
		// сохраняем текст и параметры текущего запроса
		СохранитьЗначенияПоЗапросу(мТекущаяСтрокаДереваЗапросов);
		
	Иначе 
		
		мВыполняетсяУдалениеСтроки       = Неопределено;
		мВыполняетсяПеретаскиваниеСтроки = Неопределено;
		
	КонецЕсли;
	
	мТекущаяСтрокаДереваЗапросов = Элементы.ДеревоЗапросов.ТекущаяСтрока;
	
	// заполняем поля с текущим запросом и параметрами соответствующими значениями
	ОбновитьЭлементыФормыДляТекущегоЗапроса(мТекущаяСтрокаДереваЗапросов)

КонецПроцедуры // ДеревоЗапросовПриАктивизацииСтрокиДействие()
 		
&НаКлиенте
Процедура ДеревоЗапросовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если мРежимДобавленияСтрокиСЗапросом <> Неопределено Тогда 
		
		Если Не ОтменаРедактирования Тогда 
			// сохраняем текст и параметры текущего запроса
			СохранитьЗначенияПоЗапросу(мТекущаяСтрокаДереваЗапросов);
			
			мСтараяСтрокаДереваЗапросов  = мТекущаяСтрокаДереваЗапросов;
			мТекущаяСтрокаДереваЗапросов = Элементы.ДеревоЗапросов.ТекущаяСтрока;
			
			мТекущиеДанныеДереваЗапросов = Элементы.ДеревоЗапросов.ТекущиеДанные;
			мТекущиеДанныеДереваЗапросов.Идентификатор = Новый УникальныйИдентификатор;
			
			Если мРежимДобавленияСтрокиСЗапросом = Истина Тогда    // строку скопировали
				
				// копируем код выполнения предыдущего запроса
				мИдентификаторСтарогоЗапроса = ДеревоЗапросов.НайтиПоИдентификатору(мСтараяСтрокаДереваЗапросов).Идентификатор;
				СкопироватьИсполняемыйКод(мИдентификаторСтарогоЗапроса, мТекущиеДанныеДереваЗапросов.Идентификатор);
				
			ИначеЕсли мРежимДобавленияСтрокиСЗапросом = Ложь Тогда // строку не копировали
				// заполняем поля с текущим запросом и параметрами соответствующими значениями
				ОбновитьЭлементыФормыДляТекущегоЗапроса(Неопределено)
			КонецЕсли;
			
			ПредыдущаяСтрока = Элементы.ДеревоЗапросов.ТекущаяСтрока;		
			
		КонецЕсли;
		
		мРежимДобавленияСтрокиСЗапросом = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры // ДеревоЗапросовПриОкончанииРедактирования()

&НаКлиенте
Процедура ДеревоЗапросовПередУдалением(Элемент, Отказ)
	
	Если ДеревоЗапросов.ПолучитьЭлементы().Количество() = 1 И Элементы.ДеревоЗапросов.ТекущаяСтрока = ДеревоЗапросов.ПолучитьЭлементы()[0].ПолучитьИдентификатор() Тогда   
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаСоздатьНовыйФайл", ЭтаФорма, Новый Структура("Режим", "СоздатьНовыйФайл")), 
			"Список запросов должен содержать хотя бы одну строку. Создать новый файл?",
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	мВыполняетсяУдалениеСтроки = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	// без данной процедуры не успевает отрабатываеть процедура, вызываемая с задержкой из приактивациистроки
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	//// #рефакторинг: обработкать перенос нескольких строк и перенос в строку на том же уровне(типовой механмзм это пока не обрабатывает)
	//// Источник: https://partners.v8.1c.ru/forum/message/1647998#m_1647998
	// если ПараметрыПеретаскивания.Значение.Количество() = 1 Тогда // пока для простоты отработаем вариант перетаскивания по одной строке
	//	лИсточник = ДеревоЗапросов.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
	//	лПриемник   = ДеревоЗапросов.НайтиПоИдентификатору(Строка);
	//	Если лПриемник.ПолучитьРодителя() = лИсточник.ПолучитьРодителя() Тогда
	//		лНоваяСтрока = лПриемник.ПолучитьЭлементы().Добавить();
	//		ЗаполнитьЗначенияСвойств(лНоваяСтрока, лИсточник);
	//		// если "лИсточник" это группа здесь нужно ещё предусмотреть перенос всех вложенных строк (рекурсией)
	//		лИсточник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(лИсточник);
	//		Элементы.Дерево.Развернуть(лПриемник.ПолучитьИдентификатор());
	//		мТекущаяСтрокаДереваЗапросов = лНоваяСтрока;
	//	КонецЕсли;
	// конецЕсли;	
	
	мВыполняетсяПеретаскиваниеСтроки = Истина;
	СохранитьЗначенияПоЗапросу(мТекущаяСтрокаДереваЗапросов);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗапуститьВыполнениеЗапроса();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовРезультатЗапроса

&НаКлиенте
Процедура РезультатЗапросаВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(АдресСпискаСпецПолей) Тогда 
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ИмяТекущегоПоля = Сред(Элемент.ТекущийЭлемент.Имя, СтрДлина(СвойстваРеквизитаРезультатЗапроса.ИмяРеквизита) + 1);
		ИмяТекущегоПоляБезСпецПрефикса = ПолучитьИмяСпецПоля(ИмяТекущегоПоля);
		лСпецПоля = ПолучитьИзВременногоХранилища(АдресСпискаСпецПолей);
		Если лСпецПоля.Свойство(ИмяТекущегоПоляБезСпецПрефикса) Тогда 
			РасшифроватьСпецПоле(ИмяТекущегоПоля, ТекущиеДанные.ПолучитьИдентификатор(), лСпецПоля[ИмяТекущегоПоляБезСпецПрефикса]);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РезультатЗапросаПриИзменении(Элемент)
	ОбновитьСостояниеРезультатаЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура РезультатЗапросаПередНачаломИзменения(Элемент, Отказ)
	// #рефакторинг: удалить или добавить алгоритм события
КонецПроцедуры

&НаКлиенте
Процедура РезультатЗапросаПолучитьТипЗначения(Команда)
	лТекущиеДанные = Элементы[СвойстваРеквизитаРезультатЗапроса.ИмяРеквизита].ТекущиеДанные;
	Если лТекущиеДанные <> Неопределено Тогда 
		СодержимоеЯчейки = лТекущиеДанные[СтрЗаменить(Элементы[СвойстваРеквизитаРезультатЗапроса.ИмяРеквизита].ТекущийЭлемент.Имя, СвойстваРеквизитаРезультатЗапроса.ИмяРеквизита + "_", "")];
		ПоказатьВводСтроки(Новый ОписаниеОповещения("ПоказатьВводСтрокиЗавершение", ЭтаФорма), гСтроковоеПредставлениеТипа(ТипОбработка, СеансовыеДанные, ТипЗнч(СодержимоеЯчейки)), "Тип значения", ,Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыПараметров

&НаКлиенте
Процедура ПараметрыЗапросовТипНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущийПараметр = Элементы.ПараметрыТекущегоЗапроса.ТекущиеДанные;
	
	ЗаголовокЭлемента = НСтр("ru = 'Выбрать тип'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораТипаПараметра", Вычислить(ЭтотОбъектФорма));
	СписокТипов.ПоказатьВыборЭлемента(ОписаниеОповещения, ЗаголовокЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросовЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	лТекущиеДанные = Элементы.ПараметрыТекущегоЗапроса.ТекущиеДанные;
	лТипПараметра  = лТекущиеДанные.ТипВФорме;
	
	Если лТипПараметра= НСтр("ru = 'Таблица значений'") Тогда 
		Путь = Объект.ПутьКФормам + "." + "ТаблицаЗначений";
	ИначеЕсли лТипПараметра = НСтр("ru = 'Момент времени'") Тогда 
		Путь = Объект.ПутьКФормам + "." + "МоментВремени";
	ИначеЕсли лТипПараметра = НСтр("ru = 'Граница'") Тогда
		Путь = Объект.ПутьКФормам + "." + "Граница";
	ИначеЕсли лТипПараметра = НСтр("ru = 'Уникальный идентификатор'") Тогда
		лПараметры = Новый Структура;
		лПараметры.Вставить("Действие"     , Константы().УстановитьПараметрУИ);
		лПараметры.Вставить("ТекущиеДанные", лТекущиеДанные);
		лОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтрокиЗавершение", Вычислить(ЭтотОбъектФорма), лПараметры);
		ПоказатьВводСтроки(лОписаниеОповещения, Строка(лТекущиеДанные.ЗначениеВФорме), "Введите уникальный идентификатор");
		Возврат;
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(Путь, Новый Структура("Значение", лТекущиеДанные.Значение), Вычислить(ЭтотОбъектФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросовЗначениеПриИзменении(Элемент)
	
	ТекущийПараметр = Элементы.ПараметрыТекущегоЗапроса.ТекущиеДанные;
	Значение        = ТекущийПараметр.ЗначениеВФорме;
	ТекущийТип		= ТекущийПараметр.Тип;
	
	Если ТекущийТип <> "ТаблицаЗначений" И ТекущийТип <> "МоментВремени" И ТекущийТип <> "Граница" Тогда
		// #рефакторинг непрозрачный код
		ТекущийПараметр.Значение	= ЗначениеВСтрокуСервер(Значение);		
		Модифицированность 			= Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыТекущегоЗапросаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Элемент.ТекущиеДанные.Тип = "" Тогда 
		лВыбранныйЭлемент = СписокТипов.НайтиПоЗначению("Строка");
		ИнициализацияТипаИЗначенияПараметра(Элементы.ПараметрыТекущегоЗапроса.ТекущаяСтрока, лВыбранныйЭлемент);
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры // ПараметрыТекущегоЗапросаПриОкончанииРедактирования()

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	ЗапуститьВыполнениеЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросУдаленно(Команда)
	ЗапуститьВыполнениеЗапроса(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКод(Команда)
	ОбработкаДействияВыполнитьКод();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДеревоЗапросов(Команда)
	
	ОтобразитьДеревоЗапросов(Не мДеревоЗапросовВидимость);

КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьЗапросыВФайл(Команда)
	СохранитьЗапросыВФайлНачало(Ложь, Ложь, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьНастройкиОбработки(Команда)
	ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов.Форма.ФормаУпрНастройки", Новый Структура("СохранитьПередВыполнением", СохранитьПередВыполнением), Вычислить(ЭтотОбъектФорма));
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьЗапросыВНовыйФайл()
	СохранитьЗапросыВФайлНачало(Истина, Ложь, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлСЗапросами(Команда)
	
	ПроверитьМодифицированность(мОперацииСЗапросами.Открыть);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйФайлЗапросовДействие()
	
	ИмяФайлаСЗапросом = Неопределено;
	
	ОчиститьДанныеПоЗапросам();
	ДобавитьНовуюСтрокуСЗапросом();
	
	ОбновитьЗаголовок();
	
КонецПроцедуры // НовыйФайлЗапросовДействие()

&НаКлиенте
Процедура НовыйФайлЗапросов(Команда)
	
	ПроверитьМодифицированность(мОперацииСЗапросами.Новый);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыИзЗапроса(Команда)
	ОбработкаДействийЗаполнитьПараметрыИзЗапроса();	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодключенияКВнешнейБазеВПараметры(Команда)
	ОбработкаДействийНастройкиПодключенияКВнешнейБазеВПараметры();	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПараметрИзБуфера(Команда)
	ОбработкаДействияСоздатьПараметрИзБуфера();
КонецПроцедуры

Функция ПолучитьКоординатыОшибкиНаСервере(ТекстОшибки)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гПолучитьКоординатыОшибки(ТекстОшибки);
КонецФункции

&НаКлиенте
Процедура КонструкторЗапроса(Команда)

	Перем НачалоСтрока,КолонкаНач,СтрокаКон,КолонкаКон;
	
	Если ТекущийЭлемент.ВыделенныйТекст = "" Тогда
		лТекстДляКонструктора = ПолучитьУстановитьТекущийТекстЗапроса().ТекстЗапроса;
	Иначе
		лТекстДляКонструктора = ТекущийЭлемент.ВыделенныйТекст;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("СтруктураГраницВыделения, Модифицированность");
	ПараметрыОповещения.Модифицированность = Модифицированность;
	Если ТекущийЭлемент.ВыделенныйТекст <> "" Тогда 
		
		ТекущийЭлемент.ПолучитьГраницыВыделения(НачалоСтрока,КолонкаНач,СтрокаКон,КолонкаКон);
		
		лСтруктураГраницВыделения = Новый Структура();
		лСтруктураГраницВыделения.Вставить("НачалоСтрока", НачалоСтрока);
		лСтруктураГраницВыделения.Вставить("КолонкаНач"  , КолонкаНач);
		лСтруктураГраницВыделения.Вставить("СтрокаКон"   , СтрокаКон);
		лСтруктураГраницВыделения.Вставить("КолонкаКон"  , КолонкаКон);		
		
		ПараметрыОповещения.СтруктураГраницВыделения = лСтруктураГраницВыделения;
	КонецЕсли;
	
	Конструктор = Новый КонструкторЗапроса; 
	Если ЗначениеЗаполнено(лТекстДляКонструктора) Тогда 
		Попытка
			Конструктор.Текст = СокрЛП(лТекстДляКонструктора); 
		Исключение
			лТекстошибки = ОписаниеОшибки();
			лКоординатыОшибки = ПолучитьКоординатыОшибкиНаСервере(лТекстошибки);
			
			Если лКоординатыОшибки <> Неопределено Тогда 
				лСтрока = лКоординатыОшибки.Строка;
				лКолонка = лКоординатыОшибки.Колонка;				
				ПолучитьУстановитьТекущийТекстЗапроса().ЭлементФормы.УстановитьГраницыВыделения(лСтрока, лКолонка, лСтрока, лКолонка);
			КонецЕсли;
			Сообщить(лТекстошибки, СтатусСообщения.Важное);
			Возврат;
		КонецПопытки; 
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьКонструкторЗапросаЗавершение", Вычислить(ЭтотОбъектФорма), ПараметрыОповещения); 
	Конструктор.Показать(Оповещение);
	
КонецПроцедуры

Функция СкопироватьОбработкуДляОтладкиНаСервере(Адрес)
	
	ФайлСОбработкой = ПолучитьИзВременногоХранилища(Адрес);
	лПутьКФайлу     = ИмяФайлаКонсолиЗапросовНаСервере();
	
	Попытка
		ФайлСОбработкой.Записать(лПутьКФайлу);
	Исключение
		мПоказатьОшибкуНаСервере(ОписаниеОшибки());
	КонецПопытки; 
	
	Возврат лПутьКФайлу;
	
КонецФункции  // СкопироватьОбработкуДляОтладкиНаСервере()

&НаКлиенте
Процедура СкопироватьОбработкуДляОтладки(Команда)
	
	Попытка
		Данные = Новый ДвоичныеДанные(ПутьКФайлуСОбработкой);
		Адрес = ПоместитьВоВременноеХранилище(Данные);
		ПутьКФайлуСОбработкойНаСервере = СкопироватьОбработкуДляОтладкиНаСервере(Адрес);	
	Исключение
		мПоказатьОшибкуНаСервере(ОписаниеОшибки());
	КонецПопытки; 
	
	Если ПутьКФайлуСОбработкойНаСервере <> Неопределено Тогда 
		ТД = Новый ТекстовыйДокумент(); 		
		ТД.УстановитьТекст(гТекстПомощиПоВариантамИспользованияОбработкиВРежимеОтладки(ТипОбработка, СеансовыеДанные, ПутьКФайлуСОбработкойНаСервере));
		ТД.Показать("Инструкция по отладке запросов."); 
	КонецЕсли;
	
КонецПроцедуры // СкопироватьОбработкуДляОтладки()

&НаКлиенте
Процедура СкопироватьОбработкуДляОтладкиРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СкопироватьОбработкуДляОтладки(Неопределено);
КонецПроцедуры

Функция ЗагрузитьЗапросыДляОтладкиНаСервере()
	
	ФайлыСЗапросамиДляОтладки = НайтиФайлы(КаталогВременныхФайлов(),"*." + гСтроковыеКонтанты(ТипОбработка, СеансовыеДанные, "РасширениеФайлаДаныхДляОтладки"), Ложь);	
	
	КоличествоЗагруженныхЗапросов = ФайлыСЗапросамиДляОтладки.Количество();
	Если КоличествоЗагруженныхЗапросов > 0 Тогда 
		
		ДеревоЗапросовЗначение = РеквизитФормыВЗначение("ДеревоЗапросов");
		
		ШаблонИмени = "Запрос для отладки";
		Для Каждого ФайлСЗапросом Из ФайлыСЗапросамиДляОтладки Цикл
			
			ДанныеДляОтладки = ЗначениеИзФайла(ФайлСЗапросом.ПолноеИмя);
			
			НовыйЗапрос = ДеревоЗапросовЗначение.Строки.Добавить();
			
			НовыйЗапрос.ТекстЗапроса  = ДанныеДляОтладки.ТекстЗапроса;
			НовыйЗапрос.Имя           = ПолучитьСледующееУникальноеИмя(ШаблонИмени, ДеревоЗапросовЗначение.Строки, "Имя");
			НовыйЗапрос.Идентификатор = Новый УникальныйИдентификатор;
			
			Для каждого ПараметрЗапроса Из ДанныеДляОтладки.ПараметрыЗапроса Цикл
				НоваяСтрока1 = ПараметрыЗапросов.Добавить();
				НоваяСтрока1.ИдентификаторЗапроса = НовыйЗапрос.Идентификатор;
				НоваяСтрока1.Значение             = ЗначениеВСтрокуВнутр(ПараметрЗапроса.Значение);
				НоваяСтрока1.Имя                  = ПараметрЗапроса.Ключ;
			КонецЦикла; 
			
			УдалитьФайлы(ФайлСЗапросом.ПолноеИмя);
			
		КонецЦикла;
		
		Модифицированность = Истина;
		
		ЗначениеВРеквизитФормы(ДеревоЗапросовЗначение, "ДеревоЗапросов");
		
	КонецЕсли;
	
	Возврат КоличествоЗагруженныхЗапросов
	
КонецФункции // ЗагрузитьЗапросыДляОтладкиНаСервере()

&НаКлиенте
Процедура ЗагрузитьЗапросыДляОтладки(Команда)
	
	лРезультатЗагрузки = ЗагрузитьЗапросыДляОтладкиНаСервере();
	
	мТекущаяСтрокаДереваЗапросов = Неопределено;
	Элементы.ДеревоЗапросов.ТекущаяСтрока = ДеревоЗапросов.ПолучитьЭлементы()[ДеревоЗапросов.ПолучитьЭлементы().Количество()-1].ПолучитьИдентификатор();	
	
	Если лРезультатЗагрузки = 0 Тогда 
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПоказатьПредупреждениеЗавершение", ЭтаФорма), "Не найдено данных для отладки.", 10, "Информация");
	Иначе
		ОтобразитьДеревоЗапросов(Истина);
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьЗапросыДляОтладки()

&НаСервереБезКонтекста
Функция СписокФайловНаСервереПоПрефиксу(ТипОбработка, СеансовыеДанные, КаталогВременныхФайлов, ИмяСервера, Префикс)
	
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	ИмяСервера             = ИмяКомпьютера();
	
	лМаскаПоиска   = гСтроковыеКонтанты(ТипОбработка, СеансовыеДанные, Префикс) + "*";
	лПечатныеФормы = НайтиФайлы(КаталогВременныхФайлов, лМаскаПоиска, Ложь);	
	
	//лСписокПечатныхФорм = Новый СписокЗначений;
	лСписокПечатныхФорм = Новый Массив;
	Для Каждого ФайлПечатнойформы Из лПечатныеФормы Цикл
		//лСписокПечатныхФорм.Добавить(ФайлПечатнойформы.ПолноеИмя, ФайлПечатнойформы.Имя, Истина); // #рефакторинг добавит ькартинки по типам файлов
		лСписокПечатныхФорм.Добавить(Новый ОписаниеПередаваемогоФайла(ФайлПечатнойформы.Имя, ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлПечатнойформы.ПолноеИмя), Новый УникальныйИдентификатор)));
	КонецЦикла;
	
	Возврат лСписокПечатныхФорм;
	
КонецФункции // СписокФайловНаСервереПоПрефиксу()

&НаКлиенте
Процедура ЗагрузитьСохраненныеПечатныеФормы(Команда)
	
	Перем лКаталогВременныхФайлов, лИмяСервера;
	
	СписокПечатныхФорм = СписокФайловНаСервереПоПрефиксу(ТипОбработка, СеансовыеДанные, лКаталогВременныхФайлов, лИмяСервера, "ПрефиксФайлаСПечатнойФормой");
	
	Если СписокПечатныхФорм.Количество() = 0 Тогда 
		лТекстСообщения = "Не найдено сохраненных печатных форм (%КаталогВременныхФайлов%, %ИмяСервера%).";
		лТекстСообщения = СтрЗаменить(лТекстСообщения, "%ИмяСервера%"            , лИмяСервера);
		лТекстСообщения = СтрЗаменить(лТекстСообщения, "%КаталогВременныхФайлов%", лКаталогВременныхФайлов);
		ПоказатьСообщениеПользователю(лТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнитьПослеПолученияФайлов", ЭтаФорма, Новый Структура("КаталогВременныхФайлов", лКаталогВременныхФайлов));
	
	лДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	лДиалогВыбораКаталога.Заголовок = "Выберите каталог для загрузки печатных форм";
	
	НачатьПолучениеФайлов(ОповещениеОЗавершении, СписокПечатныхФорм, лДиалогВыбораКаталога, Истина);
	
КонецПроцедуры // ЗагрузитьСохраненныеПечатныеФормы()

&НаКлиенте
Процедура ЗагрузитьСохраненныеСхемыСКД(Команда)
	
	Перем лКаталогВременныхФайлов, лИмяСервера;
	
	СписокСхемСКД = СписокФайловНаСервереПоПрефиксу(ТипОбработка, СеансовыеДанные, лКаталогВременныхФайлов, лИмяСервера, "ПрефиксФайлаСоСхемойСКД");
	
	Если СписокСхемСКД.Количество() = 0 Тогда 
		лТекстСообщения = "Не найдено сохраненных схем СКД (%КаталогВременныхФайлов%, %ИмяСервера%).";
		лТекстСообщения = СтрЗаменить(лТекстСообщения, "%ИмяСервера%"            , лИмяСервера);
		лТекстСообщения = СтрЗаменить(лТекстСообщения, "%КаталогВременныхФайлов%", лКаталогВременныхФайлов);
		ПоказатьСообщениеПользователю(лТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнитьПослеПолученияФайлов", ЭтаФорма, Новый Структура("КаталогВременныхФайлов", лКаталогВременныхФайлов));
	
	лДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	лДиалогВыбораКаталога.Заголовок = "Выберите каталог для загрузки схем СКД";
	
	НачатьПолучениеФайлов(ОповещениеОЗавершении, СписокСхемСКД, лДиалогВыбораКаталога, Истина);
	
КонецПроцедуры // ЗагрузитьСохраненныеСхемыСКД()

&НаКлиенте
Процедура ВыполнитьПослеПолученияФайлов(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	лКаталогСПечатнымиФормами = Неопределено;
	лКаталогВременныхФайлов   = ДополнительныеПараметры.КаталогВременныхФайлов;
	лФайлыКУдалениюНаСервере = Новый Массив;
	Для Каждого ПолученныйФайл Из ПолученныеФайлы Цикл
		лФайл = Новый Файл(ПолученныйФайл.Имя);	
		Если лКаталогСПечатнымиФормами = Неопределено Тогда 
			лКаталогСПечатнымиФормами = лФайл.Путь;
		КонецЕсли;
		лФайлыКУдалениюНаСервере.Добавить(лКаталогВременныхФайлов + лФайл.Имя);
	КонецЦикла;
	
	УдалитьФайлыНаСервере(лФайлыКУдалениюНаСервере);
	
	ЗапуститьПриложение(лКаталогСПечатнымиФормами);
 
КонецПроцедуры // ВыполнитьПослеПолученияФайлов()

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	КомментированиеВыделенногоТекста(Истина);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКомментарий(Команда)
	КомментированиеВыделенногоТекста(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДействияКнопкаМенюIntellisense(Команда)
	ОткрытьМенюАвтоподстановки(ПолучитьУстановитьТекущийТекстЗапроса().ЭлементФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКоличествоСтрокРезультатаЗапроса(Команда)
	
	Если РезультатЗапроса().Количество() > 0 Тогда 
		ТекстВопроса  = НСтр("ru = 'Очистить таблицу с результатом?'");
		КнопкиВопроса = РежимДиалогаВопрос.ОКОтмена;
		ПараметрыВопроса = Новый Структура;
		ПараметрыВопроса.Вставить("ИдВопроса"                     , "ОчиститьТаблицуСРезультатом");
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросЗавершение", ЭтаФорма, ПараметрыВопроса), ТекстВопроса, КнопкиВопроса, 10, КодВозвратаДиалога.Отмена, "Вопрос", КодВозвратаДиалога.Нет);
	Иначе
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПоказатьПредупреждениеЗавершение", ЭтаФорма), "Таблица с результатом пуста.", 10);
	КонецЕсли;
	
КонецПроцедуры // ПоказатьКоличествоСтрокРезультатаЗапроса()

&НаКлиенте
Процедура НоваяСтрокаНаТомЖеУровне(Команда)
	лРодительТекущейстроки = ПолучитьРодителяТекущейСтроки(мТекущаяСтрокаДереваЗапросов);
	лНоваястрока = ?(лРодительТекущейстроки = Неопределено, ДеревоЗапросов, лРодительТекущейстроки).ПолучитьЭлементы().Добавить();
	лНоваястрока.Идентификатор = Новый УникальныйИдентификатор;
	Элементы.ДеревоЗапросов.ТекущаяСтрока = лНоваястрока.ПолучитьИдентификатор();
КонецПроцедуры // НоваяСтрокаНаТомЖеУровне()

&НаКлиенте
Процедура ПеренестиВеткуРекурсивно(СтрокаПриемника, СтрокаИсточника)
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);		
	
	Для Каждого ПодчиненнаяВеткаИсточника из СтрокаИсточника.ПолучитьЭлементы() Цикл
		лНоваястрока = СтрокаПриемника.ПолучитьЭлементы().Добавить();
		ПеренестиВеткуРекурсивно(лНоваястрока, ПодчиненнаяВеткаИсточника);
	КонецЦикла;
	
КонецПроцедуры // ПеренестиВеткуРекурсивно()

&НаКлиенте
Процедура СгруппироватьЗапросы(Команда)
	
	лОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВводСтрокиСгруппироватьЗапросыПродолжение", ЭтаФорма);
	
	ПоказатьВводСтроки(лОписаниеОповещения, "Сгруппирована " + ТекущаяДата(), "Введите название группы", 200);
	
КонецПроцедуры // СгруппироватьЗапросы()

&НаКлиенте
Процедура ВыгрузитьТекущийЗапросВОблако(Команда)
	СохранитьЗапросыВОблако(мОперацииСЗапросами.СохранитьКАК, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеЗапросыВОблако(Команда)
	СохранитьЗапросыВОблако(мОперацииСЗапросами.СохранитьКАК);
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПодключенияКОблаку(Команда)
	ПодключенияКОблакуДействие();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗапросИзОблака(Команда)
	ДобавитьЗапросИзОблакаДействие();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ДиалогНеВыбран(Результат)
	Возврат Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена ИЛИ Результат = КодВозвратаДиалога.Таймаут ИЛИ Не Результат.Выбран;
КонецФункции // ДиалогНеВыбран()

// +++ Добавление во внешние обработки

&НаКлиенте
Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
	ЭтаФорма.Открыть();	
КонецПроцедуры

// --- Добавление во внешние обработки

#Область ПроцедурыИФункцииРаботыСТабличнымПолемРезультатаЗапроса

Функция ИмяРеквизитаРезультатЗапроса() Экспорт
	
	//Если СпособВыгрузкиДерево() Тогда 
	//	ОкончаниеИмениРеквизита = "Дерево";
	//Иначе
	//	ОкончаниеИмениРеквизита = "Таблица";
	//КонецЕсли;	
	//
	//Возврат мПрефиксИмениРеквизитаСРезультатомЗапроса + ОкончаниеИмениРеквизита;
	
КонецФункции // ИмяРеквизитаРезультатЗапроса()

&НаКлиенте
Функция РезультатЗапроса() Экспорт
	
	Возврат Вычислить(СвойстваРеквизитаРезультатЗапроса.ИмяРеквизита);
	
КонецФункции // РезультатЗапроса()

Функция РезультатЗапросаНаСервере() Экспорт
	
	Возврат Вычислить(?(ЭтотОбъектДоступен, "ЭтотОбъект.", "") + СвойстваРеквизитаРезультатЗапроса.ИмяРеквизита);
	
КонецФункции // РезультатЗапросаНаСервере()

Процедура УстановитьРезультатЗапроса(ДанныеЗапроса)
	
	//Выполнить(ИмяРеквизитаРезультатЗапроса() + " = ДанныеЗапроса.Скопировать();");
	//
	//лЭлементФормыСРезультатомЗапроса = ЭлементыФормы.Найти(мИмяЭлементаФормыСРезультатомЗапроса);
	//лИмяРеквизитаСДаннымиРезультатаЗапроса = ИмяРеквизитаРезультатЗапроса();
	//Если лЭлементФормыСРезультатомЗапроса.Данные <> лИмяРеквизитаСДаннымиРезультатаЗапроса Тогда 
	//	лЭлементФормыСРезультатомЗапроса.Данные = лИмяРеквизитаСДаннымиРезультатаЗапроса;
	//КонецЕсли;
	
КонецПроцедуры // УстановитьРезультатЗапроса()

#КонецОбласти

Функция ИмяНовогоПараметраСтруктуры(ИмяПараметра, Массив)
	
	НовоеИмяПараметра = ИмяПараметра;
	
	Сч = 1;
	Пока Массив.Найти(НовоеИмяПараметра) <> Неопределено Цикл
		НовоеИмяПараметра = ИмяПараметра + Формат(Сч, "ЧГ=0");
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат НовоеИмяПараметра;
	
КонецФункции // ИмяНовогоПараметраСтруктуры()

#Область Константы

&НаСервереБезКонтекста
Функция гОперацииСЗапросами(ТипОбработка, СеансовыеДанные)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гОперацииСЗапросами();
КонецФункции

&НаСервереБезКонтекста
Функция гТипыИсточниковДанных(ТипОбработка, СеансовыеДанные)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гТипыИсточниковДанных();
КонецФункции

&НаСервереБезКонтекста
Функция гРежимыЗакрытияФормыВводаПроизвольногоКода(ТипОбработка, СеансовыеДанные, Режим)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гРежимыЗакрытияФормыВводаПроизвольногоКода()[Режим];
КонецФункции

&НаСервереБезКонтекста
Функция гЗаголовокОбработки(ТипОбработка, СеансовыеДанные, ИмяПользователяВОблаке, ИмяФайлаСЗапросом)

	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гЗаголовокОбработки(ИмяПользователяВОблаке, ИмяФайлаСЗапросом);

КонецФункции // гЗаголовокОбработки()

&НаСервереБезКонтекста
Функция гНазваниеОбработки(ТипОбработка, СеансовыеДанные, ВернутьПолноеНазвание = Истина)

	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гНазваниеОбработки(ВернутьПолноеНазвание);

КонецФункции // гНазваниеОбработки()

&НаСервереБезКонтекста
Функция гРежимыОткрытияФормы(ТипОбработка, СеансовыеДанные)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гРежимыОткрытияФормы();
КонецФункции

Функция РежимыДобавленияСтроки()
	Возврат Новый Структура("Добавление, Копирование", "Добавление", "Копирование");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Константы()
	
	Результат = Новый Структура;
	Результат.Вставить("ВсеКолонки"                         , "Все колонки");
	Результат.Вставить("ИмяПараметраСоединенияСИБ"          , "СтрокаСоединенияВнешнейБазы");
	Результат.Вставить("ВерсияВнешнейБазы"                  , "ВерсияВнешнейБазы");
	Результат.Вставить("УстановитьПометкуУдаления"          , "УстановитьПометкуУдаления");	
	Результат.Вставить("Провести"                           , "Провести");	
	Результат.Вставить("СоздатьПараметрИзБуфера"            , "СоздатьПараметрИзБуфера");
	Результат.Вставить("ВыгрузитьТаблицуРезультатаВПараметр", "ВыгрузитьТаблицуРезультатаВПараметр");
	Результат.Вставить("ДействияСРезультатомЗапроса"        , "ДействияСРезультатомЗапроса");
	Результат.Вставить("УстановитьПараметрУИ"               , "УстановитьПараметрСТипомУникальныйИдентификатор");
	
	Возврат Результат;
	
КонецФункции // Константы()

&НаСервереБезКонтекста
Функция гТекстПомощиПоВариантамИспользованияОбработкиВРежимеОтладки(ТипОбработка, СеансовыеДанные, ПутьКФайлуСОбработкойНаСервере)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гТекстПомощиПоВариантамИспользованияОбработкиВРежимеОтладки(ПутьКФайлуСОбработкойНаСервере);
КонецФункции // гСтроковыеКонтанты()

&НаСервереБезКонтекста
Функция гСтроковыеКонтанты(ТипОбработка, СеансовыеДанные, ИмяКонстанты)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гСтроковыеКонтанты(ИмяКонстанты);
КонецФункции // гСтроковыеКонтанты()

&НаСервереБезКонтекста
Функция гСтроковоеПредставлениеТипа(ТипОбработка, СеансовыеДанные, Тип)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гСтроковоеПредставлениеТипа(Тип);
КонецФункции

Функция ЗаполнитьПараметрыНаФормеИПолучитьТекстЗапросаИзКода1сНаСервере(ТипОбработка, СеансовыеДанные, Код1С, ПростаяОбработкаТекста)
	
	лЗапрос = гПолучитьЗапросИзТекста(ТипОбработка, СеансовыеДанные, Код1С, ПростаяОбработкаТекста);
	
	// #заполнениепараметровзапроса 1
	Для каждого лПараметр Из лЗапрос.Параметры Цикл
		Попытка
			лСтрокаСПараметром = НайтиЗначениеБезУчетаРегистра(лПараметр.Ключ, ПараметрыТекущегоЗапроса, "Имя");
			Если лСтрокаСПараметром = Неопределено Тогда 
				лСтрокаСПараметром     = ПараметрыТекущегоЗапроса.Добавить();
				лСтрокаСПараметром.Имя = лПараметр.Ключ;
			КонецЕсли;                                                                                                            
			
			лСтрокаСПараметром.Тип            = XMLТип(ТипЗнч(лПараметр.Значение)).ИмяТипа;
			лСтрокаСПараметром.Значение       = ЗначениеВСтрокуВнутр(лПараметр.Значение);
			лСтрокаСПараметром.ЗначениеВФорме = ФормированиеПредставленияЗначения(лСтрокаСПараметром.Значение);
			
			ДанныеПоТипу = СписокТипов.НайтиПоЗначению(лСтрокаСПараметром.Тип);                                      // простые типы
			Если ДанныеПоТипу = Неопределено Тогда                                                                           
				ДанныеПоТипу = СписокТипов.НайтиПоЗначению(СериализаторXDTO.XMLТип(лСтрокаСПараметром.Тип).ИмяТипа); // сложные типы
			КонецЕсли;
			
			лСтрокаСПараметром.ТипВФорме    = ДанныеПоТипу.Представление;
			лСтрокаСПараметром.КартинкаТипа = ДанныеПоТипу.Картинка;
		Исключение
			Сообщить("Неудачная попытка установки параметра " + лПараметр.Ключ + "[" + лПараметр.Значение + "](ощибка:" + ОписаниеОшибки() + ")");
		КонецПопытки; 
	КонецЦикла; 
	
	Возврат лЗапрос.Текст;
	
КонецФункции // ЗаполнитьПараметрыНаФормеИПолучитьТекстЗапросаИзКода1сНаСервере()
 
// ДУБЛЬ В ОБЫЧНОЙ ФОРМЕ 
&НаКлиенте
Функция ПолучитьТипыJSONБЕзЗначений() Экспорт
	
	// null (Null)
	// булево (Boolean)
	// имяСвойства (PropertyName)
	// комментарий (Comment)
	// конецМассива (ArrayEnd)
	// конецОбъекта (ОbjectEnd)
	// НачалоМассива (ArrayStart)
	// НачалоОбъекта (ObjectStart)
	// Ничего (None)
	// строка (String)
	// число (Number)
	
	лМассивТиповJSONБезЗначений = Новый Массив;
	лМассивТиповJSONБезЗначений.Добавить(ТипЗначенияJSON.НачалоМассива);
	лМассивТиповJSONБезЗначений.Добавить(ТипЗначенияJSON.КонецМассива);
	лМассивТиповJSONБезЗначений.Добавить(ТипЗначенияJSON.НачалоОбъекта);
	лМассивТиповJSONБезЗначений.Добавить(ТипЗначенияJSON.КонецОбъекта);
	
	Возврат лМассивТиповJSONБезЗначений;
КонецФункции // ПолучитьТипыJSONБЕзЗначений()

Функция ИмяФайлаКонсолиЗапросовНаСервере()
	
	лФайлЛокально  = Новый Файл(ПутьКФайлуСОбработкой);
	лФайл          = Новый Файл(ПолучитьИмяВременногоФайла(лФайлЛокально.Расширение));

	Возврат лФайл.Путь + лФайлЛокально.Имя;
	
КонецФункции // ИмяФайлаКонсолиЗапросовНаСервере()

Функция гПрефиксСпецПоляНаСервере()
	
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гПрефиксСпецПоля()
	
КонецФункции

&НаКлиенте
Функция гПрефиксСпецПоля()
	
	КлючКэшаЗначений = "гПрефиксСпецПоляНаСервере";
	Если Не мКэшЗначений.Свойство(КлючКэшаЗначений) Тогда 
		мКэшЗначений.Вставить(КлючКэшаЗначений, гПрефиксСпецПоляНаСервере());
	КонецЕсли;
	
	Возврат мКэшЗначений[КлючКэшаЗначений];
	
КонецФункции

&НаСервереБезКонтекста
Функция РежимыКонтекстнойПодсказкиНаСервере(ТипОбработка, СеансовыеДанные)
	
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).РежимыКонтекстнойПодсказки().Условия
	
КонецФункции // РежимыКонтекстнойПодсказкиНаСервере()

// Возвращает пустую структуру для параметра ПараметрыОжидания процедуры ОжидатьЗавершение.
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * ФормаВладелец          - УправляемаяФорма, Неопределено - форма, из которой вызывается длительная операция.
//   * ТекстСообщения         - Строка - текст сообщения, выводимый на форме ожидания.
//                                       Если не задан, то выводится "Пожалуйста, подождите...".
//   * ВыводитьОкноОжидания   - Булево - если Истина, то открыть окно ожидания с визуальной индикацией длительной операции. 
//                                       Если используется собственный механизм индикации, то следует указать Ложь.
//   * ВыводитьПрогрессВыполнения - Булево - выводить прогресс выполнения в процентах на форме ожидания.
//   * ОповещениеОПрогрессеВыполнения - ОписаниеОповещения - оповещение, которое периодически вызывается при 
//                                      проверке готовности фонового задания. Параметры процедуры-обработчика оповещения:
//     ** Прогресс - Структура, Неопределено - структура со свойствами или Неопределено, если задание было отменено. Свойства: 
//	     *** Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                           "Выполнено", если задание было успешно выполнено;
//	                                         "Ошибка", если задание завершено с ошибкой;
//                                           "Отменено", если задание отменено пользователем или администратором.
//	     *** ИдентификаторЗадания - УникальныйИдентификатор - идентификатор запущенного фонового задания.
//	     *** Прогресс             - Структура, Неопределено - результат функции ДлительныеОперации.ПрочитатьПрогресс, если ВыводитьПрогрессВыполнения = Истина.
//	     *** Сообщения            - ФиксированныйМассив, Неопределено - массив объектов СообщениеПользователю, если ВыводитьСообщения = Истина
//     ** ДополнительныеПараметры - Произвольный - произвольные данные, переданные в описании оповещения. 
//
//   * ВыводитьСообщения      - Булево - выводить сообщения, сформированные в процедуре-обработчике длительной операции.
//                                       Значение Истина имеет смысл, только если ВыводитьПрогрессВыполнения = Ложь
//   * Интервал               - Число  - интервал в секундах между проверками готовности длительной операции.
//                                       По умолчанию 0 - после каждой проверки интервал увеличивается с 1 до 15 секунд с коэффициентом 1.4.
//   * ОповещениеПользователя - Структура - содержит свойства:
//     ** Показать            - Булево - если Истина, то по завершении длительной операции вывести оповещение пользователя.
//     ** Текст               - Строка - текст оповещения пользователя.
//     ** НавигационнаяСсылка - Строка - навигационная ссылка оповещения пользователя.
//     ** Пояснение           - Строка - пояснение оповещения пользователя.
// 
&НаКлиенте
Функция ПараметрыОжидания(ФормаВладелец) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ФормаВладелец"                 , ФормаВладелец);
	Результат.Вставить("ТекстСообщения"                , "");
	Результат.Вставить("ВыводитьОкноОжидания"          , Истина); 
	Результат.Вставить("ВыводитьПрогрессВыполнения"    , Ложь); 
	Результат.Вставить("ОповещениеОПрогрессеВыполнения", Неопределено); 
	Результат.Вставить("ВыводитьСообщения"             , Ложь); 
	Результат.Вставить("Интервал"                      , 0); 
	Результат.Вставить("ИдентификаторЗадания"          , ПоместитьВоВременноеХранилище(Новый Структура("Статус", "Выполняется"), УникальныйИдентификатор)); 														 														 
	
	ОповещениеПользователя = Новый Структура;
	ОповещениеПользователя.Вставить("Показать"           , Ложь);
	ОповещениеПользователя.Вставить("Текст"              , Неопределено);
	ОповещениеПользователя.Вставить("НавигационнаяСсылка", Неопределено);
	ОповещениеПользователя.Вставить("Пояснение"          , Неопределено);
	Результат.Вставить("ОповещениеПользователя", ОповещениеПользователя);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

&НаСервереБезКонтекста
Функция гРазложитьСтрокуВМассивПодстрок(ТипОбработка, СеансовыеДанные, Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гРазложитьСтрокуВМассивПодстрок(Строка, Разделитель, ПропускатьПустыеСтроки, СокращатьНепечатаемыеСимволы);
КонецФункции // гРазложитьСтрокуВМассивПодстрок()

&НаСервереБезКонтекста
Функция ВерсияПриложенияНаСервере()
	СистемнаяИнформация = Новый("СистемнаяИнформация");
	Возврат СистемнаяИнформация.ВерсияПриложения
КонецФункции

#Область ОбработчикиПрограммноДобавленныхЭлементов

&НаКлиенте
Процедура ВыборМенюИнформация(Кнопка, ДополнительныеПараметры) Экспорт
	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗапуститьПриложение(гНажатиеНаКнопкуВыборМенюИнформацияНаСервере(Кнопка.Значение, Истина));
КонецПроцедуры // ВыборМенюИнформация()

&НаКлиенте
Процедура ВыборМенюДействие(Кнопка, ДополнительныеПараметры) Экспорт
	
	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ВыборМенюДействие()

&НаКлиенте
Процедура МенюИнформация(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыборМенюИнформация", Вычислить(ЭтотОбъектФорма)); 
	ПоказатьВыборИзМеню(Оповещение, ПолучитьМенюНаСервереСписком("Информация", ТипОбработка, СеансовыеДанные));
КонецПроцедуры

&НаКлиенте
Процедура МенюДополнительно(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыборМенюДействие", Вычислить(ЭтотОбъектФорма)); 
	ПоказатьВыборИзМеню(Оповещение, ПолучитьМенюНаСервереСписком("Дополнительно", ТипОбработка, СеансовыеДанные));	
КонецПроцедуры

&НаКлиенте
Процедура СервисЗагрузитьИзБуфераВТаблицуСРезультатом(Команда)
	
	лДанныеБуфера = ПодготовитьДанныеИзБуфера();
	Если лДанныеБуфера.КоличествоКолонок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	АдресРезультата              = ПоместитьРезультатВХранилищеНаСервере(РезультатЗапроса());
	лКоличествоКолонокЭлементаТЗ = ПолучитьКоличествоКолонокРезультатаНаСервере(АдресРезультата);

	Если лДанныеБуфера.КоличествоКолонок > лКоличествоКолонокЭлементаТЗ Тогда 
		ТекстВопроса  = НСтр("ru = 'Добавить колонки в таблице?'");
		КнопкиВопроса = РежимДиалогаВопрос.ДаНетОтмена;
		ПараметрыВопроса = Новый Структура;
		ПараметрыВопроса.Вставить("ИдВопроса"                     , "ДобавитьКолонкиВТаблице");
		ПараметрыВопроса.Вставить("МассивКолонокСтрокиТаблицы"    , лДанныеБуфера.МассивКолонок);
		ПараметрыВопроса.Вставить("Текст"                         , лДанныеБуфера.Текст);
		ПараметрыВопроса.Вставить("Разделитель"                   , лДанныеБуфера.Разделитель);
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросЗавершение", ЭтаФорма, ПараметрыВопроса), ТекстВопроса, КнопкиВопроса, 10, КодВозвратаДиалога.Нет, "Вопрос", КодВозвратаДиалога.Нет);
	Иначе
		ТекстВТаблицуНаСервере(лДанныеБуфера.МассивКолонок, лДанныеБуфера.Текст, Ложь, лДанныеБуфера.Разделитель);
		ОбновитьСостояниеРезультатаЗапроса();
	КонецЕсли;

КонецПроцедуры // СервисЗагрузитьИзБуфераВТаблицуСРезультатом()

&НаКлиенте
Процедура КнопкаМенюСервисВыполнитьКод(Команда)
	ОбработкаДействияВыполнитьКод();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМенюСервисВыгрузитьКолонкуРезультатаЗапросаВПараметр(Команда)
	ОбработкаДействияВыгрузитьВПараметр();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМенюСервисПровестиДокументы(Команда)
	
	лПараметры  = Новый Структура();
	лПараметры.Вставить("Действие", Константы().Провести);
	лПараметры.Вставить("Провести", Истина);
	
	ВыбратьКолонкуДляДействияСРезультатомЗапроса(лПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМенюСервисОтменитьПроведение(Команда)
	
	лПараметры  = Новый Структура();
	лПараметры.Вставить("Действие", Константы().Провести);
	лПараметры.Вставить("Провести", Ложь);
	
	ВыбратьКолонкуДляДействияСРезультатомЗапроса(лПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМенюСервисУстановитьПометкуУдаления(Команда)
	
	лПараметры  = Новый Структура();
	лПараметры.Вставить("Действие"       , Константы().УстановитьПометкуУдаления);
	лПараметры.Вставить("ПометкаУдаления", Истина);
	
	ВыбратьКолонкуДляДействияСРезультатомЗапроса(лПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМенюСервисСнятьПометкуУдаления(Команда)
	
	лПараметры  = Новый Структура();
	лПараметры.Вставить("Действие"       , Константы().УстановитьПометкуУдаления);
	лПараметры.Вставить("ПометкаУдаления", Ложь);
	
	ВыбратьКолонкуДляДействияСРезультатомЗапроса(лПараметры);
	
КонецПроцедуры

// Меню: "ПреобразованияКодаВЗапросИОбратно"

&НаКлиенте
Процедура КнопкаМенюПолучениеЗапросаИзКода1СПолучитьЗапросСОбработкой(Команда)
	ОбработкаДействияПолучениеЗапросаИзКода1СПолучитьЗапрос(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМенюПолучениеЗапросаИзКода1СПолучитьЗапросБезОбработки(Команда)
	ОбработкаДействияПолучениеЗапросаИзКода1СПолучитьЗапрос(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМенюПолучениеКода1СПоЗапросуПолучитьКод1ССВыборкой(Команда)
	ОбработкаДействияПолучениеКода1СПоЗапросуПолучитьКод1С(0)
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМенюПолучениеКода1СПоЗапросуПолучитьКод1ССТаблицейЗначений(Команда)
	ОбработкаДействияПолучениеКода1СПоЗапросуПолучитьКод1С(1)
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМенюПолучениеКода1СПоЗапросуПолучитьКод1ССОбработкойРезультата(Команда)
	ОбработкаДействияПолучениеКода1СПоЗапросуПолучитьКод1С(2)
КонецПроцедуры



&НаКлиенте
Процедура КнопкаМенюДополнительноПоиск(Команда)
	ОповещениеОЗакрытииформаУпрПоиск = Новый ОписаниеОповещения("ОбработкаЗакрытияформаУпрПоиск", Вычислить(ЭтотОбъектФорма));
	ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов.Форма.ФормаУпрПоиск",, Вычислить(ЭтотОбъектФорма),,,, ОповещениеОЗакрытииформаУпрПоиск);
КонецПроцедуры // ДополнительноПоиск()

Функция СписокОбъектовМетаданныхИзТекстаСервере(ТекстЗапроса)
	// #рефакторинг ошибка возврата менеджера, для упр форм необходимо возвращать в другом виде
	// возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гСписокОбъектовМетаданныхИзТекста(ТекстЗапроса);
КонецФункции // СписокОбъектовМетаданныхИзТекстаСервере()

&НаКлиенте
Процедура ДополнительноОткрытьФормуСпискаМетаданногоизЗапроса(Команда)
	// временный алгоритм. Необходимо сделать универсальный для других объектов метаданных!!!!

	// списокОбъектовМетаданных = СписокОбъектовМетаданныхИзТекстаСервере(ПолучитьУстановитьТекущийТекстЗапроса().ТекстЗапроса);
	//
	// если СписокОбъектовМетаданных.Количество() > 0 Тогда 
	//	ВыбЗначениеМетаданного = СписокОбъектовМетаданных.ВыбратьЭлемент("Выберите объект для открытия формы списка.");
	//	Если ВыбЗначениеМетаданного <> Неопределено Тогда 
	//		ВыбЗначениеМетаданного.Значение.ПолучитьФормуСписка().Открыть();
	//	КонецЕсли;
	// иначе
	//	ПоказатьПредупреждение(Новый ОписаниеОповещения("ПоказатьПредупреждениеЗавершение", ЭтаФорма), "Не найдены метаданные в запросе.");
	// конецЕсли;
КонецПроцедуры // КнопкаМенюДополнительноПоиск()

#КонецОбласти 

#Область ЗавершенияАсинхронныхВызовов

&НаКлиенте
Процедура ПодключенияКОблакуДействиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда  
		
		ОбработатьИзменениеДанныехОПодключении(РезультатЗакрытия);
		Если РезультатЗакрытия.ИдентификаторСессии <> ИдентификаторСессии Тогда 
			
			Если Не ЗначениеЗаполнено(РезультатЗакрытия.email) Тогда 
				ИмяФайлаСЗапросом = ""; 
			КонецЕсли;
			ИмяПользователяВОблаке = РезультатЗакрытия.email;
			ИдентификаторСессии    = РезультатЗакрытия.ИдентификаторСессии;

			ОбновитьЗаголовок();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодключенияКОблакуДействиеЗавершение()

&НаКлиенте
Процедура ОкончаниеПроверкиСуществования(Существует, ДополнительныеПараметры) Экспорт
	
	Перем ИсточникПроверки;
	
	Если Не ДополнительныеПараметры.Свойство("ИсточникПроверки", ИсточникПроверки) Тогда 
		ВызватьИсключение "Не определен источник проверки в обработчике ОкончаниеПроверкиСуществования";
	ИначеЕсли ИсточникПроверки = "СохранитьЗапросыВФайлНачало" Тогда 
		лПараметры = ДополнительныеПараметры.ТранзитныеПараметры;
		лПараметры.ДополнительныеПараметры.Вставить("СохранитьЗначенияПоЗапросу", Ложь);
		лПараметры.ДополнительныеПараметры.Вставить("ФайлСуществует"            , Существует);
		СохранитьЗапросыВФайлНачало(лПараметры.ВызыватьДиалог, лПараметры.СохранитьТекущийЗапрос, лПараметры.ДополнительныеПараметры)
	КонецЕсли;
	
КонецПроцедуры // ОкончаниеПроверкиСуществования()

&НаКлиенте
Процедура ПоказатьВводСтрокиСгруппироватьЗапросыПродолжение(Строка, ДополнительныеПараметры) Экспорт
	
	Если Строка <> Неопределено Тогда 
		// создаем новую группу
		лРодительТекущейстроки = ПолучитьРодителяТекущейСтроки(мТекущаяСтрокаДереваЗапросов);
		
		лЭлементыДерева = ?(лРодительТекущейстроки = Неопределено, ДеревоЗапросов, лРодительТекущейстроки).ПолучитьЭлементы();
		
		лНовыйРодитель = лЭлементыДерева.Добавить();
		
		лНовыйРодитель.Имя           = Строка;
		лНовыйРодитель.Идентификатор = Новый УникальныйИдентификатор;
		
		// переносим выделенные строки в новую группу
		лМассивстрокКУдалению = Новый Массив;
		Для Каждого ВыделеннаяСтрокаИД Из Элементы.ДеревоЗапросов.ВыделенныеСтроки Цикл
			
			лМассивстрокКУдалению.Добавить(ВыделеннаяСтрокаИД);
			
			ПеренестиВеткуРекурсивно(лНовыйРодитель.ПолучитьЭлементы().Добавить(), ДеревоЗапросов.НайтиПоИдентификатору(ВыделеннаяСтрокаИД));
		КонецЦикла;
		
		Для Каждого СтрокКУдалению Из лМассивстрокКУдалению Цикл 
			ДеревоЗапросов.ПолучитьЭлементы().Удалить(ДеревоЗапросов.ПолучитьЭлементы().Индекс(ДеревоЗапросов.НайтиПоИдентификатору(СтрокКУдалению)));
		КонецЦикла;
		
		мТекущаяСтрокаДереваЗапросов = Неопределено;
		Элементы.ДеревоЗапросов.ТекущаяСтрока = лНовыйРодитель.ПолучитьИдентификатор();	
	КонецЕсли;
	
КонецПроцедуры

// #рефакторинг Проверить необходимость данной процедуры
Процедура ВыполнитьЗапросИзФормыПродолжение(Параметры)
	
	// перем лЗапрос, лВыполнитьПакет;
	//
	// параметры.Свойство("Запрос"        , лЗапрос);
	// параметры.Свойство("ВыполнитьПакет", лВыполнитьПакет);
	//
	// если Модифицированность Тогда 
	//	СохранитьЗначенияПоЗапросу(мТекущаяСтрока);
	// конецЕсли;
	//
	// если лЗапрос = Неопределено Тогда 
	//	лЗапрос = Новый Запрос;
	//	лЗапрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	// конецЕсли;
	//
	//лЗапрос.Текст = СтрЗаменить(ПолучитьТекстЗапроса(Истина), "|", "");
	//
	// если ПустаяСтрока(лЗапрос.Текст) Тогда
	//	ПоказатьПредупреждение(Новый ОписаниеОповещения("ПоказатьПредупреждениеЗавершение", ЭтаФорма), "Не заполнен текст запроса!", 10);
	//	Возврат;
	// конецЕсли;
	//
	// списокПараметров = лЗапрос.НайтиПараметры();
	//
	// для каждого СтрокаПараметров Из мФормаПараметров.ПараметрыСписок Цикл
	//	
	//	Если СписокПараметров.Найти(СтрокаПараметров.Имя) = Неопределено Тогда 
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Если СтрокаПараметров.Тип = гТипыЗначенийПараметров().ТаблицаЗначений Тогда 
	//		лИдентификаторПараметра = гПреобразоватьВПравильноеНазвание(СтрокаПараметров.ИдентификаторСтроки);
	//		Если гСтруктураТЗДляВременныхТаблиц.Свойство(лИдентификаторПараметра) Тогда 
	//			лЗапрос.УстановитьПараметр(СтрокаПараметров.Имя, гСтруктураТЗДляВременныхТаблиц[лИдентификаторПараметра]);
	//		Иначе
	//			Сообщить("Параметр " + СтрокаПараметров.Имя + " не простого типа. 
	//			|Значение данного параметра берется из структуры гСтруктураТЗДляВременныхТаблиц с ключем """ + лИдентификаторПараметра + """.
	//			|Код для вставки значения параметра через форму выполнения произвольного кода:                              
	//			|	гСтруктураТЗДляВременныхТаблиц.Вставить(""" + лИдентификаторПараметра + """, %ПеременнаяСоЗначениемПараметра%)", СтатусСообщения.Важное);
	//		КонецЕсли;
	//	Иначе
	//		лЗапрос.УстановитьПараметр(СтрокаПараметров.Имя, СтрокаПараметров.Значение);
	//	КонецЕсли;
	// конецЦикла;
	//
	// мНачалоВыполненияЗапроса = ТекущаяДата();
	//
	// если лВыполнитьПакет Тогда 
	//	мРезЗапроса = лЗапрос.ВыполнитьПакет();
	// иначе
	//	мРезЗапроса = лЗапрос.Выполнить();
	// конецЕсли;
	//
	// мОкончаниеВыполненияЗапроса = ТекущаяДата();
	//
	// мТаблицаЗагружена = Ложь;
	// мСводнаяТаблицаЗагружена = Ложь;
	//
	//
	//// сформируем список временных таблиц
	// если ТипЗнч(лЗапрос) <> Тип("COMОбъект") Тогда 
	//	
	//	Если гПодменюВременныеТаблицыКнопки.ИспользоватьМенеджерВременныхТаблиц.Пометка Тогда 
	//		
	//		// Проанализируем использование временных таблиц
	//		Если гИнициализацияVBScript() тогда
	//			
	//			// паттерн, позволяющий получить строку с названием виртуальной таблицы
	//			RegExp.Pattern	= "^(//){0,}.*ПОМЕСТИТЬ(\s){0,}(//){0,}(.){0,}[^\s; ]{1,}";// ищем имена создаваемых таблиц
	//			Matches			= RegExp.Execute(лЗапрос.Текст);
	//			ЧислоВхождений	= Matches.Count();
	//			
	//			НекорректныеИменаТаблиц = Новый Массив;
	//			
	//			Если ЧислоВхождений>0 Тогда 
	//				
	//				Для Счетчик = 0 По ЧислоВхождений-1 Цикл
	//					
	//					Match = Matches.Item(Счетчик);
	//					Если Найти(Match.Value, "//") = 0 Тогда
	//						
	//						RegExp.Pattern = "ПОМЕСТИТЬ(\s){0,}[^\s; ]{1,}";
	//						SubMatches = RegExp.Execute(Match.Value);
	//						Если SubMatches.Count > 0 Тогда // в одной строке может быть вписано сразу несколько вхождений
	//							
	//							Для СубСчетчик = 0 По SubMatches.Count - 1 Цикл
	//								
	//								SubMatch = SubMatches.Item(СубСчетчик);
	//								ИмяТаблицы = СокрЛП(Сред(СокрЛП(SubMatch.Value), 10));
	//								
	//								Если мВременныеТаблицы.Найти(ИмяТаблицы,"Имя") = Неопределено Тогда
	//									
	//									мВременныеТаблицы.Добавить().Имя = ИмяТаблицы;
	//									
	//								КонецЕсли;
	//							КонецЦикла;
	//						КонецЕсли;						
	//					КонецЕсли;					
	//				КонецЦикла;
	//			КонецЕсли;
	//			
	//			RegExp.Pattern	= "^(//){0,}.*УНИЧТОЖИТЬ(\s){0,}(//){0,}(.){0,}[^\s; ]{1,}";
	//			Matches			= RegExp.Execute(лЗапрос.Текст);
	//			ЧислоВхождений	= Matches.Count();
	//			
	//			НекорректныеИменаТаблиц.Очистить();
	//			
	//			Если ЧислоВхождений > 0 Тогда 
	//				Для Счетчик = 0 По ЧислоВхождений-1 Цикл
	//					
	//					Match = Matches.Item(Счетчик);
	//					Если Найти(Match.Value, "//") = 0 Тогда
	//						
	//						RegExp.Pattern = "УНИЧТОЖИТЬ(\s){0,}[^\s; ]{1,}";
	//						SubMatches = RegExp.Execute(Match.Value);
	//						Если SubMatches.Count > 0 Тогда // в одной строке может быть вписано сразу несколько вхождений
	//							Для СубСчетчик = 0 По SubMatches.Count-1 Цикл
	//								
	//								SubMatch	= SubMatches.Item(СубСчетчик);
	//								ИмяТаблицы	= СокрЛП(Сред(СокрЛП(SubMatch.Value), 11));
	//								
	//								стрВременнойТаблицы = мВременныеТаблицы.Найти(ИмяТаблицы,"Имя");
	//								Если стрВременнойТаблицы <> Неопределено Тогда
	//									мВременныеТаблицы.Удалить(стрВременнойТаблицы);
	//								Иначе
	//									НекорректныеИменаТаблиц.Добавить(ИмяТаблицы);
	//								КонецЕсли;
	//							КонецЦикла;
	//						КонецЕсли;
	//					КонецЕсли;
	//				КонецЦикла;
	//			КонецЕсли;
	//			
	//			Счетчик = 0;
	//			Пока Счетчик < мВременныеТаблицы.Количество() Цикл
	//				ИмяТаблицы = мВременныеТаблицы[Счетчик].Имя;
	//				ВременнаяТаблица = кзДобавитьВременнуюТаблицу(ИмяТаблицы, лЗапрос.МенеджерВременныхТаблиц);
	//				Если ВременнаяТаблица = Неопределено Тогда 
	//					мВременныеТаблицы.Удалить(Счетчик);
	//					Счетчик = Счетчик - 1;
	//				Иначе 
	//					гСоответствиеВременныеТаблицы.Вставить(ИмяТаблицы, ВременнаяТаблица);
	//				КонецЕсли;
	//				Счетчик = Счетчик + 1;
	//			КонецЦикла;
	//			
	//			Для каждого ВременнаяТаблица Из мВременныеТаблицы Цикл
	//				ИмяТаблицы = ВременнаяТаблица.Имя;
	//				гСоответствиеВременныеТаблицы.Вставить(ИмяТаблицы, кзДобавитьВременнуюТаблицу(ИмяТаблицы, лЗапрос.МенеджерВременныхТаблиц));
	//			КонецЦикла; 
	//			
	//			Если НекорректныеИменаТаблиц.Количество() > 0 Тогда
	//				ИменаТаблиц = "";
	//				Для Счетчик = 0 По Мин(НекорректныеИменаТаблиц.Количество() - 1, 9) Цикл
	//					ИменаТаблиц = ИменаТаблиц + НекорректныеИменаТаблиц[Счетчик] + Символы.ПС;
	//				КонецЦикла;
	//				Если НекорректныеИменаТаблиц.Количество() > 10 Тогда
	//					ИменаТаблиц = ИменаТаблиц + "..."+Символы.ПС;
	//				КонецЕсли;
	//				
	//				ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияВопросанеНайденыВременныеТаблицы", ЭтаФорма, Новый Структура), 
	//					"Некоторые временные таблицы не были найдены в менеджере:" + Символы.ПС+ ИменаТаблиц + "Выполнение запроса возможно приведет к ошибке. Продолжить выполнение?", РежимДиалогаВопрос.ДаНет);
	//				
	//				Возврат;
	//				
	//			КонецЕсли;
	//		КонецЕсли; // гИнициализацияVBScript()
	//	Иначе
	//		мВременныеТаблицы.Очистить();
	//	КонецЕсли; 
	//	
	// конецЕсли; //ТипЗнч(лЗапрос) <> Тип("COMОбъект")
	//
	// загрузитьРезультат(Параметры.ЭлементТаблицыРезультата);
	
КонецПроцедуры // ВыполнитьЗапросИзФормыПродолжение()

&НаКлиенте
Процедура СохранитьЗапросыВФайлПродолжение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Перем лОперация, лТекущийЗапрос;
	
	Если Не ДополнительныеПараметры.Свойство("Операция", лОперация) Тогда 
		лОперация = Неопределено;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("ТекущийЗапрос", лТекущийЗапрос) Тогда 
		лТекущийЗапрос = Неопределено;
	КонецЕсли;
	
	Если ВыбранныеФайлы <> Неопределено Тогда 
		
		лПолноеИмяФайла = ВыбранныеФайлы[0];
		
		ЗаписьJSON = ПолучитьЗапросыВJSON(ДеревоЗапросов, ПараметрыЗапросов, ИсполняемыйКод, лПолноеИмяФайла, Истина, Ложь, лТекущийЗапрос);
		
		Попытка
			ЗаписьJSON.Закрыть();
			Ошибка = Ложь;
		Исключение
			Ошибка = Истина;
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);		
		КонецПопытки; 
		
		Если Не Ошибка Тогда 
			ИмяФайлаСЗапросом = лПолноеИмяФайла;
			
			СписокИзмененныхСтрок.Очистить();
			
			ОбновитьЗаголовок();
			Модифицированность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ФайлНеСохранен = (ВыбранныеФайлы = Неопределено) ИЛИ Ошибка;
	
	Если ФайлНеСохранен Тогда 
		Если лОперация = "ВыполнитьЗапрос" Тогда 
			ПоказатьВопрос(Новый ОписаниеОповещения("ВопросЗапросНеСохранилсяПродолжение", ЭтаФорма, Новый Структура()), 
				"Запрос не сохранился, продолжить выполнение?" + Символы.ПС + "Чтобы не выводился данный вопрос снимите галочку ""Сохранить запрос перед выполнением"".", РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	Иначе		
		Если лОперация = "ВыполнитьЗапрос" Тогда 
			ВыполнитьЗапросИзФормыПродолжение(ДополнительныеПараметры)
		ИначеЕсли лОперация = мОперацииСЗапросами.Новый Тогда 
			НовыйФайлЗапросовДействие();
		ИначеЕсли лОперация = мОперацииСЗапросами.Открыть Тогда 
			ПоказатьДиалогВыбораФайла(лОперация);
		ИначеЕсли лОперация = "ЗакрытьФорму" Тогда // #рефакторинг определить константу
			ВыполнитьДействияПриЗакрытииФормы();
		КонецЕсли;				
	КонецЕсли;
	
КонецПроцедуры // СохранитьЗапросыВФайлПродолжение()

&НаКлиенте
Процедура ПоказатьВводСтрокиЗавершение(Строка, ДополнительныеПараметры) Экспорт
	
	Перем лДействие;
	
	Если Строка = Неопределено ИЛИ Не ЗначениеЗаполнено(ДополнительныеПараметры) ИЛИ Не ДополнительныеПараметры.Свойство("Действие", лДействие) Тогда 
		Возврат
	КонецЕсли;
	
	Если лДействие = Константы().УстановитьПараметрУИ Тогда 
		лТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		лТекущиеДанные.ЗначениеВФорме = Новый УникальныйИдентификатор(Строка);
		лТекущиеДанные.Значение = ЗначениеВСтрокуСервер(лТекущиеДанные.ЗначениеВФорме);
	КонецЕсли;
	
КонецПроцедуры // ПоказатьВводСтрокиЗавершение()
	
&НаКлиенте
Процедура ПоказатьПредупреждениеЗавершение(ДополнительныеПараметры) Экспорт
КонецПроцедуры // ПоказатьПредупреждениеЗавершение()

Процедура ВыполнитьДействиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда  // отменено пользователем
		// сообщить("Отмена"); // #рефакторинг реализовтаь действия при отмене
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СохранитьЗапросыВОблакоПродолжение(Длг, ДополнительныеПараметры) Экспорт
	
	Если ДиалогНеВыбран(Длг) Тогда
		Возврат;
	КонецЕсли;
	
	Если Длг.Тип = мТипыИсточниковДанных.Пакет Тогда 
		лТекущийЗапрос      = Неопределено;
		ЭтоСохранениеПакета = Истина;
	Иначе
		лТекущийЗапрос      = ДеревоЗапросов.НайтиПоИдентификатору(ДополнительныеПараметры.ТекущаяСтрокаДереваЗапросов);
		ЭтоСохранениеПакета = Ложь;
	КонецЕсли;
	
	лИдентификаторСессии = ДополнительныеПараметры.ИдентификаторСессии;
	
	ЗаписьJSON = ПолучитьЗапросыВJSON(ДеревоЗапросов, ПараметрыЗапросов, ИсполняемыйКод, Длг.Имя, Ложь, Ложь, лТекущийЗапрос);
	
	лДанные = ЗаписьJSON.Закрыть();
	
	Если ЭтоСохранениеПакета Тогда 
		лРезультат  = гСохранитьФайлСЗапросомВОблаке(ТипОбработка, СеансовыеДанные, лИдентификаторСессии, Длг.ИдПакета, Длг.Имя, истина, лДанные); // #рефакторинг добавить использование настройки режима обновления всех записей или только измененных
	Иначе
		лРезультат  = гСохранитьЗапросыВОблаке(ТипОбработка, СеансовыеДанные, лИдентификаторСессии, Длг.ИдПакета, Длг.ИдРодительскогоЗапроса, Длг.ИдЗапроса, Длг.Имя, Длг.ВключатьПодчиненныеЗапросы, лДанные);
	КонецЕсли;
	
	Если Не лРезультат.Статус = "OK" Тогда 
		Ошибка = Истина;
		Сообщить("Ошибка сохранения в облаке: " + лРезультат.ТекстОшибки);
	Иначе
		Ошибка = Ложь;
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПоказатьПредупреждениеЗавершение", ЭтаФорма), ?(ЭтоСохранениеПакета, "Запросы выгружены в облако.", "Текущий запрос выгружен в облако."), 3);
	КонецЕсли;
	
КонецПроцедуры // СохранитьЗапросыВОблакоПродолжение()

&НаКлиенте
Процедура ДобавитьЗапросИзОблакаПродолжение(Длг, ДополнительныеПараметры) Экспорт
	
	Если ДиалогНеВыбран(Длг) Тогда
		Возврат;
	КонецЕсли;
	
	// #рефакторинг
	// Необходимо хранить параметры текущего выбранного элемента (пакет, запрос. код)
	// доработать алгоритм открытия этих элементов
	// привести все названия элементов к единым (файл -> пакет )
	
	ИмяФайлаСЗапросом = "";
	
	СохранитьЗначенияПоЗапросу(мТекущаяСтрокаДереваЗапросов);

	лРодительТекущейстроки = ПолучитьРодителяТекущейСтроки(мТекущаяСтрокаДереваЗапросов);
	Если Длг.Тип = мТипыИсточниковДанных.Пакет Тогда 
		
		лВеткаПриемника = ?(лРодительТекущейстроки = Неопределено, ДеревоЗапросов, лРодительТекущейстроки).ПолучитьЭлементы().Добавить();
		лВеткаПриемника.Идентификатор = Новый УникальныйИдентификатор;
		лВеткаПриемника.Имя           = Длг.Имя;
	Иначе
		лВеткаПриемника = лРодительТекущейстроки;
	КонецЕсли;
	
	ЗагрузитьЗапросыИзОблака(Длг.идПакета, Длг.идЗапроса, Длг.идКода, Длг.ВключатьПодчиненныеЗапросы, лВеткаПриемника)
	
КонецПроцедуры // ДобавитьЗапросИзОблакаПродолжение()

&НаКлиенте
Процедура ОбработкаВыполненияКода(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		
		Если Результат.Режим = гРежимыЗакрытияФормыВводаПроизвольногоКода(ТипОбработка, СеансовыеДанные, "Сохранить") ИЛИ 
			Результат.Режим = гРежимыЗакрытияФормыВводаПроизвольногоКода(ТипОбработка, СеансовыеДанные, "Выполнить") Тогда 
			
			лСтарыйКод = ИсполняемыйКод.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока).Идентификатор));
			Для каждого лСтрокаСоСтарымКодом Из лСтарыйКод Цикл
				ИсполняемыйКод.Удалить(лСтрокаСоСтарымКодом);
			КонецЦикла; 
			
			лНовыйКод = Результат.ИсполняемыйКод;
			Для каждого лСтрокаСНовымКодом Из лНовыйКод Цикл
				лНоваяСтрока = ИсполняемыйКод.Добавить();
				ЗаполнитьЗначенияСвойств(лНоваяСтрока, лСтрокаСНовымКодом);
				лНоваяСтрока.ИдентификаторЗапроса = Результат.ИдентификаторЗапроса;
			КонецЦикла; 
			
			Модифицированность = Истина;
		КонецЕсли;
		
		Если Результат.Режим = гРежимыЗакрытияФормыВводаПроизвольногоКода(ТипОбработка, СеансовыеДанные, "Выполнить") Тогда 
			
			Если Результат.ВыполнитьНаСервере Тогда 
				ВыполнитьНаСервере(СтрЗаменить(Результат.Текст, "РезультатЗапроса()", "РезультатЗапросаНаСервере()"));
			Иначе
				Попытка
					Выполнить(Результат.Текст);
				Исключение
					Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);		
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте 
Процедура ОткрытьКонструкторЗапросаЗавершение(Текст, ДополнительныеПараметры) Экспорт 
	
	Если ДополнительныеПараметры.СтруктураГраницВыделения <> Неопределено Тогда 
		лГраницыВыделения = ДополнительныеПараметры.СтруктураГраницВыделения;
		ТекущийЭлемент.УстановитьГраницыВыделения(лГраницыВыделения.НачалоСтрока,лГраницыВыделения.КолонкаНач,лГраницыВыделения.СтрокаКон,лГраницыВыделения.КолонкаКон);
	КонецЕсли;
	
	Если Текст <> Неопределено Тогда 
		Если ДополнительныеПараметры.СтруктураГраницВыделения = Неопределено Тогда 
			ПолучитьУстановитьТекущийТекстЗапроса(Текст);
		Иначе
			ТекущийЭлемент.ВыделенныйТекст = Текст;
		КонецЕсли;
	Иначе
		Модифицированность = ДополнительныеПараметры.Модифицированность;
	КонецЕсли; 
	
	Если ДополнительныеПараметры.СтруктураГраницВыделения <> Неопределено Тогда 
		ТекущийЭлемент.УстановитьГраницыВыделения(лГраницыВыделения.НачалоСтрока,лГраницыВыделения.КолонкаНач, лГраницыВыделения.НачалоСтрока + СтрЧислоСтрок(Текст) - 1, СтрДлина(СтрПолучитьСтроку(Текст,СтрЧислоСтрок(Текст))) + 1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияформаУпрПоиск(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	лИдентификаторСтроки = 0;
	
	ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Идентификатор", лИдентификаторСтроки, ДеревоЗапросов.ПолучитьЭлементы(), РезультатЗакрытия, Ложь);
	
	Элементы.ДеревоЗапросов.ТекущаяСтрока = лИдентификаторСтроки;
	
КонецПроцедуры // ОбработкаЗакрытияформаУпрПоиск()

&НаКлиенте
Процедура ДиалогВыбораФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    
    лДиалог   = ДополнительныеПараметры.Диалог;
	лОперация = ДополнительныеПараметры.Операция;
    
    Если (ВыбранныеФайлы <> Неопределено) Тогда
		Если лДиалог.Режим = РежимДиалогаВыбораФайла.Сохранение Тогда 
			СохранитьЗапросыВФайлНачало(Ложь, Ложь, Новый Структура("Операция", лОперация));
			Если мОперацияПослеСохраненияИзменений <> Неопределено Тогда 
				ВыполнитьОперациюПослеСохраненияИзменений(мОперацияПослеСохраненияИзменений);
			КонецЕсли;
		Иначе
			ЗагрузитьЗапросы(лДиалог.ПолноеИмяФайла, лОперация);
		КонецЕсли;		
    КонецЕсли;
КонецПроцедуры

//&НаКлиенте
// процедура ПередЗакрытиемЗавершение(РезультатВопроса, Модифицированность) Экспорт
//	
//	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда 
//		Возврат;
//	КонецЕсли;
//	
//	Если РезультатВопроса = КодВозвратаДиалога.Да И Модифицированность Тогда 
//		СохранитьФайлСЗапросом(ИмяФайлаСЗапросом);
//		Возврат;
//	КонецЕсли;
//	
//	ВыполнитьДействияПриЗакрытииФормы();
//	
// конецПроцедуры // ПередЗакрытиемЗавершение()

&НаКлиенте
Процедура ВопросЗавершение(РезультатВопроса, ПараметрыВопроса) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Таймаут Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВопроса.ИдВопроса = "ДобавитьКолонкиВТаблице" Тогда 
		Если РезультатВопроса <> КодВозвратаДиалога.Отмена Тогда 
			ТекстВТаблицуНаСервере(ПараметрыВопроса.МассивКолонокСтрокиТаблицы, ПараметрыВопроса.Текст, (РезультатВопроса = КодВозвратаДиалога.Да), ПараметрыВопроса.Разделитель);
			ОбновитьСостояниеРезультатаЗапроса();
		КонецЕсли;		
	ИначеЕсли ПараметрыВопроса.ИдВопроса = "СкопироватьСтрокуВБуфер" Тогда 
		
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
			лhtmlfile = Новый COMОбъект("htmlfile"); лhtmlfile.parentWindow.clipboardData.setData("text", ПараметрыВопроса.Строка);
		Иначе
			ТД = Новый ТекстовыйДокумент();
			ТД.УстановитьТекст(ПараметрыВопроса.Строка);
			ТД.Показать(,);
		КонецЕсли;		
	ИначеЕсли ПараметрыВопроса.ИдВопроса = "ОчиститьТаблицуСРезультатом" Тогда 
		Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда 
			ЭтаФорма[РезультатЗапроса()].Очистить();
			ОбновитьСостояниеРезультатаЗапроса();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВопросЗавершение()

//&НаКлиенте
// процедура СохранитьИзмененияЗавершение(РезультатВопроса, Знач Операция) Экспорт
//	
//	// если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда 
//	//	Возврат;
//	// иначеЕсли РезультатВопроса = КодВозвратаДиалога.Да Тогда 
//	//	мОперацияПослеСохраненияИзменений = Операция;
//	//	лПродолжитьОперациюПослеСохранения = СохранитьФайлСЗапросом(ИмяФайлаСЗапросом);
//	// иначе
//	//	лПродолжитьОперациюПослеСохранения = Истина;
//	// конецЕсли;
//	//
//	// если лПродолжитьОперациюПослеСохранения Тогда 
//	//	ВыполнитьОперациюПослеСохраненияИзменений(Операция);
//	// конецЕсли;
//	
// конецПроцедуры // СохранитьИзмененияЗавершение()

&НаКлиенте
Процедура ПослеВопросаСохранитьИзмененияПродолжение(Результат, Параметры) Экспорт
	
	Перем лОперация;
	
	Если Не Параметры.Свойство("Операция", лОперация) Тогда 
		лОперация = Неопределено;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		
		Если лОперация = мОперацииСЗапросами.Новый Тогда 
			НовыйФайлЗапросовДействие();
		ИначеЕсли лОперация = мОперацииСЗапросами.Открыть Тогда 
			ПоказатьДиалогВыбораФайла(лОперация);
		ИначеЕсли лОперация = "ЗакрытьФорму" Тогда // #рефакторинг определить константу
			ВыполнитьДействияПриЗакрытииФормы();
		КонецЕсли;		
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда 
		СохранитьЗапросыВФайлНачало(Ложь, Ложь, Новый Структура("Операция", лОперация));
	КонецЕсли;
	
КонецПроцедуры // ПослеВопросаСохранитьИзмененияПродолжение()

&НаКлиенте
Процедура ВыполнитьОперациюПослеСохраненияИзменений(Операция)
	
	мОперацияПослеСохраненияИзменений = Неопределено;

	Если Операция = мОперацииСЗапросами.Открыть Тогда 
		ПоказатьДиалогВыбораФайла(Операция);
	ИначеЕсли Операция = мОперацииСЗапросами.Новый Тогда 
		НовыйФайлЗапросовДействие();
	КонецЕсли;
КонецПроцедуры // ВыполнитьОперациюПослеСохраненияИзменений()

&НаКлиенте
Процедура ПослеВыбораЭлементаИзСпискаЗначений(ВыбранноеЗначение, Параметры) Экспорт
	// ПРОЦЕДУРА ДУБЛЬ(!!!)
	
	лДанныеДляПодбораКП = Параметры.ДанныеДляПодбораКП;
	лСтруктураКоординат = Параметры.СтруктураКоординат;
	лПолеТекстаЗапроса  = Параметры.ПолеТекстаЗапроса;
	лЭтоУсловие         = (Параметры.ДанныеДляПодбораКП.РежимКП.Режим = "Условия");
	
	Если ВыбранноеЗначение <> Неопределено Тогда 
		лВременныйТД = Новый ТекстовыйДокумент;
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда 
			лРезультатПодстановкиКП = "";
			Для каждого ЭлементСписка Из ВыбранноеЗначение Цикл
				Если Не ЭлементСписка.Пометка Тогда 
					Продолжить;
				КонецЕсли;
				Если лЭтоУсловие Тогда 
					лРезультатПодстановкиКП = лРезультатПодстановкиКП + ?(лРезультатПодстановкиКП = "", "", " И ") + ЭлементСписка.Значение + " = &" + ЭлементСписка.Значение;
				Иначе
					лРезультатПодстановкиКП = лРезультатПодстановкиКП + ?(лРезультатПодстановкиКП = "", "", ", ") + ЭлементСписка.Значение;
				КонецЕсли;
			КонецЦикла; 
		Иначе
			лРезультатПодстановкиКП = ВыбранноеЗначение.Значение
		КонецЕсли;
		лВременныйТД.УстановитьТекст(лРезультатПодстановкиКП);
		
		лТекстЗапроса = Лев(лДанныеДляПодбораКП.ТекстЗапросаДоКурсора, СтрДлина(лДанныеДляПодбораКП.ТекстЗапросаДоКурсора) - СтрДлина(лДанныеДляПодбораКП.СловоДоКурсора)) + 
			лРезультатПодстановкиКП + Сред(лДанныеДляПодбораКП.ТекстЗапросаПослеКурсора, СтрДлина(лДанныеДляПодбораКП.СловоПослеКурсора) + 1);
			
		дельта_x1 = СтрДлина(лВременныйТД.ПолучитьСтроку(лВременныйТД.КоличествоСтрок())) - 
			?(лВременныйТД.КоличествоСтрок() > 1, 0, СтрДлина(лДанныеДляПодбораКП.СловоДоКурсора));
			
		лСтруктураВыбора = Новый Структура();
		лСтруктураВыбора.Вставить("ТекстЗапроса", лТекстЗапроса);
		лСтруктураВыбора.Вставить("Режим"       , лДанныеДляПодбораКП.РежимКП.Режим);
		лСтруктураВыбора.Вставить("дельта_x"    , СтрДлина(лДанныеДляПодбораКП.СловоДоКурсора));
		лСтруктураВыбора.Вставить("дельта_y"    , 0);
		лСтруктураВыбора.Вставить("дельта_x1"   , дельта_x1);
		лСтруктураВыбора.Вставить("дельта_y1"   , лВременныйТД.КоличествоСтрок() - 1);			
		
	КонецЕсли;
	
	Если лСтруктураВыбора <> Неопределено Тогда 
		
		ПолучитьУстановитьТекущийТекстЗапроса(лСтруктураВыбора.ТекстЗапроса);
		
		Если ПродолжитьФормироватьКПНаСервере(лСтруктураВыбора.Режим, лРезультатПодстановкиКП) Тогда
			лПолеТекстаЗапроса.УстановитьГраницыВыделения(лСтруктураКоординат.НачалоСтрока + лСтруктураВыбора.дельта_y1, лСтруктураКоординат.КолонкаНач + лСтруктураВыбора.дельта_x1,
				лСтруктураКоординат.НачалоСтрока + лСтруктураВыбора.дельта_y1, лСтруктураКоординат.КолонкаНач + лСтруктураВыбора.дельта_x1);
			ОткрытьМенюАвтоподстановки(лПолеТекстаЗапроса)
		Иначе
			лПолеТекстаЗапроса.УстановитьГраницыВыделения(лСтруктураКоординат.НачалоСтрока - лСтруктураВыбора.дельта_y, лСтруктураКоординат.КолонкаНач - лСтруктураВыбора.дельта_x, 
				лСтруктураКоординат.НачалоСтрока + лСтруктураВыбора.дельта_y1, лСтруктураКоординат.КолонкаНач + лСтруктураВыбора.дельта_x1);			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // ПослеВыбораЭлементаИзСпискаЗначений()

&НаКлиенте
Процедура ЗавершениеВыбораТипаПараметра(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ИнициализацияТипаИЗначенияПараметра(Элементы.ПараметрыТекущегоЗапроса.ТекущаяСтрока, ВыбранныйЭлемент);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры // ЗавершениеВыбораТипаПараметра()

&НаКлиенте
Процедура ОбновитьПараметрСТаблицейЗначений(Параметр)
	ТекущиеДанные                = Элементы.ПараметрыТекущегоЗапроса.ТекущиеДанные;	
	ТекущиеДанные.Значение       = Параметр;	
	ТекущиеДанные.ЗначениеВФорме = ФормированиеПредставленияЗначения(ТекущиеДанные.Значение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПропуститьПервуюСтрокуТаблицы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Таймаут ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	Иначе
		Если Результат = КодВозвратаДиалога.Да Тогда 
			ДополнительныеПараметры.Данные.Вставить("ПропуститьПервуюСтроку", Истина);
		КонецЕсли;
		
		ПараметрыВопроса = Новый Структура();
		ПараметрыВопроса.Вставить("Данные"          , ДополнительныеПараметры.Данные);
		ПараметрыВопроса.Вставить("ВыбраннаяКолонка", ДополнительныеПараметры.ВыбранныйЭлемент.Значение);
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаПытатьсяОпределятьТипЗначений", Вычислить(ЭтотОбъектФорма), ПараметрыВопроса), 
			"Пытаться определить тип значений? 
			|(это увеличит время загрузки)", 
			РежимДиалогаВопрос.ДаНетОтмена,, 
			КодВозвратаДиалога.Нет);
		
	КонецЕсли;
КонецПроцедуры // ПослеЗакрытияВопросаПропуститьПервуюСтрокуТаблицы()

&НаКлиенте
Процедура ЗавершениеВыбораКолонки(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Если ДополнительныеПараметры.Действие = Константы().СоздатьПараметрИзБуфера Тогда 
			
			ПараметрыВопроса = Новый Структура();
			ПараметрыВопроса.Вставить("Данные"          , ДополнительныеПараметры.Данные);
			ПараметрыВопроса.Вставить("ВыбранныйЭлемент", ВыбранныйЭлемент);
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаПропуститьПервуюСтрокуТаблицы", ЭтотОбъект, ПараметрыВопроса), 
				"Пропустить первую строку таблицы?", 
				РежимДиалогаВопрос.ДаНет,,  
				КодВозвратаДиалога.Да);
			
		ИначеЕсли ДополнительныеПараметры.Действие = Константы().ВыгрузитьТаблицуРезультатаВПараметр Тогда 
			
			Если ВыбранныйЭлемент.Значение = Константы().ВсеКолонки Тогда 
				лИмяКолонки = Неопределено;
			Иначе
				лИмяКолонки = ВыбранныйЭлемент.Значение;
			КонецЕсли;
			ОбработкаДействияВыгрузитьВПараметрНаСервере(лИмяКолонки, "ИзТаблицыРезультата");
			
		ИначеЕсли ДополнительныеПараметры.Действие = Константы().ДействияСРезультатомЗапроса Тогда 
			
			лПараметры = ДополнительныеПараметры.ПараметрыДействия;
			
			Если лПараметры.Действие = Константы().УстановитьПометкуУдаления Тогда 
				лТекстОписаниеДействия = ?(лПараметры.ПометкаУдаления, "Пометка удаления документа:", "Снятие пометки удаления:");
			ИначеЕсли лПараметры.Действие = Константы().Провести Тогда 
				лТекстОписаниеДействия = ?(лПараметры.Провести, "Проведение документа:", "Отмена проведения документа:");
			Иначе
				лТекстСообщения = "Операция не выполнена. Не определен алгоритмя для действия [%Действие%]";
				лТекстСообщения = СтрЗаменить(лТекстСообщения, "%Действие%", лПараметры.Действие);
				ВывестиСообщение(лТекстСообщения);
				Возврат;
			КонецЕсли;
			
			лИмяКолонки = ВыбранныйЭлемент.Значение;
			
			ВывестиСообщение("---------------------------------------------------------------------
				|" + лТекстОписаниеДействия + " (колонка '" + лИмяКолонки + "'): начало в " + ТекущаяДата());
			
			лПараметры.Вставить("ИмяКолонки", лИмяКолонки);
			ВыполнитьДействияСРезультатомЗапроса(АдресРезультата, лПараметры);
			
			ВывестиСообщение(лТекстОписаниеДействия + " (колонка '" + лИмяКолонки + "'): окончание в " + ТекущаяДата() + "
			|---------------------------------------------------------------------");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ЗавершениеВыбораКолонки()

&НаКлиенте
Процедура ПослеЗакрытияВопросаПытатьсяОпределятьТипЗначений(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Таймаут ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	Иначе
		
		лДанныеБуфера = Параметры.Данные;
		
		Если Результат = КодВозвратаДиалога.Да Тогда
			
			лКоличествоСтрок     = лДанныеБуфера.Текст.КоличествоСтрок();
			лАнализируемаяСтрока = ?(лКоличествоСтрок > 1, 2, 1);
			
			лМассивКолонокСтрокиТаблицы = гРазложитьСтрокуВМассивПодстрок(ТипОбработка, 
				СеансовыеДанные, 
				лДанныеБуфера.Текст.ПолучитьСтроку(лАнализируемаяСтрока), 
				лДанныеБуфера.Разделитель);
				
			лКоличествоКолонок = лМассивКолонокСтрокиТаблицы.Количество();
			
			Сч1 = 0;
			лТипыКолонок = Новый Соответствие;
			Пока Сч1 < лКоличествоКолонок Цикл
				Если СтрокаВЧисло(лМассивКолонокСтрокиТаблицы[Сч1]) <> Неопределено Тогда 
					лТипыКолонок.Вставить(Сч1, Тип("Число"));
				ИначеЕсли ЗначениеЗаполнено(СтрокаВДату(лМассивКолонокСтрокиТаблицы[Сч1])) Тогда 
					лТипыКолонок.Вставить(Сч1, Тип("Дата"));
				КонецЕсли;
				Сч1 = Сч1 + 1;
			КонецЦикла; 
			
			лДанныеБуфера.Вставить("ТипыКолонок", лТипыКолонок);
		КонецЕсли;
		
		ОбработкаДействияВыгрузитьВПараметрНаСервере(?(Параметры.ВыбраннаяКолонка = Константы().ВсеКолонки, Неопределено, Параметры.ВыбраннаяКолонка), "ИзБуфера", Параметры.Данные);
		
	КонецЕсли;
КонецПроцедуры // ПослеЗакрытияВопросаПытатьсяОпределятьТипЗначений()

&НаКлиенте
Процедура ПослеЗакрытияВопросаСоздатьНовыйФайл(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда 
		НовыйФайлЗапросовДействие();
	КонецЕсли;
КонецПроцедуры // ПослеЗакрытияВопросаСоздатьНовыйФайл()

#КонецОбласти

#Область КонтекстнаяПодсказка

Функция ПродолжитьФормироватьКПНаСервере(Режим, ВыбранноеЗначение)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гПродолжитьФормироватьКП(Режим, ВыбранноеЗначение)
КонецФункции

&НаКлиенте
Функция ПолучитьУстановитьТекущийТекстЗапроса(НовыйТекстЗапроса = Неопределено)
	
	лЭлементФормы = Элементы.ТекстТекущегоЗапроса;
	
	Если НовыйТекстЗапроса = Неопределено Тогда 
		Возврат Новый Структура("ЭлементФормы, ТекстЗапроса", лЭлементФормы, ТекстТекущегоЗапроса);
	КонецЕсли;
	
	лЭлементФормы.УстановитьГраницыВыделения(1,СтрДлина(ТекстТекущегоЗапроса) + 1);
	лЭлементФормы.ВыделенныйТекст = НовыйТекстЗапроса;
	
	Возврат Неопределено
	
КонецФункции // ПолучитьУстановитьТекущийТекстЗапроса()

&НаКлиенте
// ПРОЦЕДУРА ДУБЛЬ(!!!)
Функция гПолучитьГраницыВыделенияПоляФормы(ПолеФормы)
	
	НачалоСтрока = 1;
	КолонкаНач	= 1;              
	СтрокаКон   = 1;
	КолонкаКон	= 1;
	ПолеФормы.ПолучитьГраницыВыделения(НачалоСтрока, КолонкаНач, СтрокаКон, КолонкаКон);
	
	Результат = Новый Структура();
	Результат.Вставить("НачалоСтрока", НачалоСтрока);
	Результат.Вставить("КолонкаНач"  , КолонкаНач);
	Результат.Вставить("СтрокаКон"   , СтрокаКон);
	Результат.Вставить("КолонкаКон"  , КолонкаКон);	
	
	Возврат Результат;
	
КонецФункции // гПолучитьГраницыВыделенияПоляФормы()

&НаКлиенте
// ПРОЦЕДУРА ДУБЛЬ(!!!)
Функция ПолучитьПозициюКурсораВТексте(ПолеФормыСТекстом, СтруктураКоординат)
	
	// выделяем текст от начала, до текущего
	ПолеФормыСТекстом.УстановитьГраницыВыделения(1, 1, СтруктураКоординат.СтрокаКон, СтруктураКоординат.КолонкаКон);
	
	Результат = СтрДлина(ПолеФормыСТекстом.ВыделенныйТекст);

	// возвращаем исходное выделение
	ПолеФормыСТекстом.УстановитьГраницыВыделения(СтруктураКоординат.НачалоСтрока, СтруктураКоординат.КолонкаНач, СтруктураКоординат.СтрокаКон, СтруктураКоординат.КолонкаКон);
	
	Возврат Результат
	
КонецФункции // ПолучитьПозициюКурсораВТексте()

&НаКлиенте
// ПРОЦЕДУРА ДУБЛЬ(!!!)
Процедура ОткрытьМенюАвтоподстановки(ПолеТекстаЗапроса)
	
	Если ПолеТекстаЗапроса.ВыделенныйТекст <> "" тогда
		Возврат
	Конецесли;
	
	Если Не гИнициализацияVBScript() тогда
		Возврат;	
	КонецЕсли;
	
	// запоминаем текущие координаты курсора 
	лСтруктураКоординат = гПолучитьГраницыВыделенияПоляФормы(ПолеТекстаЗапроса);
	
	лТекстЗапроса   = ПолучитьУстановитьТекущийТекстЗапроса().ТекстЗапроса;
	лТекстЗапросаТД = Новый ТекстовыйДокумент;
	лТекстЗапросаТД.УстановитьТекст(лТекстЗапроса);

	// если позиция курсора больше длины текущей строки, то перемещаем курсор в конец строки
	лТекущаяСтрока = лТекстЗапросаТД.ПолучитьСтроку(лСтруктураКоординат.НачалоСтрока);
	Если СтрДлина(лТекущаяСтрока) < лСтруктураКоординат.КолонкаКон тогда
		лСтруктураКоординат.КолонкаНач = СтрДлина(лТекущаяСтрока)+1;
		лСтруктураКоординат.КолонкаКон = лСтруктураКоординат.КолонкаНач;
	КонецЕсли;
	
	лПозицияКурсораВТексте = ПолучитьПозициюКурсораВТексте(ПолеТекстаЗапроса, лСтруктураКоординат);
	
	лДанныеДляПодбораКП = ПолучитьДанныеДляПодбораКПНаСервере(лТекстЗапроса, лПозицияКурсораВТексте);
	
	Если лДанныеДляПодбораКП <> Неопределено Тогда 
		
		// выбираем значения контекстной подсказки
		Если лДанныеДляПодбораКП.ЗначенияДляВыбора.Количество() = 0 Тогда 
			Возврат;
		Иначе
			лПараметрыОповещения = Новый Структура("ДанныеДляПодбораКП, СтруктураКоординат, ПолеТекстаЗапроса", лДанныеДляПодбораКП, лСтруктураКоординат, ПолеТекстаЗапроса);
			Если лДанныеДляПодбораКП.ЗначенияДляВыбора.Количество() = 1 Тогда 
				ПослеВыбораЭлементаИзСпискаЗначений(лДанныеДляПодбораКП.ЗначенияДляВыбора[0], лПараметрыОповещения)
			Иначе
				лОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораЭлементаИзСпискаЗначений", Вычислить(ЭтотОбъектФорма), лПараметрыОповещения);
				Если лДанныеДляПодбораКП.МножественныйВыбор Тогда 
					лДанныеДляПодбораКП.ЗначенияДляВыбора.ПоказатьОтметкуЭлементов(лОповещениеПослеВыбораЭлемента);
				Иначе
					лДанныеДляПодбораКП.ЗначенияДляВыбора.ПоказатьВыборЭлемента(лОповещениеПослеВыбораЭлемента);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОткрытьМенюАвтоподстановки()

// пРОЦЕДУРА ДУБЛЬ(!!!)
&НаКлиенте
Функция гИнициализацияVBScript()
	
	Если RegExp <> Неопределено Тогда 
		Возврат Истина
	КонецЕсли;
	
	Попытка
		RegExp = Новый COMОбъект("VBScript.RegExp");
	Исключение
		RegExp = Неопределено;
		Сообщить("Ошибка инициализации VBScript.RegExp.", СтатусСообщения.Важное);
		Возврат False;
	КонецПопытки;
	
	RegExp.Multiline=False;
	RegExp.Global=True;
	RegExp.IgnoreCase=True;
	
	Возврат True;
	
КонецФункции // гИнициализацияVBScript

Функция ПолучитьДанныеДляПодбораКПНаСервере(ТекстЗапроса, лПозицияКурсораВТексте)
	
	Результат = ОбъектОбработки(ТипОбработка, СеансовыеДанные).гПолучитьДанныеДляПодбораКП(ТекстЗапроса, лПозицияКурсораВТексте);
	
	Возврат Результат
	
КонецФункции


#КонецОбласти

#Область РаботаСПараметрамиЗапроса

&НаСервереБезконтекста
Функция ПолучитьПараметрыЗапросаНаСервере(ТекстЗапроса, ТекстОшибки)

	Запрос = Новый Запрос(ТекстЗапроса);
	Попытка
		лПараметры = Запрос.НайтиПараметры();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	лРезультат = Новый Массив;
	Для Каждого лПараметр Из лПараметры Цикл
		Если лПараметр.ТипЗначения.Типы().Количество() > 0 Тогда 
			лТипЗначения = лПараметр.ТипЗначения;
			Если XMLТип(лТипЗначения.Типы()[0]) = Неопределено Тогда 
				Сообщить("Не получилось получить XMLТип для типа " + Строка(лТипЗначения));
				лТипЗначения = Новый ОписаниеТипов("Строка");
			КонецЕсли;
		Иначе
			лТипЗначения = Новый ОписаниеТипов("Строка");
		КонецЕсли;
			
		лРезультат.Добавить(Новый Структура("Имя, ТипЗначения, ИмяXML", лПараметр.Имя, лТипЗначения, XMLТип(лТипЗначения.Типы()[0]).ИмяТипа));
	КонецЦикла;
	
	Возврат лРезультат

КонецФункции // ПолучитьПараметрыЗапросаНаСервере()
 
&НаКлиенте
Функция ЗаполнитьПараметрыЗапросов(ТекстЗапроса, ТекстОшибки)
	
	лПараметры = ПолучитьПараметрыЗапросаНаСервере(ТекстЗапроса, ТекстОшибки);
	
	Если лПараметры = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	// #заполнениепараметровзапроса 2
	Для Каждого Параметр Из лПараметры Цикл
		лИмяПараметра      = Параметр.Имя;
		лСтрокаСПараметром = НайтиЗначениеБезУчетаРегистра(лИмяПараметра, ПараметрыТекущегоЗапроса, "Имя");
		Если лСтрокаСПараметром = Неопределено Тогда 
			лСтрокаСПараметром                     = ПараметрыТекущегоЗапроса.Добавить();
			лСтрокаСПараметром.Имя                 = лИмяПараметра;
			лСтрокаСПараметром.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;                                                    
		
		Если Параметр.ТипЗначения.Типы().Количество() > 0 Тогда 
			ДанныеПоТипу = СписокТипов.НайтиПоЗначению(Строка(Параметр.ТипЗначения.Типы()[0])); // простые типы
			Если ДанныеПоТипу = Неопределено Тогда
				ДанныеПоТипу = СписокТипов.НайтиПоЗначению(Параметр.ИмяXML);                    // сложные типы
			КонецЕсли;
			ИнициализацияТипаИЗначенияПараметра(лСтрокаСПараметром.ПолучитьИдентификатор(), ДанныеПоТипу);
		Иначе
			ИнициализацияТипаИЗначенияПараметра(лСтрокаСПараметром.ПолучитьИдентификатор(), Новый Структура("Значение, Представление, Картинка", ТипЗнч(""), "Строка", Неопределено));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ЗаполнитьПараметрыЗапросов()

&НаКлиенте
Процедура ОбработкаДействийЗаполнитьПараметрыИзЗапроса()
	
	Перем лТекстОшибки;
	
	лТекстЗапроса = ПолучитьУстановитьТекущийТекстЗапроса().ТекстЗапроса;
	
	Если Не ПустаяСтрока(лТекстЗапроса) Тогда
		
		Если Не ЗаполнитьПараметрыЗапросов(лТекстЗапроса, лТекстОшибки) Тогда 
			ПоказатьСообщениеПользователю(лТекстОшибки, "Объект");
		Иначе
			Модифицированность = Истина;
		КонецЕсли;
	Иначе
		лТекстПредупреждения = НСтр("ru = 'Текст запроса пустой.'");
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПоказатьПредупреждениеЗавершение", ЭтаФорма), лТекстПредупреждения);
	КонецЕсли;                                                                                       
	
КонецПроцедуры // ОбработкаДействийЗаполнитьПараметрыИзЗапроса()

&НаКлиенте
Процедура ОбработкаДействийНастройкиПодключенияКВнешнейБазеВПараметры()
	
	ДобавитьТекущийПараметр(Константы().ИмяПараметраСоединенияСИБ, СтрокаСоединенияИнформационнойБазы() + " Usr = """ + ИмяПользователя() + """; Pwd = """";");
	
	СистемнаяИнформация = Новый("СистемнаяИнформация");
	ДобавитьТекущийПараметр(Константы().ВерсияВнешнейБазы, Лев(СистемнаяИнформация.ВерсияПриложения,3));
	
КонецПроцедуры // ОбработкаДействийНастройкиПодключенияКВнешнейБазеВПараметры()

&НаКлиенте
Функция ПараметрыВСоответствие()
	
	лПараметрыСоответствие = Новый Соответствие;
	Для каждого лПараметр Из ПараметрыТекущегоЗапроса Цикл
		лПараметрыСоответствие.Вставить(лПараметр.Имя, Новый Структура("Значение", лПараметр.Значение));
	КонецЦикла; 
	
	Возврат лПараметрыСоответствие;
КонецФункции

#КонецОбласти

#Область ВыводСообщений

Процедура мПоказатьОшибкуНаСервере(ТекстСообщения) Экспорт
	ВызватьИсключение ТекстСообщения;
КонецПроцедуры // мПоказатьОшибкуНаСервере()

&НаСервереБезКонтекста
Процедура гВывестиОшибкуВыполненияКода(ТипОбработка, СеансовыеДанные, ТекстОшибки, КодДляВыполнения)
	ОбъектОбработки(ТипОбработка, СеансовыеДанные).гВывестиОшибкуВыполненияКода(ТекстОшибки, КодДляВыполнения);
КонецПроцедуры

#КонецОбласти

#Область РаботаСИнтерфейсом

&НаКлиенте
Процедура ВывестиСообщение(ТекстСообщения)
	
	ПоказатьСообщениеПользователю(НСтр("ru = '" + СтрЗаменить(ТекстСообщения, "'", "''") + "'"));
	
КонецПроцедуры // ВывестиСообщение()

&НаКлиенте
Процедура ВывестиПозициюКурсора()
	
	Если АвтоопределениеПозицииКурсора Тогда 
		СтруктураВыделенногоТекста = ПолучитьСтруктуруВыделенногоТекста();
		лНовыйЗаголовок = "Строка: " + СтруктураВыделенногоТекста.КонецСтроки + " Кол: " + СтруктураВыделенногоТекста.КонецКолонки;
		ПодключитьОбработчикОжидания("ВывестиПозициюКурсора", 1);
	Иначе
		лНовыйЗаголовок = "Определять позицию курсора";
		ОтключитьОбработчикОжидания("ВывестиПозициюКурсора");
	КонецЕсли;
	
	Если Элементы.ФормаКнопкаПозицияКурсора.Заголовок <> лНовыйЗаголовок Тогда 
		Элементы.ФормаКнопкаПозицияКурсора.Заголовок = лНовыйЗаголовок;
	КонецЕсли;
	
КонецПроцедуры
	
// ДУБЛЬ процедуры из формы ФормаУпрИсполняемыйКод
//
&НаКлиенте
Процедура КомментированиеВыделенногоТекста(УстановитьКомментарий)

	лИзменяемыйТекст                = Новый ТекстовыйДокумент;
	лСтруктураТекущегоТекстаЗапроса = ПолучитьУстановитьТекущийТекстЗапроса();
	лЭлементформыСТекстомЗапроса    = лСтруктураТекущегоТекстаЗапроса.Элементформы;
	лТекстЗапроса                   = лСтруктураТекущегоТекстаЗапроса.ТекстЗапроса;

	лИзменяемыйТекст.УстановитьТекст(лТекстЗапроса);
	
	СтруктураВыделенногоТекста = ПолучитьСтруктуруВыделенногоТекста();
	
	Для Сч = СтруктураВыделенногоТекста.НачалоСтрокиКомментария По СтруктураВыделенногоТекста.КонецСтрокиКомментария-1 Цикл
		
		Если УстановитьКомментарий Тогда
			лИзменяемыйТекст.ЗаменитьСтроку(Сч, "//" + лИзменяемыйТекст.ПолучитьСтроку(Сч));
		Иначе
			лТекущаяСтрока = лИзменяемыйТекст.ПолучитьСтроку(Сч);
			Если Найти(СокрЛ(лТекущаяСтрока), "//") = 1 Тогда 
				лИзменяемыйТекст.ЗаменитьСтроку(Сч, Сред(лТекущаяСтрока, Найти(лТекущаяСтрока, "//") + 2));			
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	лЭлементформыСТекстомЗапроса.УстановитьГраницыВыделения(1, 1, лИзменяемыйТекст.КоличествоСтрок() + 1, 1);
	лЭлементформыСТекстомЗапроса.ВыделенныйТекст = лИзменяемыйТекст.ПолучитьТекст();
	лЭлементформыСТекстомЗапроса.УстановитьГраницыВыделения(СтруктураВыделенногоТекста.НачалоСтрокиКомментария, 
		СтруктураВыделенногоТекста.НачалоКолонкиКомментария, 
		СтруктураВыделенногоТекста.КонецСтрокиКомментария, 
		СтруктураВыделенногоТекста.КонецКолонкиКомментария);
	
	Модифицированность = Истина;                                        
	
КонецПроцедуры // КомментированиеВыделенногоТекста()

// ДУБЛЬ процедуры из формы ФормаУпр
//
&НаКлиенте
Функция ПолучитьСтруктуруВыделенногоТекста()

	Перем НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки;
	
	ПолучитьУстановитьТекущийТекстЗапроса().ЭлементФормы.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	
	НачалоСтрокиКомментария = НачалоСтроки;
	
	Если КонецСтроки > НачалоСтроки И КонецКолонки = 1 Тогда 
		КонецСтрокиКомментария = КонецСтроки;
	Иначе
		КонецСтрокиКомментария = КонецСтроки + 1;
	КонецЕсли;
	
	НачалоКолонкиКомментария = 1;
	КонецКолонкиКомментария  = 1;
	
	Результат = Новый Структура();
	Результат.Вставить("НачалоСтроки"            , НачалоСтроки);
	Результат.Вставить("НачалоКолонки"           , НачалоКолонки);
	Результат.Вставить("КонецСтроки"             , КонецСтроки);
	Результат.Вставить("КонецКолонки"            , КонецКолонки);
	Результат.Вставить("НачалоСтрокиКомментария" , НачалоСтрокиКомментария);
	Результат.Вставить("НачалоКолонкиКомментария", НачалоКолонкиКомментария);
	Результат.Вставить("КонецСтрокиКомментария"  , КонецСтрокиКомментария);
	Результат.Вставить("КонецКолонкиКомментария" , КонецКолонкиКомментария);	
	
	Возврат Результат;

КонецФункции // ПолучитьСтруктуруВыделенногоТекста()

&НаКлиенте
Процедура ОтобразитьДеревоЗапросов(НоваяВидимость, Страница = Неопределено)
	
	ОформитьНажатиеКнопки("ПоказатьДеревоЗапросов", НоваяВидимость);
	
	Если НоваяВидимость <> мДеревоЗапросовВидимость Тогда 
		
		// синхронизироватьДанныеЗапросаВЭлементахФормы();
		
		Элементы.ДеревоЗапросов.Видимость = НоваяВидимость;
		мДеревоЗапросовВидимость = НоваяВидимость;
	КонецЕсли;
	
	Если мДеревоЗапросовВидимость Тогда 
		Элементы.ПоказатьДеревоЗапросов.РасширеннаяПодсказка.Заголовок = "Скрыть дерево запросов";
	Иначе
		Элементы.ПоказатьДеревоЗапросов.РасширеннаяПодсказка.Заголовок = "Показать дерево запросов";
	КонецЕсли;
	
	Если Элементы.ДеревоЗапросов.ТекущаяСтрока = Неопределено Тогда
		Элементы.ДеревоЗапросов.ТекущаяСтрока = ДеревоЗапросов.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры // ОтобразитьДеревоЗапросов()

&НаКлиенте
Процедура РасшифроватьСпецПоле(ИмяПоля, ИдентификаторСтроки, ТипПоля)

	лРежимОткрытияФормы = гРежимыОткрытияФормы(ТипОбработка, СеансовыеДанные).Расшифровка;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимОткрытияФормы" , лРежимОткрытияФормы);
	ПараметрыФормы.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	ПараметрыФормы.Вставить("ИмяПоля"            , ИмяПоля);
	ПараметрыФормы.Вставить("ИмяСпецПоля"        , ПолучитьИмяСпецПоля(ИмяПоля));
	
	ПараметрыФормы.Вставить("АдресТаблицыЗначений", АдресРезультата);
	
	Если ТипПоля = "Таблица значений" Тогда 
		ОткрытьФорму(СтрЗаменить(ИмяФормы, ".ФормаУпр", "") + ".ФормаУпрПустая", ПараметрыФормы, ЭтаФорма);			
	ИначеЕсли ТипПоля = "Тип" Тогда 
		ПоказатьВводСтроки(Новый ОписаниеОповещения("ПоказатьВводСтрокиЗавершение", ЭтаФорма), ПолучитьПолноеПредставлениеТипаИзРасшифровкиНаСервере(ПараметрыФормы));
	Иначе
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПоказатьПредупреждениеЗавершение", ЭтаФорма), "Для типа """ + ТипПоля + """ расшифровка на текущий момент не реализована.", , "Информация");
	КонецЕсли;
	
КонецПроцедуры // РасшифроватьСпецПоле()

&НаКлиенте
Процедура ОформитьНажатиеКнопки(ИмяРеквизитаКнопки, Нажата)
	
	// если Нажата Тогда 
	//	Элементы[ИмяРеквизитаКнопки].ЦветРамки = Новый Цвет(0,0,255);
	//	Элементы.ДекорацияПоказатьДеревоЗапросов.Картинка = ПолучитьКартинкуНаСервере("МенюСкрыть", ТипОбработка, СеансовыеДанные);
	// иначе
	//	Элементы[ИмяРеквизитаКнопки].ЦветРамки = мЦветСтиляЦветРамки;
	//	Элементы.ДекорацияПоказатьДеревоЗапросов.Картинка = ПолучитьКартинкуНаСервере("МенюПоказать", ТипОбработка, СеансовыеДанные);
	// конецЕсли;

КонецПроцедуры // ОформитьНажатиеКнопки()

Процедура СоздатьРеквизитCРезультатомЗапроса(АдресРезультата)
	// ПРОЦЕДУРА ДУБЛЬ(!!!)
	
	лОбработкаОбъект          = ОбъектОбработки(ТипОбработка, СеансовыеДанные);
	лРеквизитыТаблицы         = лОбработкаОбъект.гПолучитьМассивРеквизитовДляДобавленияТаблицыНаФорму(УникальныйИдентификатор, АдресРезультата, АдресСпискаСпецПолей);
	
	// изменяем структуру реквизитов формы
	Попытка
		ИзменитьРеквизиты(, лРеквизитыТаблицы.МассивРеквизитовУдаления);
	Исключение
	КонецПопытки; 
	
	// раздельно добавляем и удаляем, потомучто при удалении отсутствующего реквизита происходит исключение
	Попытка
		ИзменитьРеквизиты(лРеквизитыТаблицы.МассивРеквизитов, );
	Исключение
		мПоказатьОшибкуНаСервере(ОписаниеОшибки());
	КонецПопытки;
	
	лРезультат = ПолучитьТаблицуРезультатаНаСервере(АдресРезультата).Скопировать();
	
	//ЭтаФорма.РезультатЗапроса = 
	ЭтаФорма[СвойстваРеквизитаРезультатЗапроса.ИмяРеквизита].Загрузить(лРезультат);
	
	лОбработкаОбъект.гВывестиТаблицуНаФорму(Элементы, АдресРезультата, АдресСпискаСпецПолей, УсловноеОформление);
	
КонецПроцедуры // СоздатьРеквизитCРезультатомЗапроса()

&НаКлиенте
Процедура ОбновитьЗаголовок()

	ЭтаФорма.Заголовок = гЗаголовокОбработки(ТипОбработка, СеансовыеДанные, ИмяПользователяВОблаке, ИмяФайлаСЗапросом)
	
КонецПроцедуры // ОбновитьЗаголовок()

&НаКлиенте
Процедура ОбновитьСостояниеРезультатаЗапроса()
	Попытка
		Элементы.КнопкаКоличествоСтрокРезультатаЗапроса.Заголовок = "Строк: " + РезультатЗапроса().Количество();
	Исключение
		Элементы.КнопкаКоличествоСтрокРезультатаЗапроса.Заголовок = "Строк: 0";
	КонецПопытки; 
КонецПроцедуры // ОбновитьСостояниеРезультатаЗапроса()
 
&НаКлиенте
Процедура ОформитьКнопкуПоказатьСекциюСЗапросами(Видимость)
	//Элементы.ПоказатьСекциюСЗапросами.Заголовок = ?(Видимость, "Скрыть секцию с запросами", "Показать секцию с запросами");
	Элементы.ПоказатьСекциюСЗапросами.РасширеннаяПодсказка.Заголовок = ?(Видимость, "Скрыть секцию с запросами", "Показать секцию с запросами");
	Элементы.ПоказатьСекциюСЗапросами.Пометка = Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ОформитьКнопкуПоказатьРезультат(Видимость)
	Элементы.ПоказатьРезультат.РасширеннаяПодсказка.Заголовок = ?(Видимость, "Скрыть секцию с результатом запроса", "Показать секцию с результатом запроса");
	Элементы.ПоказатьРезультат.Пометка = Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ОформитьКнопкуПоказатьПараметры(Видимость)
	//Элементы.ПоказатьПараметры.Заголовок = ?(Видимость, "Скрыть параметры запроса", "Показать параметры запроса");
	Элементы.ПоказатьПараметры.РасширеннаяПодсказка.Заголовок = ?(Видимость, "Скрыть параметры запроса", "Показать параметры запроса");
	Элементы.ПоказатьПараметры.Пометка = Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогВыбораФайла(Операция) // #Рефакторинг -> Унифицировать с аналогичной процедурой из обычной формы
	
	Диалог = Новый ДиалогВыбораФайла(ПолучитьРежимДиалогаПоОперацииРаботыСФайлами(Операция));
	Диалог.Заголовок					= НСтр("ru = 'Выберите файл запросов'");
	Диалог.ПредварительныйПросмотр  	= Ложь;
	Диалог.Фильтр   					= НСтр("ru = 'Файл запросов (*.sel)|*.sel'");
	Диалог.Расширение   				= "sеl";
	Диалог.ПроверятьСуществованиеФайла  = Истина;
	Диалог.МножественныйВыбор			= Ложь;
	
	Если Операция = РежимДиалогаВыбораФайла.Открытие Тогда 
		ТекущийФайл = Новый Файл(ИмяФайлаСЗапросом);
		
		Диалог.ПолноеИмяФайла = ТекущийФайл.Имя;
		Диалог.Каталог = ТекущийФайл.Путь;
	Иначе
		Диалог.ПолноеИмяФайла = "Запросы от " + Формат(ТекущаяДата(), "ДФ=yyyyMMdd");
	КонецЕсли;
	
	Диалог.Показать(Новый ОписаниеОповещения("ДиалогВыбораФайлаЗавершение", Вычислить(ЭтотОбъектФорма), Новый Структура("Диалог, Операция", Диалог, Операция)));

КонецПроцедуры // ПоказатьДиалогВыбораФайла()

// Показывает сообщение или предупреждение пользователю
//
// Параметры:
//	ТекстСообщения - текст передаваемого сообщения.
//	ПутьКДанным - путь к данным для сообщения.
//
&НаКлиенте
Процедура ПоказатьСообщениеПользователю(ТекстСообщения, ПутьКДанным = Неопределено)
	// очиститьСообщения();
	Сообщение 				= Новый СообщениеПользователю(); 
    Сообщение.Текст 		= ТекстСообщения;
	Если ЗначениеЗаполнено(ПутьКДанным) Тогда 
		Сообщение.ПутьКДанным 	= ПутьКДанным;
	КонецЕсли;
	Сообщение.УстановитьДанные(Объект); 
	Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
	Сообщение.Сообщить();
КонецПроцедуры // ПоказатьСообщениеПользователю

#Область Меню

&НаСервереБезКонтекста
Функция ПолучитьМенюНаСервереСписком(ИмяМеню, ТипОбработка, СеансовыеДанные)
	
	лМенюСписком = ОбъектОбработки(ТипОбработка, СеансовыеДанные).гПолучитьМеню(ИмяМеню, Истина, Истина);
	
	Результат = Новый СписокЗначений;
	Для каждого ПунктМеню Из лМенюСписком Цикл
		
		Если ПунктМеню.Значение.Действие = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ПунктМеню.Значение.Имя, ПунктМеню.Значение.Название,,ПунктМеню.Значение.Картинка);
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции // ПолучитьМенюНаСервереСписком()

Процедура ЗаполнитьМенюПоДеревуНаСервере(Родитель, ДеревоМенюКнопки, КореньЭтоПодменю = Истина)
	
	лТекущийРодитель = Родитель;
	
	Для каждого ТекСтрока Из ДеревоМенюКнопки.Строки Цикл
		
		лИмяЭлемента = ТекСтрока.Имя;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Действие) Тогда			
			Если ТекСтрока.Строки.Количество() > 0 Тогда
				лГруппаКнопок = Элементы.Добавить(лИмяЭлемента, Тип("ГруппаФормы"), Родитель);
				лГруппаКнопок.Вид = ?(КореньЭтоПодменю, ВидГруппыФормы.Подменю, ВидГруппыФормы.ГруппаКнопок);
				лГруппаКнопок.Заголовок = ТекСтрока.Название;
				ЗаполнитьМенюПоДеревуНаСервере(лГруппаКнопок, ТекСтрока, Истина)
			Иначе
				лГруппаКнопок = Элементы.Добавить(лИмяЭлемента, Тип("ГруппаФормы"), Родитель);
				лГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;
				
				лТекущийРодитель = лГруппаКнопок;
			КонецЕсли;	
		Иначе
			
			лИмяКоманды = ТекСтрока.Имя;
			КомандаФормы  = Команды.Найти(лИмяКоманды);
			
			Если КомандаФормы = Неопределено Тогда 
				КомандаФормы = Команды.Добавить(лИмяКоманды);
				КомандаФормы.Действие = ТекСтрока.Действие;
			КонецЕсли;
			
			Кнопка            = Элементы.Добавить(лИмяЭлемента, Тип("КнопкаФормы"), лТекущийРодитель);
			Кнопка.ИмяКоманды = лИмяКоманды;
			Кнопка.Заголовок  = ТекСтрока.Название;
			
			Если ТекСтрока.СочетаниеКлавиш <> Неопределено Тогда
				Кнопка.СочетаниеКлавиш = ТекСтрока.СочетаниеКлавиш;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьМенюПоДеревуНаСервере()
 
#КонецОбласти 

&НаСервереБезКонтекста
Функция ПолучитьПолноеПредставлениеТипаИзРасшифровкиНаСервере(Параметры)
	Возврат Метаданные.НайтиПоТипу(ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыЗначений)[Параметры.ИдентификаторСтроки][Параметры.ИмяСпецПоля]).ПолноеИмя();
КонецФункции // ПолучитьПолноеПредставлениеТипаИзРасшифровкиНаСервере()

&НаКлиенте
Функция ПолучитьИмяСпецПоля(ИмяПоля)
	Возврат СтрЗаменить(ИмяПоля, СвойстваРеквизитаРезультатЗапроса.ПрефиксДляПолей + гПрефиксСпецПоля(), "");
КонецФункции // ПолучитьИмяСпецПоля()

#КонецОбласти 

#Область РаботаСЗапросом

&НаСервереБезКонтекста
// Функция формирует таблицу значений
// Параметры функции:
// 	ВнешниеДанные - ComObject - выборка запроса из внешней базы
//
Функция СформироватьТаблицуПоВнешнейВыборке(ВнешниеДанные)
	
	Результат = Новый ТаблицаЗначений;
	
	лКоличествоСтрок     = ВнешниеДанные.Количество();
	лАнализируемаяСтрока = ВнешниеДанные.GET(?(лКоличествоСтрок > 1, 1, 0));	
	Для каждого КолонкаТаблицы Из ВнешниеДанные.Колонки Цикл
		
		лАнализируемоеЗначение = лАнализируемаяСтрока[КолонкаТаблицы.Имя];
		Массив                 = Новый Массив;
		Если СтрокаВЧисло(лАнализируемоеЗначение) <> Неопределено Тогда 
			Массив.Добавить(Тип("Число"));
		ИначеЕсли ЗначениеЗаполнено(СтрокаВДату(лАнализируемоеЗначение)) Тогда 
			Массив.Добавить(Тип("Дата"));
		Иначе
			Массив.Добавить(Тип("Строка"));
		КонецЕсли;
		
		лОписаниеТипов = Новый ОписаниеТипов(Массив);
		
		Результат.Колонки.Добавить(КолонкаТаблицы.Имя, лОписаниеТипов);
	КонецЦикла; 
	
	Для каждого СтрокаТаблицы Из ВнешниеДанные Цикл
		НоваяСтрока = Результат.Добавить();
		Для каждого КолонкаТаблицы Из ВнешниеДанные.Колонки Цикл
			Если ТипЗнч(СтрокаТаблицы[КолонкаТаблицы.Имя]) = Тип("COMОбъект") Тогда 
				НоваяСтрока[КолонкаТаблицы.Имя] = "COMОбъект";
			Иначе
				НоваяСтрока[КолонкаТаблицы.Имя] = СтрокаТаблицы[КолонкаТаблицы.Имя];
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции // СформироватьТаблицуПоВнешнейВыборке()


&НаСервереБезКонтекста
Функция гСформироватьКодЗапросаДля1С(ТипОбработка, СеансовыеДанные, ТекстЗапроса, ПараметрыЗапроса, Режим)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гСформироватьКодЗапросаДля1С(ТекстЗапроса, ПараметрыЗапроса, Режим, Истина);
КонецФункции

&НаСервереБезКонтекста
Функция гПолучитьЗапросИзТекста(ТипОбработка, СеансовыеДанные, Код1С, ПростаяОбработкаТекста)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гПолучитьЗапросИзТекста(Код1С, ПростаяОбработкаТекста);
КонецФункции


&НаКлиенте
Процедура СкопироватьИсполняемыйКод(идЗапросаИсточника, идЗапросаПриемника)
	
	лСтрокиСИсполняемымКодомИсточника = ИсполняемыйКод.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", идЗапросаИсточника));
	
	Для каждого лИсполняемыйКодИсточника Из лСтрокиСИсполняемымКодомИсточника Цикл
		
		лНовыйИсполняемыйКод = ИсполняемыйКод.Добавить();
		ЗаполнитьЗначенияСвойств(лНовыйИсполняемыйКод, лИсполняемыйКодИсточника);
		лНовыйИсполняемыйКод.ИдентификаторЗапроса = идЗапросаПриемника;
		
	КонецЦикла; 
	
КонецПроцедуры // СкопироватьИсполняемыйКод()

&НаКлиенте
Процедура СохранитьЗначенияПоЗапросу(идСтрокиСЗапросом)
	
	Если идСтрокиСЗапросом = Неопределено Тогда 
		Возврат;	
    КонецЕсли;

	лСтрокаСЗапросом = ДеревоЗапросов.НайтиПоИдентификатору(идСтрокиСЗапросом);
	
	лСтрокаСЗапросом.ТекстЗапроса = ТекстТекущегоЗапроса;
	
	////////////////////////////////////////////
	// обновляем параметры по текущему запросу
	
	лИдентификаторСохраняемогоЗапроса = лСтрокаСЗапросом.Идентификатор;
	
	// очищаем глобальные параметры
	лИдЗапросыКУдалению = Новый Массив;
	лИдЗапросыКУдалению.Добавить("");
	лИдЗапросыКУдалению.Добавить(лИдентификаторСохраняемогоЗапроса);
	
	Для каждого идЗапросаДляПараметра Из лИдЗапросыКУдалению Цикл
		лСписокПараметровКудалению = ПараметрыЗапросов.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", идЗапросаДляПараметра));
		Для каждого лПараметрЗапроса Из лСписокПараметровКудалению Цикл
			ПараметрыЗапросов.Удалить(лПараметрЗапроса);
		КонецЦикла; 
	КонецЦикла; 
	
	// добавляем измененные параметры в общий список параметров		
	Для каждого лПараметрЗапроса Из ПараметрыТекущегоЗапроса Цикл
		лНовыйПараметр = ПараметрыЗапросов.Добавить();
		ЗаполнитьЗначенияСвойств(лНовыйПараметр, лПараметрЗапроса);
		Если лПараметрЗапроса.ГлобальныйПараметр Тогда 
			лНовыйПараметр.ИдентификаторЗапроса = "";
		Иначе
			лНовыйПараметр.ИдентификаторЗапроса = лИдентификаторСохраняемогоЗапроса;
		КонецЕсли;
	КонецЦикла; 
		
КонецПроцедуры // СохранитьЗначенияПоЗапросу()

&НаКлиенте
Процедура ОбновитьЭлементыФормыДляТекущегоЗапроса(идСтрокиСЗапросом)

	ПараметрыТекущегоЗапроса.Очистить();
	ТекстТекущегоЗапроса = "";
	
	Если идСтрокиСЗапросом <>  Неопределено Тогда 
		
		лСтрокаСЗапросом = ДеревоЗапросов.НайтиПоИдентификатору(идСтрокиСЗапросом);
		
		ТекстТекущегоЗапроса = лСтрокаСЗапросом.ТекстЗапроса;
		
		//////////////////////////////////////////////////////
		// обновляем элемент с параметрами текущего запроса
		
		ПараметрыТекущегоЗапроса.Очистить();
		
		лИдЗапросыКДобавлению = Новый СписокЗначений;
		лИдЗапросыКДобавлению.Добавить(Истина, "");
		лИдЗапросыКДобавлению.Добавить(Ложь  , лСтрокаСЗапросом.Идентификатор);
		
		лЕстьПараметрыБезТипов = Ложь;
		
		Для Каждого идЗапросаДляПараметра Из лИдЗапросыКДобавлению Цикл
			
			лПараметрыТекущегоЗапроса = ПараметрыЗапросов.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", идЗапросаДляПараметра.Представление));		
			
			Для Каждого лПараметрЗапроса Из лПараметрыТекущегоЗапроса Цикл
				
				лНовыйПараметр = ПараметрыТекущегоЗапроса.Добавить();
				ЗаполнитьЗначенияСвойств(лНовыйПараметр, лПараметрЗапроса);
				
				лНовыйПараметр.ГлобальныйПараметр = идЗапросаДляПараметра.Значение;
				лНовыйПараметр.ЗначениеВФорме = ФормированиеПредставленияЗначения(лНовыйПараметр.Значение);
				
				Если ПустаяСтрока(лНовыйПараметр.Тип) Тогда 
					лЕстьПараметрыБезТипов = Истина;
				КонецЕсли;
				
			КонецЦикла; 
		КонецЦикла; 
		
		Если лЕстьПараметрыБезТипов Тогда 
			ЗаполнитьТипыУПараметров();
		КонецЕсли;		
    КонецЕсли;
	
КонецПроцедуры // ОбновитьЭлементыФормыДляТекущегоЗапроса()

&НаКлиенте
Процедура ДобавитьНовуюСтрокуСЗапросом()
	НоваяСтрока = ДеревоЗапросов.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Идентификатор  = Новый УникальныйИдентификатор;
	НоваяСтрока.Имя            = НСтр("ru = 'Запрос'");
КонецПроцедуры // ДобавитьНовуюСтрокуСЗапросом()

&НаКлиенте
Процедура ОчиститьДанныеПоЗапросам()
	
	мТекущаяСтрокаДереваЗапросов = Неопределено;
	
	ДеревоЗапросов.ПолучитьЭлементы().Очистить();
	ПараметрыЗапросов.Очистить();
	ИсполняемыйКод.Очистить();
	
КонецПроцедуры // ОчиститьДанныеПоЗапросам()
 
&НаКлиенте
Процедура ЗагрузитьЗапросы(ИмяФайла, Операция, ВыводитьСообщение = Ложь)
	
	Если ЗначениеЗаполнено(ИмяФайла) Тогда 
		
		Ошибка = Ложь;	
		
		Если Не мДлительнаяОперацияЗапущена И Ложь Тогда
			лДлительнаяОперацияЗапущена = Истина;
			мДлительнаяОперацияЗапущена = Истина;
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнитьДействиеЗавершение", Вычислить(ЭтотОбъектФорма));
			ПараметрыФормыДлительнойОперации = ПараметрыОжидания(Неопределено);
			ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов.Форма.ДлительнаяОперация", ПараметрыФормыДлительнойОперации, Вычислить(ЭтотОбъектФорма),,,,ОповещениеОЗавершении);
		Иначе
			лДлительнаяОперацияЗапущена = Ложь
		КонецЕсли;
		
		ОчиститьДанныеПоЗапросам();
		
		Если Операция = мОперацииСЗапросами.ЗагрузитьИзСтарогоФормата Тогда 
			// открытие старой версии файла с запросами (не JSON)
			ТекстовыйДокумент = Новый ТекстовыйДокумент();
			Попытка
				ТекстовыйДокумент.Прочитать(ИмяФайла);
				ЗагрузитьСтаруюВерсиюДереваРекурсивноНаСервере(ТекстовыйДокумент.ПолучитьТекст());
			Исключение
				ПоказатьСообщениеПользователю(ОписаниеОшибки(), "Объект");		
				Ошибка = Истина;	
			КонецПопытки; 
			ИмяФайлаСЗапросом = "";
		Иначе
			// открытие новых версий файла с запросами (JSON)
			лТекстОшибки = "";
			лРезультатЧтения = ПрочитатьФайлСЗапросомJSON(ИмяФайла, лТекстОшибки);
			Если лТекстОшибки <> "" Тогда ПоказатьСообщениеПользователю(лТекстОшибки, "Объект") КонецЕсли;
			Если лРезультатЧтения > 0  Тогда 
				ИмяФайлаСЗапросом = ИмяФайла;
			ИначеЕсли лРезультатЧтения = 0 Тогда 
				лТекстОшибки = "Ошибка загрузки из файла (" + лТекстОшибки + ")." + Символы.ПС + "Попытка загрузки старого формата... ";
				Если лТекстОшибки <> "" Тогда ПоказатьСообщениеПользователю(лТекстОшибки, "Объект") КонецЕсли;
				ЗагрузитьЗапросы(ИмяФайла, мОперацииСЗапросами.ЗагрузитьИзСтарогоФормата, Истина);
			Иначе
				Ошибка = Истина;	
			КонецЕсли;
		КонецЕсли;
		
		Если Не Ошибка Тогда 
			ОбновитьЗаголовок();
			Если ВыводитьСообщение Тогда 
				ПоказатьСообщениеПользователю("Файл """ + ИмяФайла + """ загружен", "Объект");
			КонецЕсли;
		Иначе
			НовыйФайлЗапросовДействие();
		КонецЕсли;
		
		Если лДлительнаяОперацияЗапущена Тогда 
			мДлительнаяОперацияЗапущена = Ложь;
			ПоместитьВоВременноеХранилище(Новый Структура("Статус", "Выполнено"), ПараметрыФормыДлительнойОперации.ИдентификаторЗадания);
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыДерева = ДеревоЗапросов.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() = 0 Тогда 
		ДобавитьНовуюСтрокуСЗапросом();
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры // ЗагрузитьЗапросы()

Процедура ЗагрузитьСтаруюВерсиюДереваРекурсивноНаСервере(Знач Источник, Знач НовоеДерево = Неопределено, Знач СпецСтрока = Неопределено)
	
	Если НовоеДерево = Неопределено Тогда 
		Источник    = ЗначениеИзСтрокиВнутр(Источник); // на вход в рекурсию передаем дерево в виде строки
		СпецСтрока  = ОбъектОбработки(ТипОбработка, СеансовыеДанные).гПараметрыСпецСтрокиДереваЗапросов().Значение;
		НовоеДерево = РеквизитФормыВЗначение("ДеревоЗапросов");
		
		НовоеДерево.Строки.Очистить();
		
		ЭтоПервыйВходВРекурсию = Истина;
	Иначе
		ЭтоПервыйВходВРекурсию = Ложь;
	КонецЕсли;

	Если Источник.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаДерева Из Источник.Строки Цикл
		
		Если СтрокаДерева.Запрос = СпецСтрока Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НовоеДерево.Строки.Добавить();
		НоваяСтрока.Имя           = СтрокаДерева.Запрос;
		НоваяСтрока.ТекстЗапроса  = СтрокаДерева.ТекстЗапроса;
		Если ЗначениеЗаполнено(СтрокаДерева.Идентификатор) Тогда 
			НоваяСтрока.Идентификатор = СтрокаДерева.Идентификатор;
		Иначе
			НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДерева.ВариантыКода) Тогда 
			// заполнение Вариантов кода
			Для каждого Строка Из СтрокаДерева.ВариантыКода Цикл // #Рефакторинг СтрокаДерева.ИсполняемыйКодСписок
				НоваяСтрока1 = ИсполняемыйКод.Добавить();
				НоваяСтрока1.ИдентификаторЗапроса = НоваяСтрока.Идентификатор;
				НоваяСтрока1.ИдентификаторСтроки  = Новый УникальныйИдентификатор;
				НоваяСтрока1.Имя                  = Строка.ИмяВарианта;
				НоваяСтрока1.Текст                = Строка.ТекстКода;
			КонецЦикла; 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДерева.ПараметрыЗапроса) Тогда 
			// заполнение Вариантов кода
			Для каждого Строка Из СтрокаДерева.ПараметрыЗапроса Цикл // #Рефакторинг СтрокаДерева.ПараметрыЗапросов
				НоваяСтрока1 = ПараметрыЗапросов.Добавить();
				НоваяСтрока1.ИдентификаторЗапроса = НоваяСтрока.Идентификатор;
				НоваяСтрока1.Значение             = ЗначениеВСтрокуВнутр(Строка.Значение);
				НоваяСтрока1.Имя                  = Строка.ИмяПараметра;
				НоваяСтрока1.Тип                  = ТипЗнч(Строка.Значение); // #Рефакторинг
			КонецЦикла; 
		КонецЕсли;
		
		ЗагрузитьСтаруюВерсиюДереваРекурсивноНаСервере(СтрокаДерева, НоваяСтрока, СпецСтрока);
	КонецЦикла;
	
	Если ЭтоПервыйВходВРекурсию Тогда 
		ЗначениеВРеквизитФормы(НовоеДерево, "ДеревоЗапросов");
	КонецЕсли;

КонецПроцедуры // ЗагрузитьСтаруюВерсиюДереваРекурсивноНаСервере()

#Область ЧтениеФайлаСЗапросом

&НаКлиенте
Функция ПрочитатьJSONСОбработкойОшибки(ЧтениеJSON, ТекстОшибки) 
	Попытка
		Результат = ЧтениеJSON.Прочитать();
		Возврат Результат;		
	Исключение
		ТекстОшибки = ОписаниеОшибки();	
		Возврат Ложь;		
	КонецПопытки; 
КонецФункции // ПрочитатьJSONСОбработкойОшибки()

&НаКлиенте
// #дубль функции из обычной формы
Функция ПрочитатьФайлСЗапросомJSON(ИмяФайла, ТекстОшибки)
	
	Перем лВерсияФайла, лДата, лНоваяСтрока;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.ОткрытьФайл(ИмяФайла);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат - 1
	КонецПопытки; 

	Попытка
		лДанные = ПрочитатьJSON(ЧтениеJSON);
		
		ПрочитатьЗапросыизФайлаJSONРекурсивно(лДанные.querys);
		
		ДобавитьПараметрыИзСтруктурыJSON(лДанные.parameters);
		ДобавитьКодИзСтруктурыJSON(лДанные.codes);
				
		Возврат 1;
	Исключение
		ЧтениеJSON.Закрыть();
	КонецПопытки; 
	
	//// #рефакторинг +++чтение промежуточного формата файла. В будущем необходимо удалить
	// чтениеJSON = Новый ЧтениеJSON;
	// попытка
	//	ЧтениеJSON.ОткрытьФайл(ИмяФайла);
	//	лТипыСНачальнымБлоком = Новый Массив;
	//	лТипыСНачальнымБлоком.Добавить(ТипЗначенияJSON.НачалоМассива);
	//	лТипыСНачальнымБлоком.Добавить(ТипЗначенияJSON.НачалоОбъекта);
	//	
	//	лСтэкБлоков = Новый Массив;
	//	
	//	лМассивТиповJSONБезЗначений = ПолучитьТипыJSONБЕзЗначений();

	//	лИдентификаторыСтрокДерева = Новый Соответствие;
	//	
	//	Пока ПрочитатьJSONСОбработкойОшибки(ЧтениеJSON, ТекстОшибки) Цикл
	//		
	//		ТипJSON = ЧтениеJSON.ТипТекущегоЗначения;
	//		
	//		лЭлементСтэка = Новый Структура("ТекущаяПозиция,ТекущаяСтрока", ЧтениеJSON.ТекущаяПозиция, ЧтениеJSON.ТекущаяСтрока);
	//		
	//		Если лМассивТиповJSONБезЗначений.Найти(ЧтениеJSON.ТипТекущегоЗначения) = Неопределено Тогда 
	//			лЭлементСтэка.Вставить("ТекущееЗначение"    , ЧтениеJSON.ТекущееЗначение);
	//		КонецЕсли;
	//		лЭлементСтэка.Вставить("ТипТекущегоЗначения", ТипJSON);
	//		
	//		лСтэкБлоков.Вставить(0, лЭлементСтэка);
	//		Если лСтэкБлоков.Количество() = 2 Тогда 
	//			Если лСтэкБлоков[1].ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда 
	//				лОчищатьСтэк = Истина;
	//				Если лСтэкБлоков[1].ТекущееЗначение = "Версия" Тогда 
	//					лВерсияФайла = лСтэкБлоков[0].ТекущееЗначение;
	//				ИначеЕсли лСтэкБлоков[1].ТекущееЗначение = "Дата" Тогда 
	//					лДата = СериализаторXDTO.XMLЗначение(Тип("Дата"), лСтэкБлоков[0].ТекущееЗначение);
	//				Иначе
	//					лОчищатьСтэк = Ложь;
	//				КонецЕсли;
	//				Если лОчищатьСтэк Тогда 
	//					лСтэкБлоков.Удалить(0); // удаляем текущее значение
	//					лСтэкБлоков.Удалить(0); // удаляем имя свойства
	//				КонецЕсли;
	//			КонецЕсли;
	//		ИначеЕсли лСтэкБлоков.Количество() = 3 Тогда 
	//			Если лСтэкБлоков[0].ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда 
	//				Если лСтэкБлоков[2].ТекущееЗначение = "Параметры" Тогда 
	//					лНоваяСтрока = ПараметрыЗапросов.Добавить();// #добавлениепараметразапроса 3
	//				ИначеЕсли лСтэкБлоков[2].ТекущееЗначение = "ИсполняемыйКод" Тогда 
	//					лНоваяСтрока = ИсполняемыйКод.Добавить();			
	//					лНоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	//				КонецЕсли;
	//			ИначеЕсли лСтэкБлоков[0].ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда 
	//				лСтэкБлоков.Удалить(0); // удаляем конец тэга
	//				лСтэкБлоков.Удалить(0); // удаляем начало тэга
	//				лСтэкБлоков.Удалить(0); // удаляем начало тэга табличного блока (в каждом блоке только один массив!)
	//			КонецЕсли;
	//		ИначеЕсли лСтэкБлоков.Количество() = 4 Тогда 
	//			Если лСтэкБлоков[0].ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда 
	//				лСтэкБлоков.Удалить(0); // удаляем конец тэга
	//				лСтэкБлоков.Удалить(0); // удаляем начало тэга
	//			КонецЕсли;
	//		ИначеЕсли лСтэкБлоков.Количество() = 5 Тогда 
	//			Если лСтэкБлоков[1].ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда 
	//				лТекущееЗначение = лСтэкБлоков[0].ТекущееЗначение;
	//				Если лСтэкБлоков[1].ТекущееЗначение = "ИдентификаторРодителя" Тогда 
	//					Если ЗначениеЗаполнено(лТекущееЗначение) Тогда 
	//						лНоваяСтрока = ДеревоЗапросов.НайтиПоИдентификатору(лИдентификаторыСтрокДерева[лТекущееЗначение]).ПолучитьЭлементы().Добавить();			
	//					Иначе
	//						мПрограммноеДобавлениеСтрокиЗапроса = Истина; // #рефакторинг проверить необходимость данной переменной
	//						лНоваяСтрока = ДеревоЗапросов.ПолучитьЭлементы().Добавить();			
	//					КонецЕсли;
	//				Иначе
	//					лНоваяСтрока[лСтэкБлоков[1].ТекущееЗначение] = лТекущееЗначение;
	//					Если лСтэкБлоков[1].ТекущееЗначение = "Идентификатор" Тогда 
	//						лИдентификаторыСтрокДерева.Вставить(лТекущееЗначение, лНоваяСтрока.ПолучитьИдентификатор());
	//					КонецЕсли;
	//				КонецЕсли;
	//				
	//				лСтэкБлоков.Удалить(0); // удаляем текущее значение
	//				лСтэкБлоков.Удалить(0); // удаляем имя свойства
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	//
	// исключение
	//	ТекстОшибки = "Ошибка формата файла: " + ОписаниеОшибки();	
	//	Возврат -1
	// конецПопытки; 
	//// #рефакторинг ---чтение промежуточного формата файла. В будущем необходимо удалить
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
		Возврат 0
	Иначе
		Возврат 1
	КонецЕсли;
	
КонецФункции // ПрочитатьФайлСЗапросомJSON()

&НаКлиенте
Функция ПрочитатьЗапросыИзФайлаJSONРекурсивно(Запросы, ВеткаДерева = Неопределено, ЗаменяемыеИД = Неопределено)
	
	Если ВеткаДерева = Неопределено Тогда 
		ВеткаДерева = ДеревоЗапросов;
	КонецЕсли;

	Для каждого лСтруктураЗапроса Из Запросы Цикл
		лНоваяСтрока = ВеткаДерева.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(лНоваяСтрока, лСтруктураЗапроса);
		Если лНоваяСтрока.Идентификатор = "" Тогда 
			лНоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
			ПоказатьСообщениеПользователю("Ошибка загрузки запроса """ + лНоваяСтрока.Имя + """ (пустой идентификатор). 
				|Возможна потеря выполняемого кода, связанного с данным запроса. 
				|Параметры данного запроса могут отображаться как ""Глобальные"". 
				|Не сохраняйте запрос, скопируйте файл с запросами в другой файл и обратитесь к разработчику. 
				|Ситуация может быть исправлена.", "Объект");
		КонецЕсли;
		Если ЗаменяемыеИД <> Неопределено Тогда 
			лНовыйИД = Новый УникальныйИдентификатор;
			ЗаменяемыеИД.Вставить(лНоваяСтрока.Идентификатор, лНовыйИД);
			лНоваяСтрока.Идентификатор = лНовыйИД;
		КонецЕсли;
		ПрочитатьЗапросыИзФайлаJSONРекурсивно(лСтруктураЗапроса.Строки, лНоваяСтрока, ЗаменяемыеИД);
	КонецЦикла; 
	
	Возврат лНоваяСтрока;
	
КонецФункции // ПрочитатьЗапросыИзФайлаJSONРекурсивно()

#КонецОбласти 

#КонецОбласти 

#Область РаботаСПараметрами

&НаКлиенте
Процедура ИнициализацияТипаИЗначенияПараметра(ИдентификаторСтрокиПараметра, СвойстваПараметра, НеИнициироватьЗначение = Ложь)
	
	Если СвойстваПараметра = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийТипЗначение      = СвойстваПараметра.Значение;
	ТекущийТипПредставление = СвойстваПараметра.Представление;
	ТекущийТипКартинка      = СвойстваПараметра.Картинка;

	ТекущийПараметр  = ПараметрыТекущегоЗапроса.НайтиПоИдентификатору(ИдентификаторСтрокиПараметра);
	
	//лСписокТиповИсключений = Новый Массив;
	//лСписокТиповИсключений.Добавить(Тип("СписокЗначений"));
	//лСписокТиповИсключений.Добавить(Тип("ТаблицаЗначений"));
	//лСписокТиповИсключений.Добавить(Тип("МоментВремени"));
	//лСписокТиповИсключений.Добавить(Тип("Граница"));
	
	ТипСтрока = ТипСтрока(ТекущийТипЗначение, ТипОбработка, СеансовыеДанные, Объект.ДоступныеТипыДанных.Типы());
	
	Если ТекущийТипЗначение = "ТаблицаЗначений"
		Или ТекущийТипЗначение = "МоментВремени" 
		Или ТекущийТипЗначение = "Граница" Тогда 
	
		ТекущийПараметр.Тип            = ТипСтрока;
		ТекущийПараметр.ТипВФорме      = ТекущийТипПредставление;
		ТекущийПараметр.КартинкаТипа   = ТекущийТипКартинка;
		
		Если Не НеИнициироватьЗначение Тогда 
			ТекущийПараметр.Значение       = ПолучитьПустоеЗначениеТипаНаСервере(ТекущийТипЗначение);
			ТекущийПараметр.ЗначениеВФорме = ФормированиеПредставленияЗначения(ТекущийПараметр.Значение); 
		КонецЕсли;
	Иначе
		// Тип в табличной части.
		ТекущийПараметр.Тип = ТипСтрока;
		
		// Тип в форме.
		Массив = Новый Массив;
		Массив.Добавить(Тип(ТекущийТипЗначение));
		Описание = Новый ОписаниеТипов(Массив);
		
		ТекущийПараметр.ТипВФорме = ТекущийТипПредставление;
		ТекущийПараметр.КартинкаТипа    = ТекущийТипКартинка;
		
		Если Не НеИнициироватьЗначение Тогда 
			лЗначение = Описание.ПривестиЗначение(ТекущийПараметр.ЗначениеВФорме);
			Если ТипЗнч(лЗначение) = Тип("СписокЗначений") Тогда 
				лЗначение.ТипЗначения = Объект.ДоступныеТипыДанных;
				лЗначение.Добавить(ТекущийПараметр.ЗначениеВФорме);
			КонецЕсли;
			
			ТекущийПараметр.ЗначениеВФорме	= лЗначение;
			ТекущийПараметр.Значение		= ЗначениеВСтрокуСервер(ТекущийПараметр.ЗначениеВФорме);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры // ИнициализацияТипаИЗначенияПараметра()

// процедура ЗаполнитьТипыУПараметровНаСервере()
//	Для каждого лПараметр Из ПараметрыТекущегоЗапроса Цикл
//		Если ПустаяСтрока(лПараметр.Тип) И лПараметр.Значение <> "" Тогда 
//			лТипЗначения       = ТипЗнч(ЗначениеИзСтрокиВнутр(лПараметр.Значение));
//			лТипЗначенияСтрока = ПолучитьТипСтрокой(лТипЗначения);
//			лДанныеПоТипу      = СписокТипов.НайтиПоЗначению(лТипЗначенияСтрока);              // простые типы
//			Если лТипЗначенияСтрока <> "Не определено" Тогда 
//				Если лДанныеПоТипу = Неопределено Тогда
//					лДанныеПоТипу = СписокТипов.НайтиПоЗначению(XMLТип(лТипЗначения).ИмяТипа); // сложные типы
//				КонецЕсли;
//				ИнициализацияТипаИЗначенияПараметра(лПараметр.ПолучитьИдентификатор(), лДанныеПоТипу.Значение, лДанныеПоТипу.Представление, лДанныеПоТипу.Картинка, Истина);
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла; 	
// конецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПараметраНаСервере(Значение, СписокТипов)
	
	Если Значение = "" Тогда 
		лТипЗначения = Тип("Строка"); 
	Иначе
		лТипЗначения = ТипЗнч(ЗначениеИзСтрокиВнутр(Значение)); // #рефакторинг везде обработать ситуацию, когда передается пустая строка в значение
	КонецЕсли;
	
	лТипЗначенияСтрока = ПолучитьТипСтрокой(лТипЗначения);
	
	Если лТипЗначенияСтрока <> "Не определено" Тогда 
		лДанныеПоТипу = СписокТипов.НайтиПоЗначению(лТипЗначенияСтрока);              // простые типы
		Если лДанныеПоТипу = Неопределено Тогда
			лДанныеПоТипу = СписокТипов.НайтиПоЗначению(XMLТип(лТипЗначения).ИмяТипа); // сложные типы
		КонецЕсли;
		Возврат Новый Структура("Значение, Представление, Картинка", лДанныеПоТипу.Значение, лДанныеПоТипу.Представление, лДанныеПоТипу.Картинка);
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции // ПолучитьСтруктуруПараметраНаСервере()

Функция ПолучитьСтруктуруПараметровНаСервере(Знач ПараметрыТекущегоЗапроса, Знач СписокТипов)
	
	лЗначенияПараметров = ПараметрыТекущегоЗапроса.Выгрузить(,"Значение");
	лДанныеПоТипам = Новый Соответствие;
	Для Каждого лЗначениеПараметра Из лЗначенияПараметров Цикл
		лДанныеПоТипам.Вставить(лЗначениеПараметра.Значение, ПолучитьСтруктуруПараметраНаСервере(лЗначениеПараметра.Значение, СписокТипов));
	КонецЦикла;
	
	Возврат лДанныеПоТипам;
	
КонецФункции // ПолучитьСтруктуруПараметровНаСервере()

 
&НаКлиенте
Процедура ЗаполнитьТипыУПараметров()
	
	лДанныеПоТипам = ПолучитьСтруктуруПараметровНаСервере(ПараметрыТекущегоЗапроса, СписокТипов);
	
	Для каждого лПараметр Из ПараметрыТекущегоЗапроса Цикл
		Если ПустаяСтрока(лПараметр.Тип) И лПараметр.Значение <> "" Тогда 
			лДанныеПоТипу = лДанныеПоТипам[лПараметр.Значение];
			ИнициализацияТипаИЗначенияПараметра(лПараметр.ПолучитьИдентификатор(), лДанныеПоТипу, Истина);
		КонецЕсли;
	КонецЦикла; 	
КонецПроцедуры

#КонецОбласти 

#Область СервисныеФункции

&НаКлиентеНаСервереБезКонтекста
// Преобразует исходную строку в число без вызова исключений.
//
// Параметры:
//   Значение - Строка - Строка, которую необходимо привести к числу.
//                       Например, "10", "+10", "010", вернет 10;
//                                 "(10)", "-10",вернет -10;
//                                 "10,2", "10.2",вернет 10.2;
//                                 "000", " ", "",вернет 0;
//                                 "10текст", вернет Неопределено.
//
// Возвращаемое значение:
//   Число, Неопределено - Полученное число, либо Неопределено, если строка не является числом.
//
Функция СтрокаВЧисло(Знач Значение) Экспорт
	
	Значение  = СтрЗаменить(Значение, " ", "");
	Если СтрНачинаетсяС(Значение, "(") Тогда
		Значение = СтрЗаменить(Значение, "(", "-");
		Значение = СтрЗаменить(Значение, ")", "");
	КонецЕсли;
	
	СтрокаБезНулей = СтрЗаменить(Значение, "0", "");
	Если ПустаяСтрока(СтрокаБезНулей) Или СтрокаБезНулей = "-" Тогда
		Возврат 0;
	КонецЕсли;
	
	ТипЧисло  = Новый ОписаниеТипов("Число");
	Результат = ТипЧисло.ПривестиЗначение(Значение);
	
	Возврат ?(Результат <> 0 И Не ПустаяСтрока(СтрокаБезНулей), Результат, Неопределено);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Преобразует исходную строку в дату.
//
// Параметры:
//  Значение - Строка - Строка, которую необходимо привести к дате.
//                      Формат даты должен быть в виде "ДД.ММ.ГГГГ" или "ДД/ММ/ГГ" или "ДД-ММ-ГГ",
//                      Например, "23.02.1980" или "23/02/80".
// 
// Возвращаемое значение:
//  Дата - полученная дата.
//
Функция СтрокаВДату(Знач Значение) Экспорт
	
	Если Лев(Прав(Значение, 8), 1) = " " И Лев(Прав(Значение, 6), 1) = ":" И СтрокаВЧисло(Лев(Прав(Значение, 7), 1)) <> Неопределено Тогда 
		Значение = Лев(Значение, СтрДлина(Значение) - 8) + "0" + Сред(Значение, СтрДлина(Значение) - 6);
	КонецЕсли;
	Значение = СтрЗаменить(Значение, " 0:", "00:");
	Значение = СокрЛП(СтрЗаменить(Значение, ".", ""));
	Значение = СокрЛП(СтрЗаменить(Значение, "/", ""));
	Значение = СокрЛП(СтрЗаменить(Значение, "-", ""));
	Значение = СокрЛП(СтрЗаменить(Значение, ":", ""));
	Значение = Сред(Значение, 5, 4) + Сред(Значение, 3, 2) + Лев(Значение, 2) + Прав(Значение, 6);
	Если СтрДлина(Значение) = 6 Тогда
		Год = СтрокаВЧисло(Лев(Значение, 2));
		Если Год = Неопределено Тогда 
			Возврат Дата('0001.01.01');
		КонецЕсли;
		Значение = ?(Год > 29, "19", "20") + Значение;
	КонецЕсли;
	
	ОписаниеТипа = Новый ОписаниеТипов("Дата");
	Результат    = ОписаниеТипа.ПривестиЗначение(Значение);
	
	Возврат Результат;
	
КонецФункции 

Функция Коннектор(СтрокаСоединения, Версия) Экспорт
	
	Если Лев(Версия, 3) = "8.3" Тогда 
		V8COMConnector = Новый COMОбъект("V83.COMConnector");
	ИначеЕсли Лев(Версия, 3) = "8.2" Тогда 
		V8COMConnector = Новый COMОбъект("V82.COMConnector");
	ИначеЕсли Лев(Версия, 3) = "8.1" Тогда 
		V8COMConnector = Новый COMОбъект("V81.COMConnector");
	Иначе
		V8COMConnector = Новый COMОбъект("V8.COMConnector");
	КонецЕсли;
	
	Попытка
		Результат = V8COMConnector.Connect(СтрокаСоединения); 
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
		Результат = Неопределено;		
	КонецПопытки;
	
	Возврат Результат
	
КонецФункции // Коннектор()

// Получает идентификатор (метод ПолучитьИдентификатор()) строки дерева значений для заданного значения поля строки
// дерева.
// Используется для позиционирования курсора в иерархических списках.
// 
&НаКлиенте 
Процедура ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИмяПоля, ИдентификаторСтроки, КоллекцияЭлементовДерева, КлючСтроки, ПрекратитьПоиск) Экспорт
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл
		
		Если ПрекратитьПоиск Тогда
			Возврат;
		КонецЕсли;
		
		Если СтрокаДерева[ИмяПоля] = КлючСтроки Тогда
			
			ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
			
			ПрекратитьПоиск = Истина;
			
			Возврат;
			
		КонецЕсли;
		
		КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
		
		Если КоллекцияЭлементов.Количество() > 0 Тогда
			
			ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИмяПоля, ИдентификаторСтроки, КоллекцияЭлементов, КлючСтроки, ПрекратитьПоиск);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля()

&НаКлиенте 
Процедура ДобавитьТекущийПараметр(Имя, Значение)
	
	лПараметрЗапроса = ПараметрыТекущегоЗапроса.НайтиСтроки(Новый Структура("Имя", Имя));
	Если лПараметрЗапроса.Количество() = 0 Тогда 
		лСтрокаСПараметром     = ПараметрыТекущегоЗапроса.Добавить();
		лСтрокаСПараметром.Имя = Имя;		
	Иначе
		лСтрокаСПараметром = лПараметрЗапроса[0];
	КонецЕсли;                                                                                       
	лСтрокаСПараметром.ЗначениеВФорме = Значение;
	
	лТипЗначения = ТипЗнч(Значение);
	ДанныеПоТипу = СписокТипов.НайтиПоЗначению(Строка(лТипЗначения));             // простые типы
	Если ДанныеПоТипу = Неопределено Тогда
		ДанныеПоТипу = СписокТипов.НайтиПоЗначению(XMLТип(лТипЗначения).ИмяТипа); // сложные типы
		//#Рефакторинг а если и здесь не нашли? !!!!!!!!
	КонецЕсли;
	ИнициализацияТипаИЗначенияПараметра(лСтрокаСПараметром.ПолучитьИдентификатор(), ДанныеПоТипу);
	
	Модифицированность = Истина;
	
КонецПроцедуры // ДобавитьТекущийПараметр()

//&НаКлиенте
// функция ПолучитьПараметрыЗапросовДляJSON(МассивИдентификаторовЗапросов)

//	лМассивПараметров = Новый Массив;
//	
//	Если МассивИдентификаторовЗапросов.Найти("") = Неопределено Тогда 
//		// Добавляем пустой идентификатор - признак глобального параметра
//		МассивИдентификаторовЗапросов.Добавить("");
//	КонецЕсли;
//	
//	// добавляем локальные параметры
//	Для Каждого ИдентификаторЗапроса Из МассивИдентификаторовЗапросов Цикл
//		лПараметрыТекущегоЗапроса = ПараметрыЗапросов.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", ИдентификаторЗапроса));
//		Для каждого лПараметрТекущегоЗапроса Из лПараметрыТекущегоЗапроса Цикл
//			лМассивПараметров.Добавить(Новый Структура("ИдентификаторЗапроса, Имя, Значение", ИдентификаторЗапроса, лПараметрТекущегоЗапроса.Имя, лПараметрТекущегоЗапроса.Значение));
//		КонецЦикла; 
//	КонецЦикла; 
//	
//	Возврат лМассивПараметров
//	
// конецФункции // получитьПараметрыЗапросовДляJSON()

//&НаКлиенте
// функция ПолучитьИсполняемыйКодДляJSON(МассивИдентификаторовЗапросов)

//	лМассивСтрокКода = Новый Массив;
//	
//	Для каждого ИдентификаторЗапроса Из МассивИдентификаторовЗапросов Цикл
//		лКодТекущегоЗапроса = ИсполняемыйКод.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", ИдентификаторЗапроса));
//		Для каждого лСтрокаСКодом Из лКодТекущегоЗапроса Цикл
//			лМассивСтрокКода.Добавить(Новый Структура("ИдентификаторЗапроса, Имя, Текст", ИдентификаторЗапроса, лСтрокаСКодом.Имя, лСтрокаСКодом.Текст));
//		КонецЦикла; 
//	КонецЦикла; 
//	
//	Возврат лМассивСтрокКода

// конецФункции // ПолучитьИсполняемыйКодДляJSON()

&НаКлиенте
Функция ПолучитьСтруктуруЗапросовДляJSONРекурсивно(Знач Корень, МассивИД, ВыгружатьТолькоИзмененные, КолонкиКВыгрузке, ЗаменяемыеИД, ИмяЗапроса) Экспорт
	
	Запросы       = Новый Массив;
	
	Если ТипЗнч(Корень) = Тип("Структура") Тогда 
		лСтрокиДерева = Корень.Строки;
	Иначе
		лСтрокиДерева = Корень.ПолучитьЭлементы();
	КонецЕсли;
	
	Для Каждого лСтрокаДерева Из лСтрокиДерева Цикл
		
		лСтруктураСтрокиЗапроса = Новый Структура("Идентификатор, Имя, ТекстЗапроса");
		Если КолонкиКВыгрузке = Неопределено Тогда 
			ЗаполнитьЗначенияСвойств(лСтруктураСтрокиЗапроса, лСтрокаДерева);
		Иначе
			ЗаполнитьЗначенияСвойств(лСтруктураСтрокиЗапроса, лСтрокаДерева, КолонкиКВыгрузке);
		КонецЕсли;
		
		Если ИмяЗапроса <> Неопределено Тогда 
			лСтруктураСтрокиЗапроса.Имя  = ИмяЗапроса; // добавляем имя корневого запроса, которое указал пользователь в диалоге сохранения запроса
		КонецЕсли;
		
		Если ЗаменяемыеИД <> Неопределено Тогда 
			лНовыйИД = Строка(Новый УникальныйИдентификатор);
			ЗаменяемыеИД.Вставить(лСтрокаДерева.Идентификатор, лНовыйИД);
			лСтруктураСтрокиЗапроса.Идентификатор = лНовыйИД;
		КонецЕсли;
		
		лСтруктураСтрокиЗапроса.Вставить("Строки", ПолучитьСтруктуруЗапросовДляJSONРекурсивно(лСтрокаДерева, МассивИД, ВыгружатьТолькоИзмененные, КолонкиКВыгрузке, ЗаменяемыеИД, Неопределено));
		
		Если лСтруктураСтрокиЗапроса.Строки.Количество() > 0 ИЛИ Не ВыгружатьТолькоИзмененные ИЛИ СписокИзмененныхСтрок.НайтиПоЗначению(лСтрокаДерева.Идентификатор) <> Неопределено  Тогда 
			МассивИД.Добавить(лСтрокаДерева.Идентификатор);
			Запросы.Добавить(лСтруктураСтрокиЗапроса);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Запросы;
	
КонецФункции // ПолучитьСтруктуруЗапросовДляJSONРекурсивно()

&НаКлиенте
Функция ПолучитьИсполняемыйКодДляJSON(ИсполняемыйКод, МассивИдентификаторовЗапросов, ЗаменяемыеИД) Экспорт

	лМассивСтрокКода = Новый Массив;
	
	Для каждого ИдентификаторЗапроса Из МассивИдентификаторовЗапросов Цикл
		лКодТекущегоЗапроса = ИсполняемыйКод.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", ИдентификаторЗапроса));
		Для каждого СтрокаСКодом Из лКодТекущегоЗапроса Цикл
			Если ЗаменяемыеИД <> Неопределено Тогда 
				лИдентификаторЗапроса = ЗаменяемыеИД.Получить(ИдентификаторЗапроса);
				Если лИдентификаторЗапроса = Неопределено Тогда 
					лИдентификаторЗапроса = ИдентификаторЗапроса;
				КонецЕсли;
			Иначе
				лИдентификаторЗапроса = ИдентификаторЗапроса;
			КонецЕсли;
			
			лПараметрыТекущегоКода = Новый Структура();
			лПараметрыТекущегоКода.Вставить("ИдентификаторЗапроса", лИдентификаторЗапроса);
			лПараметрыТекущегоКода.Вставить("ИдентификаторСтроки" , СтрокаСКодом.ИдентификаторСтроки);
			лПараметрыТекущегоКода.Вставить("Имя"                 , СтрокаСКодом.Имя);
			лПараметрыТекущегоКода.Вставить("Текст"               , СтрокаСКодом.Текст);			
			
			лМассивСтрокКода.Добавить(лПараметрыТекущегоКода);
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат лМассивСтрокКода

КонецФункции // ПолучитьИсполняемыйКодДляJSON()

&НаКлиенте
Функция ПолучитьПараметрыЗапросовДляJSON(ПараметрыЗапросов, МассивИдентификаторовЗапросов, ЗаменяемыеИД) Экспорт

	лМассивПараметров = Новый Массив;
	
	Если МассивИдентификаторовЗапросов.Найти("") = Неопределено Тогда 
		// Добавляем пустой идентификатор - признак глобального параметра
		МассивИдентификаторовЗапросов.Добавить("");
	КонецЕсли;
	
	// добавляем локальные параметры
	Для Каждого ИдентификаторЗапроса Из МассивИдентификаторовЗапросов Цикл
		лПараметрыТекущегоЗапроса = ПараметрыЗапросов.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", ИдентификаторЗапроса));
		Для каждого ПараметрТекущегоЗапроса Из лПараметрыТекущегоЗапроса Цикл
			Если ЗаменяемыеИД <> Неопределено Тогда 
				лИдентификаторЗапроса = ЗаменяемыеИД.Получить(ИдентификаторЗапроса);
				Если лИдентификаторЗапроса = Неопределено Тогда 
					лИдентификаторЗапроса = ИдентификаторЗапроса;
				КонецЕсли;
			Иначе
				лИдентификаторЗапроса = ИдентификаторЗапроса;
			КонецЕсли;
			
			лПараметрыТекущегоЗапроса = Новый Структура();
			лПараметрыТекущегоЗапроса.Вставить("ИдентификаторЗапроса", лИдентификаторЗапроса);
			лПараметрыТекущегоЗапроса.Вставить("ИдентификаторСтроки" , ПараметрТекущегоЗапроса.ИдентификаторСтроки);
			лПараметрыТекущегоЗапроса.Вставить("Имя"                 , ПараметрТекущегоЗапроса.Имя);
			лПараметрыТекущегоЗапроса.Вставить("Значение"            , ПараметрТекущегоЗапроса.Значение);			
			
			лМассивПараметров.Добавить(лПараметрыТекущегоЗапроса);
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат лМассивПараметров
	
КонецФункции // получитьПараметрыЗапросовДляJSON()

&НаКлиенте
Функция ПолучитьЗапросыВJSON(ДеревоЗапросов, ПараметрыЗапросов, ИсполняемыйКод, ИмяЗапроса, Локально, ВыгружатьТолькоИзмененные, Знач СтрокаСЗапросом)
	
	лПодменитьИмяКорневогоЗапроса = НЕ Локально И (СтрокаСЗапросом <> Неопределено);
	
	лМассивИДЗапросов = Новый Массив;              
	Если ВыгружатьТолькоИзмененные Тогда 
		лЗаменяемыеИД = Неопределено;
	Иначе
		лЗаменяемыеИД = Новый Соответствие;
	КонецЕсли;
	
	Если СтрокаСЗапросом = Неопределено Тогда 
		Корень = ДеревоЗапросов;
	Иначе
		лСтрокиДерева = Новый Массив;
		лСтрокиДерева.Добавить(СтрокаСЗапросом);
		Корень = Новый Структура("Строки", лСтрокиДерева);
	КонецЕсли;
	
	Данные = Новый Структура();
	Данные.Вставить("header"    , Новый Структура("version, date", гНазваниеОбработки(ТипОбработка, СеансовыеДанные), ТекущаяДата()));
	Данные.Вставить("querys"    , ПолучитьСтруктуруЗапросовДляJSONРекурсивно(Корень, лМассивИДЗапросов, ВыгружатьТолькоИзмененные, Неопределено, лЗаменяемыеИД, ?(лПодменитьИмяКорневогоЗапроса, ИмяЗапроса, Неопределено)));
	Данные.Вставить("parameters", ПолучитьПараметрыЗапросовДляJSON(ПараметрыЗапросов, лМассивИДЗапросов, лЗаменяемыеИД));
	Данные.Вставить("codes"     , ПолучитьИсполняемыйКодДляJSON(ИсполняемыйКод, лМассивИДЗапросов, лЗаменяемыеИД));
	
	Если ВыгружатьТолькоИзмененные Тогда 
		Данные.Вставить("querysToDel", СписокИзмененныхСтрок);
		Данные.Вставить("querysSort" , ПолучитьСтруктуруЗапросовДляJSONРекурсивно(Корень, лМассивИДЗапросов, Ложь, "Идентификатор", Неопределено, Неопределено));
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	Если Не Локально Тогда 
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(,,,,,,Истина)); // экранируем одинарные кавычки
	Иначе
		ЗаписьJSON.ОткрытьФайл(ИмяЗапроса);
	КонецЕсли;
	
	ЗаписатьJSON(ЗаписьJSON, Данные, Новый НастройкиСериализацииJSON);
	
	Возврат ЗаписьJSON;
	
КонецФункции // ПолучитьЗапросыВJSON()

&НаКлиенте
Процедура ДобавитьПараметрыИзСтруктурыJSON(parameters, лЗаменяемыеИД = Неопределено)
	
	Для каждого лПараметр Из parameters Цикл
		
		лНоваяСтрока = ПараметрыЗапросов.Добавить();
		ЗаполнитьЗначенияСвойств(лНоваяСтрока, лПараметр);
		
		Если лЗаменяемыеИД <> Неопределено Тогда 
			лНовыйИд = лЗаменяемыеИД.Получить(лНоваяСтрока.ИдентификаторЗапроса);
			Если лНовыйИд <> Неопределено Тогда 
				лНоваяСтрока.ИдентификаторЗапроса = лНовыйИд;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(лНоваяСтрока.ИдентификаторСтроки) Тогда 
			лНоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор // #рефакторинг необходимо понять откуда приходит пустой Ид
		КонецЕсли;			
		
	КонецЦикла; 
КонецПроцедуры // ДобавитьПараметрыИзСтруктурыJSON()

&НаКлиенте
Процедура ДобавитьКодИзСтруктурыJSON(codes, лЗаменяемыеИД = Неопределено)
	Для каждого лСтрокаСкодом Из codes Цикл
		
		лНоваяСтрока = ИсполняемыйКод.Добавить();
		ЗаполнитьЗначенияСвойств(лНоваяСтрока, лСтрокаСкодом);
		
		Если лЗаменяемыеИД <> Неопределено Тогда 
			лНовыйИд = лЗаменяемыеИД.Получить(лНоваяСтрока.ИдентификаторЗапроса);
			Если лНовыйИд <> Неопределено Тогда 
				лНоваяСтрока.ИдентификаторЗапроса = лНовыйИд;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(лНоваяСтрока.ИдентификаторСтроки) Тогда 
			лНоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор // #рефакторинг необходимо понять откуда приходит пустой Ид
		КонецЕсли;			
		
	КонецЦикла; 
КонецПроцедуры // ДобавитьКодИзСтруктурыJSON()

&НаКлиенте
Процедура ДобавитьВеткуДереваЗапросов(Данные, Родитель)
	
	лЗаменяемыеИД = Новый Соответствие;
	// читаем запросы
	лНоваяВетка = ПрочитатьЗапросыИзФайлаJSONРекурсивно(Данные.querys, Родитель, лЗаменяемыеИД);
	
	ДобавитьПараметрыИзСтруктурыJSON(Данные.parameters, лЗаменяемыеИД);
	ДобавитьКодИзСтруктурыJSON(Данные.codes, лЗаменяемыеИД);
	
	Если лНоваяВетка <> Неопределено Тогда 
		Элементы.ДеревоЗапросов.ТекущаяСтрока = ?(ТипЗнч(Родитель) = Тип("ДанныеФормыЭлементДерева"), лНоваяВетка.ПолучитьРодителя().ПолучитьИдентификатор(), лНоваяВетка.ПолучитьИдентификатор());			
		Модифицированность = Истина;
	КонецЕсли;
		
КонецПроцедуры // ДобавитьВеткуДереваЗапросов()

&НаКлиенте
Процедура ВыполнитьДействияПриЗакрытииФормы()

	// +++ сохранение настроек
	настройки = Новый Структура;
	
	настройки.Вставить(СвойстваРеквизитаРезультатЗапроса.ИмяЭлементаРодителя, Элементы[СвойстваРеквизитаРезультатЗапроса.ИмяЭлементаРодителя].Видимость);
	
	настройки.Вставить("ДеревоЗапросовВидимость"     , Элементы.ДеревоЗапросов.Видимость);
	настройки.Вставить("ГруппаПараметрыЗапросов"     , Элементы.ГруппаПараметрыЗапросов.Видимость);
	настройки.Вставить("ГруппаДанныеЗапроса"         , Элементы.ГруппаДанныеЗапроса.Видимость);
	настройки.Вставить("ИдентификаторТекущегоЗапроса", Элементы.ДеревоЗапросов.ТекущаяСтрока);
	настройки.Вставить("СохранитьПередВыполнением"   , мСохранитьПередВыполнением);
	
	Если ЗначениеЗаполнено(ИмяФайлаСЗапросом) Тогда 
		настройки.Вставить("ИмяФайлаСЗапросом", ИмяФайлаСЗапросом);
	КонецЕсли;
	
	СохранитьНастройки(настройки);
	// --- сохранение настроек
	
	мВыполняетсяЗакрытие = Истина;
	
	Если ЗначениеЗаполнено(СеансовыеДанные.ПутьККартинкам) Тогда 
		Попытка
			УдалитьФайлы(СеансовыеДанные.ПутьККартинкам);
		Исключение
		КонецПопытки; 
		Попытка
			УдалитьФайлыНаСервере(СеансовыеДанные.ПутьККартинкам);
		Исключение
		КонецПопытки; 
	КонецЕсли;

	Закрыть();
	
КонецПроцедуры // ВыполнитьДействияПриЗакрытииФормы()
 
&НаСервереБезКонтекста
Функция ОбъектОбработки(ТипОбработка, СеансовыеДанные)
	Результат = Новый (ЗначениеИзСтрокиВнутр(ТипОбработка));
	Результат.гСеансовыеДанные = СеансовыеДанные;
	Возврат Результат;
КонецФункции

//&НаСервереБезКонтекста
// функция ПолучитьКартинкуНаСервере(ИмяКартинки, ТипОбработка, СеансовыеДанные)
//	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).ПолучитьКартинку(ИмяКартинки);
// конецФункции // ПолучитьКартинкуНаСервере()

//&НаКлиенте
// функция ПроверитьМодифицированностьНеАсинхронно(Операция)
//	Если Модифицированность Тогда 
//		ТекстВопроса = НСтр("ru = 'Сохранить изменения?'");
//		ПоказатьВопрос(Новый ОписаниеОповещения("СохранитьИзмененияЗавершение", Вычислить(ЭтотОбъектФорма), Операция), ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,,, Операция);		
//		Возврат Ложь;
//	КонецЕсли;
//	Возврат Истина 
// конецФункции

&НаКлиенте
Функция ПроверитьМодифицированность(Операция)
	
	лОповещение = Новый ОписаниеОповещения("ПослеВопросаСохранитьИзмененияПродолжение", ЭтаФорма, Новый Структура("Операция", Операция));
	
	Если Модифицированность Тогда
		ПоказатьВопрос(лОповещение, НСтр("ru = 'Данные изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	Иначе		
		ВыполнитьОбработкуОповещения(лОповещение, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецФункции // ПроверитьМодифицированность()

&НаКлиенте
Функция ПолучитьРежимДиалогаПоОперацииРаботыСФайлами(Операция)
	Если Операция = мОперацииСЗапросами.Открыть Тогда 
		Возврат РежимДиалогаВыбораФайла.Открытие
	Иначе
		Возврат РежимДиалогаВыбораФайла.Сохранение
	КонецЕсли;
КонецФункции // ПолучитьРежимДиалогаПоОперацииРаботыСФайлами()

&НаСервереБезКонтекста
Функция ПолучитьПустоеЗначениеТипаНаСервере(Тип)
	
	Если НРег(Тип) = "граница" ИЛИ НРег(Тип) = "моментвремени" Тогда 
		лПараметры    = Новый Массив(1);
		лПараметры[0] = ТекущаяДата();
	Иначе
		лПараметры = Неопределено
	КонецЕсли;
	
	Возврат ЗначениеВСтрокуВнутр(Вычислить("Новый (Тип(""" + Тип + """)" + ?(лПараметры = Неопределено, "", ", лПараметры")+ ")"));
	
КонецФункции // ПолучитьПустоеЗначениеТипаНаСервере()

// Возвращает строковое представление типа.
// Например, для ссылки справочника возвращает "CatalogRef.ИмяСправочника".
//
&НаСервереБезКонтекста
Функция ТипСтрока(Значение, ТипОбработка, СеансовыеДанные, Типы)
	// #рефакторинг: перенести в модуль обработки
	
	СписокДобавленныхТипов = Новый СписокЗначений;
	ОбъектОбработки(ТипОбработка, СеансовыеДанные).гСформироватьСписокТипов(Типы, СписокДобавленныхТипов);
	
	НайденныйТип = СписокДобавленныхТипов.НайтиПоЗначению(Значение);
	
	Если НайденныйТип = Неопределено Тогда 
		Возврат XMLТип(Тип(Значение)).ИмяТипа;
	Иначе
		Возврат НайденныйТип.Представление
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦветСтиляНаСервере(ИмяЦвета)
	Возврат ЦветаСтиля[ИмяЦвета]
КонецФункции

Функция гНажатиеНаКнопкуВыборМенюИнформацияНаСервере(ИмяКнопки, ТолькоВернутьКоманду)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гНажатиеНаКнопкуВыборМенюИнформация(ИмяКнопки, ТолькоВернутьКоманду);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТаблицуРезультатаНаСервере(АдресРезультата)
	Возврат ПолучитьИзВременногоХранилища(АдресРезультата);
КонецФункции // ПолучитьТаблицуРезультатаНаСервере()
 
&НаСервереБезКонтекста
Функция ПолучитьКоличествоКолонокРезультатаНаСервере(АдресРезультата)
	Возврат ПолучитьТаблицуРезультатаНаСервере(АдресРезультата).Колонки.Количество();
КонецФункции // ПолучитьКоличествоКолонокРезультатаНаСервере()

&НаСервереБезКонтекста
Функция ПолучитьКолонкиРезультатаНаСервере(АдресРезультата)
	
	лКолонки = ПолучитьТаблицуРезультатаНаСервере(АдресРезультата).Колонки;
	
	лСписокКолонок = Новый СписокЗначений;
	Для каждого лКолонка Из лКолонки Цикл
		лСписокКолонок.Добавить(лКолонка.Имя, ?(лКолонка.Заголовок = "", лКолонка.Имя, лКолонка.Заголовок));
	КонецЦикла; 
	
	Возврат лСписокКолонок;	
	
КонецФункции // ПолучитьКолонкиРезультатаНаСервере()

Функция ТекстВТаблицуНаСервере(МассивКолонокСтрокиТаблицы, Текст, ДобавлятьКолонки, Разделитель, ЗагружатьВТаблицуРезультата = Истина)
	
	Если ЗагружатьВТаблицуРезультата Тогда 
		ТаблицаЗначений = ПолучитьТаблицуРезультатаНаСервере(АдресРезультата);
	Иначе
		ТаблицаЗначений = Новый ТаблицаЗначений;
	КонецЕсли;
	лКоличествоКолонокЭлементаТЗ = ТаблицаЗначений.Колонки.Количество();	
	
	Если ДобавлятьКолонки Тогда 
		Для Сч = лКоличествоКолонокЭлементаТЗ По МассивКолонокСтрокиТаблицы.Количество() - 1 Цикл
			НоваяКолонка     = ТаблицаЗначений.Колонки.Добавить();
			НоваяКолонка.Имя = "НоваяКолонка__" + Формат(Сч, "ЧН=; ЧГ=0");
		КонецЦикла; 
	КонецЕсли;

	лКоличествоКолонокЭлементаТЗ = ТаблицаЗначений.Колонки.Количество();
	
	Для сч = 1 По Текст.КоличествоСтрок() Цикл
		лМассивКолонокСтрокиТаблицы = гРазложитьСтрокуВМассивПодстрок(ТипОбработка, СеансовыеДанные, Текст.ПолучитьСтроку(сч), Разделитель);
		лКоличествоЗаполняемыхКолонок = Мин(лКоличествоКолонокЭлементаТЗ, лМассивКолонокСтрокиТаблицы.Количество());
		НоваяСтрока = ТаблицаЗначений.Добавить();
		Для Сч1 = 0 По лКоличествоЗаполняемыхКолонок - 1 Цикл
			НоваяСтрока[Сч1] = лМассивКолонокСтрокиТаблицы[Сч1];
		КонецЦикла; 
	КонецЦикла; 
	
	лАдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаЗначений, УникальныйИдентификатор);
	Если ЗагружатьВТаблицуРезультата Тогда 
		АдресРезультата = лАдресТаблицы;
		СоздатьРеквизитCРезультатомЗапроса(АдресРезультата);	
	Иначе
		Возврат лАдресТаблицы;
	КонецЕсли;
	
КонецФункции // ТекстВТаблицуНаСервере()

Функция ПоместитьРезультатВХранилищеНаСервере(ТаблицаЗапроса)
	Возврат ПоместитьВоВременноеХранилище(ТаблицаЗапроса.Выгрузить(), УникальныйИдентификатор);
КонецФункции // ПоместитьРезультатВХранилищеНаСервере()

#КонецОбласти 



#Область Настройки

// Процедура - Восстанавливает настройки из хранилища общих настроек
&НаСервереБезКонтекста
Функция ВосстановитьНастройкиНаСервере()

	ключОбъекта      = "Обработка.ИмяОбработки";
	ключНастроек     = "Обработка.ИмяОбработки.ЗначенияПоУмолчанию";
	описаниеНастроек = "Описание настройки";
	имяПользователя  = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	
	Результат = ХранилищеОбщихНастроек.Загрузить(ключОбъекта, ключНастроек, описаниеНастроек, имяПользователя);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ВосстановитьНастройкиНаСервере()

// Процедура - Сохраняет настройки в хранилище общих настроек
&НаСервереБезКонтекста
Процедура СохранитьНастройки(Настройки)
	
	ключОбъекта      = "Обработка.ИмяОбработки";
	ключНастроек     = "Обработка.ИмяОбработки.ЗначенияПоУмолчанию";
	описаниеНастроек = "Описание настройки";
	имяПользователя  = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	
	ХранилищеОбщихНастроек.Сохранить(ключОбъекта, ключНастроек, настройки, описаниеНастроек, имяПользователя);
	
КонецПроцедуры // СохранитьНастройки()

#КонецОбласти

#Область Прочие

&НаКлиенте
Процедура ВыбратьКолонкуДляДействияСРезультатомЗапроса(ПараметрыДействия)
	
	АдресРезультата = ПоместитьРезультатВХранилищеНаСервере(РезультатЗапроса());
	лСписокКолонок  = ПолучитьКолонкиРезультатаНаСервере(АдресРезультата);
	лПараметры      = Новый Структура("Действие, ПараметрыДействия", Константы().ДействияСРезультатомЗапроса, ПараметрыДействия);
	лОповещение     = Новый ОписаниеОповещения("ЗавершениеВыбораКолонки", Вычислить(ЭтотОбъектФорма), лПараметры);
	
	лСписокКолонок.ПоказатьВыборЭлемента(лОповещение, "Выберите колонку для указания источника данных");
	
КонецПроцедуры // ВыбратьКолонкуДляДействияСРезультатомЗапроса()

&НаКлиенте
Процедура ОбработатьИзменениеДанныехОПодключении(ДанныеОПодключении);
	Если ДанныеОПодключении.email <> ИмяПользователяВОблаке Тогда 
		Если Не ЗначениеЗаполнено(ДанныеОПодключении.email) Тогда 
			ИмяФайлаСЗапросом = ""; 
		КонецЕсли;
		ИмяПользователяВОблаке = ДанныеОПодключении.email;
		ИдентификаторСессии    = ДанныеОПодключении.ИдентификаторСессии;

		ОбновитьЗаголовок();
	КонецЕсли;
КонецПроцедуры // ОбработатьИзменениеДанныехОПодключении()

&НаСервереБезКонтекста
Функция гСохранитьФайлСЗапросомВОблаке(ТипОбработка, СеансовыеДанные, соединение, идВОблаке, имя, обновлятьВсеЗаписи, данные, НастройкиПрокси = Неопределено);
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гСохранитьФайлСЗапросомВОблаке(соединение, идВОблаке, имя, обновлятьВсеЗаписи, данные, НастройкиПрокси);
КонецФункции // гСохранитьФайлСЗапросомВОблаке()

&НаСервереБезКонтекста
Функция гСохранитьЗапросыВОблаке(ТипОбработка, СеансовыеДанные, соединение, идПакета, идРодительскогоЗапроса, ИдЗапроса, имя, включатьПодчиненныеЗапросы, данные, НастройкиПрокси = Неопределено);
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гСохранитьЗапросыВОблаке(соединение, идПакета, идРодительскогоЗапроса, ИдЗапроса, имя, включатьПодчиненныеЗапросы, данные, НастройкиПрокси);
КонецФункции // гСохранитьЗапросыВОблаке()

&НаКлиенте
Функция ЗагрузитьЗапросыИзОблака(идПакетаВОблаке, идЗапроса, идСтрокиКода, включатьПодчиненные, Родитель)
	
	Если Не ЗначениеЗаполнено(ИдентификаторСессии) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	лРезультат = гПолучитьЗапросыИзОблака(ТипОбработка, СеансовыеДанные, ИдентификаторСессии, идПакетаВОблаке, идЗапроса, идСтрокиКода, включатьПодчиненные);
	
	Если лРезультат.Статус = "OK" Тогда 
		ДобавитьВеткуДереваЗапросов(лРезультат.Данные, Родитель);
	Иначе
		Сообщить("Ошибка добавления запроса: " + лРезультат.ТекстОшибки, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;	
	
КонецФункции

&НаКлиенте
Функция ПолучитьРодителяТекущейСтроки(ИдентификаторТекущейСтроки)
	
	Возврат ДеревоЗапросов.НайтиПоИдентификатору(ИдентификаторТекущейСтроки).ПолучитьРодителя();
			
КонецФункции // ПолучитьРодителяТекущейСтроки()

&НаСервереБезКонтекста
Функция гПолучитьЗапросыИзОблака(ТипОбработка, СеансовыеДанные, ИдентификаторСессии, идПакетаВОблаке, идЗапроса, идСтрокиКода, включатьПодчиненные);
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гПолучитьЗапросыИзОблака(ИдентификаторСессии, идПакетаВОблаке, идЗапроса, идСтрокиКода, включатьПодчиненные);
КонецФункции // гПолучитьЗапросыИзОблака()

&НаСервереБезКонтекста
Функция гПолучитьИмяПодключенногоПользователяВОблаке(ТипОбработка, СеансовыеДанные, ИдентификаторСессии)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гПолучитьИмяПодключенногоПользователяВОблаке(ИдентификаторСессии);
КонецФункции // гПолучитьИмяПодключенногоПользователяВОблаке()

&НаСервереБезКонтекста
Функция гВосстановитьИдентификаторСессииConsqueryCloud(ТипОбработка, СеансовыеДанные) Экспорт 
	
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гВосстановитьИдентификаторСессииConsqueryCloud();
	
КонецФункции // ВосстановитьИдентификаторСессииConsqueryCloud()

&НаКлиенте
Процедура УстановитьИмяПользователяВОблаке()
	
	Если Не ЗначениеЗаполнено(ИдентификаторСессии) Тогда 
		Возврат;
	КонецЕсли;
	
	лИмяПользователяВОблаке = ИмяПользователяВОблаке;
	
	Если ЗначениеЗаполнено(ИдентификаторСессии) Тогда 
		лРезультат = гПолучитьИмяПодключенногоПользователяВОблаке(ТипОбработка, СеансовыеДанные, ИдентификаторСессии);
		Если лРезультат.Статус = "OK" Тогда 
			ИмяПользователяВОблаке = лРезультат.ИмяПользователя;
		Иначе
			ИмяПользователяВОблаке = Неопределено;
		КонецЕсли;
	Иначе
		ИмяПользователяВОблаке = Неопределено;
	КонецЕсли;
	
	Если лИмяПользователяВОблаке <> ИмяПользователяВОблаке Тогда 
		ОбновитьЗаголовок();
	КонецЕсли;
	
КонецПроцедуры // УстановитьИмяПользователяВОблаке()

&НаКлиенте
Процедура ПодключенияКОблакуДействие()
	
	ПараметрыОткрытияформы = Новый Структура();
	ПараметрыОткрытияформы.Вставить("email"              , ИмяПользователяВОблаке);
	ПараметрыОткрытияформы.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	
	ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов.Форма.ФормаУпрПодключениеКОблаку",
		ПараметрыОткрытияформы, 
		ЭтаФорма,,,, 
		Новый ОписаниеОповещения("ПодключенияКОблакуДействиеЗавершение", Вычислить(ЭтотОбъектФорма)), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ПодключенияКОблакуДействие()

&НаКлиенте
Процедура ДобавитьЗапросИзОблакаДействие()
	
	Если Не ЗначениеЗаполнено(ИдентификаторСессии) Тогда 
		Оповестить("НеобходимоПереподключиться", , ЭтаФорма);
		Возврат;
	Иначе					
		
		ПараметрыОткрытияформы = Новый Структура();
		ПараметрыОткрытияформы.Вставить("Режим"              , мОперацииСЗапросами.ЗагрузитьИзОблака);
		ПараметрыОткрытияформы.Вставить("Тип"                , Неопределено);
		ПараметрыОткрытияформы.Вставить("ИмяЭлементаИзОблака", Неопределено);
		
		ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов.Форма.ФормаУпрДиалогВыбораИсточникаДанныхИзОблака", 
			ПараметрыОткрытияформы, 
			ЭтаФорма,,,, 
			Новый ОписаниеОповещения("ДобавитьЗапросИзОблакаПродолжение", Вычислить(ЭтотОбъектФорма)), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЗапросИзОблакаДействие()

&НаСервереБезКонтекста
Функция ПолучитьТипСтрокой(ТипЗначения)
	
	Если ТипЗначения = Тип("ТаблицаЗначений") Тогда 
		Возврат Строка("ТаблицаЗначений")
	ИначеЕсли ТипЗначения = Тип("МоментВремени") Тогда 
		Возврат Строка("МоментВремени")
	ИначеЕсли ТипЗначения = Тип("СписокЗначений") Тогда 
		Возврат Строка("СписокЗначений")
	Иначе
		Возврат Строка(ТипЗначения)
	КонецЕсли;

КонецФункции // ПолучитьТипСтрокой()
 
&НаСервереБезКонтекста
Функция гПреобразоватьВПравильноеНазваниеНаСервере(ТипОбработка, СеансовыеДанные, ИсходноеНазвание)
	Возврат ОбъектОбработки(ТипОбработка, СеансовыеДанные).гПреобразоватьВПравильноеНазвание(ИсходноеНазвание);
КонецФункции // гПреобразоватьВПравильноеНазвание()

&НаКлиенте
Функция ПодготовитьДанныеИзБуфера()

	лДанныеБуфера = Новый Структура();
	лДанныеБуфера.Вставить("Текст"            , Неопределено);
	лДанныеБуфера.Вставить("КоличествоКолонок", 0);
	лДанныеБуфера.Вставить("МассивКолонок"    , 0);	
	лДанныеБуфера.Вставить("Разделитель"      , Символы.Таб);
	
	лhtmlfile = Новый COMОбъект("htmlfile"); лСтрокаБуфера = лhtmlfile.parentWindow.clipboardData.getData("text");
	
	лТекст =  Новый ТекстовыйДокумент;	
	лТекст.УстановитьТекст(лСтрокаБуфера);
	
	лКоличествоСтрок = лТекст.КоличествоСтрок();
	Если лКоличествоСтрок = 0 Тогда 
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПоказатьПредупреждениеЗавершение", ЭтаФорма), "Буфер пуст.");
	Иначе
		лДанныеБуфера.Текст = лТекст;
		
		лМассивКолонокИзБуфера = гРазложитьСтрокуВМассивПодстрок(ТипОбработка, СеансовыеДанные, лТекст.ПолучитьСтроку(1), лДанныеБуфера.Разделитель);
		
		лДанныеБуфера.КоличествоКолонок = лМассивКолонокИзБуфера.Количество();
		
		лМассивКолонок = Новый Массив;
		Для Сч = 0 По лДанныеБуфера.КоличествоКолонок - 1 Цикл
			лТекущееИмяКолонки = гПреобразоватьВПравильноеНазваниеНаСервере(ТипОбработка, СеансовыеДанные, лМассивКолонокИзБуфера[Сч]);
			Если лТекущееИмяКолонки = "" Тогда
				лТекущееИмяКолонки = ПолучитьСледующееУникальноеИмя("Поле", лМассивКолонок, "Значение");
			КонецЕсли;
			лМассивКолонок.Добавить(лТекущееИмяКолонки);
		КонецЦикла; 
		лДанныеБуфера.МассивКолонок = лМассивКолонок;
	КонецЕсли;
	
	Возврат лДанныеБуфера;

КонецФункции // ПодготовитьДанныеИзБуфера()

&НаКлиенте
Процедура ОбработкаДействияСоздатьПараметрИзБуфера()

	лДанныеБуфера = ПодготовитьДанныеИзБуфера();
	Если лДанныеБуфера.КоличествоКолонок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	лСписокКолонок = Новый СписокЗначений;
	лСписокКолонок.ЗагрузитьЗначения(лДанныеБуфера.МассивКолонок);
	лСписокКолонок.Вставить(0, Константы().ВсеКолонки);
	
	лПараметры = Новый Структура;
	лПараметры.Вставить("Действие", Константы().СоздатьПараметрИзБуфера);
	лПараметры.Вставить("Данные"  , лДанныеБуфера);
	
	лОповещение = Новый ОписаниеОповещения("ЗавершениеВыбораКолонки", ЭтотОбъект, лПараметры);
	
	Если ВерсияПриложенияНаСервере() = "8.3.15.1700" Тогда 
		ВыполнитьОбработкуОповещения(лОповещение, лСписокКолонок[0]);
		Возврат;
	КонецЕсли;
	
	лСписокКолонок.ПоказатьВыборЭлемента(лОповещение, "Выберите колонку для загрузки в таблицу значений");
	
КонецПроцедуры // ОбработкаДействияСоздатьПараметрИзБуфера()

&НаКлиенте
Процедура ОбработкаДействияВыгрузитьВПараметр()

	АдресРезультата = ПоместитьРезультатВХранилищеНаСервере(РезультатЗапроса());
	
	лСписокКолонок = ПолучитьКолонкиРезультатаНаСервере(АдресРезультата);
	лСписокКолонок.Вставить(0, Константы().ВсеКолонки);
	
	лПараметры  = Новый Структура("Действие", Константы().ВыгрузитьТаблицуРезультатаВПараметр);
	лОповещение = Новый ОписаниеОповещения("ЗавершениеВыбораКолонки", Вычислить(ЭтотОбъектФорма), лПараметры);
	
	лСписокКолонок.ПоказатьВыборЭлемента(лОповещение, "Выберите колонку для загрузки в таблицу значений");
	
КонецПроцедуры // ОбработкаДействияВыгрузитьВПараметр()

Процедура ОбработкаДействияВыгрузитьВПараметрНаСервере(ИмяКолонки, Режим, ДополнительныеПараметры = Неопределено)

	лТипыКолонок            = Неопределено;
	лПропуститьПервуюСтроку = Неопределено;
	Если ДополнительныеПараметры <> Неопределено Тогда 
		ДополнительныеПараметры.Свойство("ТипыКолонок"           , лТипыКолонок);
		ДополнительныеПараметры.Свойство("ПропуститьПервуюСтроку", лПропуститьПервуюСтроку);
	КонецЕсли;
	
	// #заполнениепараметровзапроса 4
	лСтрокаСПараметром                = ПараметрыТекущегоЗапроса.Добавить();
	лСтрокаСПараметром.Имя            = "ДанныеИзБуфера_" + Формат(ТекущаяДата(), "ДФ=ггММддЧЧммсс");
	
	Если ИмяКолонки = Неопределено Тогда 
		лСтрокаСПараметром.Тип = "ТаблицаЗначений";
		лЗначение = Новый ТаблицаЗначений;
	Иначе
		лСтрокаСПараметром.Тип = "СписокЗначений";
		лЗначение = Новый СписокЗначений;
	КонецЕсли;
	
	Если Режим = "ИзТаблицыРезультата" Тогда 
		Если ИмяКолонки = Неопределено Тогда 
			лСтрокаСПараметром.Значение = ЗначениеВСтрокуВнутр(ПолучитьТаблицуРезультатаНаСервере(АдресРезультата));
		Иначе
			Для каждого СтрокаРезультата Из ПолучитьТаблицуРезультатаНаСервере(АдресРезультата) Цикл
				лЗначение.Добавить(СтрокаРезультата[ИмяКолонки]);
			КонецЦикла; 
			лСтрокаСПараметром.Значение = ЗначениеВСтрокуВнутр(лЗначение);
		КонецЕсли;
	ИначеЕсли Режим = "ИзБуфера" Тогда 
		
		Если ИмяКолонки = Неопределено Тогда 
			// формируем список колонок для таблицы - параметра
			Сч = 0;
			Для каждого лКолонкаТаблицыИзБуфера Из ДополнительныеПараметры.МассивКолонок Цикл
				
				Если ЗначениеЗаполнено(лКолонкаТаблицыИзБуфера) Тогда 
					лИмяКолонки = лКолонкаТаблицыИзБуфера;
				Иначе
					лИмяКолонки = ИмяНовогоПараметраСтруктуры("Поле", лЗначение.Колонки);
				КонецЕсли;
				
				Если лТипыКолонок <> Неопределено И лТипыКолонок[Сч] <> Неопределено Тогда 
					Массив = Новый Массив;
					Массив.Добавить(лТипыКолонок[Сч]);
					ОписаниеТиповС = Новый ОписаниеТипов(Массив);
					лЗначение.Колонки.Добавить(лИмяКолонки, ОписаниеТиповС);
				Иначе
					лЗначение.Колонки.Добавить(лИмяКолонки);
				КонецЕсли;
				
				Сч = Сч + 1;
				
			КонецЦикла; 
		Иначе
			// определяем колонку, из которой будем формировать массив значений для параметра
			лНомерКолонки = ДополнительныеПараметры.МассивКолонок.Найти(ИмяКолонки);
		КонецЕсли;
		
		// формируем значение - параметр
		лПерваяСрока = ?(лПропуститьПервуюСтроку = Истина, 2, 1);
		Для Сч = лПерваяСрока По ДополнительныеПараметры.Текст.КоличествоСтрок() Цикл
			
			лМассивКолонокСтрокиТаблицы = гРазложитьСтрокуВМассивПодстрок(ТипОбработка, 
				СеансовыеДанные, 
				ДополнительныеПараметры.Текст.ПолучитьСтроку(сч), 
				ДополнительныеПараметры.Разделитель);
			
			Если ИмяКолонки = Неопределено Тогда 
				
				лНоваяСтрока = лЗначение.Добавить();				
				
				лКоличествоКолонок = Мин(лМассивКолонокСтрокиТаблицы.Количество(), ДополнительныеПараметры.МассивКолонок.Количество());
					
				Сч1 = 0;
				Пока Сч1 < лКоличествоКолонок Цикл
					
					Если лТипыКолонок = Неопределено Тогда 
						лНоваяСтрока[Сч1] = лМассивКолонокСтрокиТаблицы[Сч1];
					Иначе
						лТекущийТипКолонки = лТипыКолонок[Сч1];
						Если лТекущийТипКолонки = Тип("Число") Тогда 
							лНоваяСтрока[Сч1] = СтрокаВЧисло(лМассивКолонокСтрокиТаблицы[Сч1]);
						ИначеЕсли лТекущийТипКолонки = Тип("Дата") Тогда 
							лНоваяСтрока[Сч1] = СтрокаВДату(лМассивКолонокСтрокиТаблицы[Сч1]);
						Иначе
							лНоваяСтрока[Сч1] = лМассивКолонокСтрокиТаблицы[Сч1]; // #рефакторинг вывести ошибку
						КонецЕсли;
					КонецЕсли;
					
					Сч1 = Сч1 + 1;
				КонецЦикла; 
			Иначе
				лЗначение.Добавить(лМассивКолонокСтрокиТаблицы[лНомерКолонки]);
			КонецЕсли;
		КонецЦикла; 
		лСтрокаСПараметром.Значение = ЗначениеВСтрокуВнутр(лЗначение);
	КонецЕсли;
	
	лСтрокаСПараметром.ЗначениеВФорме = ФормированиеПредставленияЗначения(лСтрокаСПараметром.Значение);
	
	ДанныеПоТипу = СписокТипов.НайтиПоЗначению(лСтрокаСПараметром.Тип); // простые типы
	
	лСтрокаСПараметром.ТипВФорме    = ДанныеПоТипу.Представление;
	лСтрокаСПараметром.КартинкаТипа = ДанныеПоТипу.Картинка;
	
КонецПроцедуры // ОбработкаДействияВыгрузитьВПараметрНаСервере()

&НаСервереБезКонтекста
Процедура ВыполнитьДействияСРезультатомЗапроса(АдресРезультата, ДополнительныеПараметры)
	
	лРезультатЗапроса = ПолучитьТаблицуРезультатаНаСервере(АдресРезультата);
	лДействие         = ДополнительныеПараметры.Действие;
	Для Каждого СтрокаРезультатаЗапроса ИЗ лРезультатЗапроса Цикл
		лОбъект = СтрокаРезультатаЗапроса[ДополнительныеПараметры.ИмяКолонки].ПолучитьОбъект();
		Если лДействие = Константы().УстановитьПометкуУдаления Тогда 
			лОбъект.УстановитьПометкуУдаления(ДополнительныеПараметры.ПометкаУдаления);
		ИначеЕсли лДействие = Константы().Провести Тогда 
			лОбъект.Записать(?(ДополнительныеПараметры.Провести, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.ОтменаПроведения));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьДействияСРезультатомЗапроса()

&НаКлиенте
Процедура ОбработкаДействияВыполнитьКод(ИдентификаторКода = Неопределено) Экспорт
 	
	лИдентификаторТекущегоЗапроса = ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока).Идентификатор;
	
	//АдресРезультата = ПоместитьРезультатВХранилищеНаСервере(РезультатЗапроса());
	
	ПараметрыОткрытияформы = Новый Структура();
	ПараметрыОткрытияформы.Вставить("АдресРезультата"          , АдресРезультата);
	ПараметрыОткрытияформы.Вставить("ИсполняемыйКод"           , ПолучитьКодДляЗапроса(лИдентификаторТекущегоЗапроса));
	ПараметрыОткрытияформы.Вставить("СвойстваТаблицыРезультата", СвойстваРеквизитаРезультатЗапроса);
	ПараметрыОткрытияформы.Вставить("ИдентификаторЗапроса"     , лИдентификаторТекущегоЗапроса);
	ПараметрыОткрытияформы.Вставить("ТекущаяСтрокаПриОткрытии" , ИдентификаторКода);
	ПараметрыОткрытияформы.Вставить("ЭтотОбъектФорма"          , ЭтотОбъектФорма);
	ПараметрыОткрытияформы.Вставить("ТекстТекущегоЗапроса"     , ПолучитьУстановитьТекущийТекстЗапроса().ТекстЗапроса);
	
	ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов.Форма.ФормаУпрИсполняемыйКод", 
		ПараметрыОткрытияформы, 
		ЭтаФорма,,,, 
		Новый ОписаниеОповещения("ОбработкаВыполненияКода", Вычислить(ЭтотОбъектФорма)), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры // ОбработкаДействияВыполнитьКод()

&НаКлиенте
Процедура ОбработкаДействияПолучениеЗапросаИзКода1СПолучитьЗапрос(ПростаяОбработкаТекста)
	
	лhtmlfile = Новый COMОбъект("htmlfile"); лСтрокаБуфера = лhtmlfile.parentWindow.clipboardData.getData("text");
	
	Если СокрЛП(лСтрокаБуфера) = "" Тогда 
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПоказатьПредупреждениеЗавершение", ЭтаФорма), "Буфер пуст.");
		Возврат;
	КонецЕсли;
	
	ПолучитьУстановитьТекущийТекстЗапроса(ЗаполнитьПараметрыНаФормеИПолучитьТекстЗапросаИзКода1сНаСервере(ТипОбработка, СеансовыеДанные, лСтрокаБуфера, ПростаяОбработкаТекста));
	
КонецПроцедуры // ОбработкаДействияПолучениеЗапросаИзКода1СПолучитьЗапрос()

&НаКлиенте
Процедура ОбработкаДействияПолучениеКода1СПоЗапросуПолучитьКод1С(Режим)
	
	ТекстВопроса  = НСтр("ru = 'Скопировать в буфер?'");
	КнопкиВопроса = РежимДиалогаВопрос.ДаНет;
	ПараметрыВопроса = Новый Структура;
	ПараметрыВопроса.Вставить("ИдВопроса", "СкопироватьСтрокуВБуфер");
	ПараметрыВопроса.Вставить("Строка"   , гСформироватьКодЗапросаДля1С(ТипОбработка, СеансовыеДанные, ПолучитьУстановитьТекущийТекстЗапроса().ТекстЗапроса, ПараметрыВСоответствие(), Режим));
	ПоказатьВопрос(Новый ОписаниеОповещения("ВопросЗавершение", ЭтаФорма, ПараметрыВопроса), ТекстВопроса, КнопкиВопроса, 10, КодВозвратаДиалога.Нет, "Вопрос", КодВозвратаДиалога.Нет);

КонецПроцедуры // ОбработкаДействияПолучениеКода1СПоЗапросуПолучитьКод1С()
	
&НаКлиенте
Процедура ОбработкаДействияПоказатьСекциюСЗапросами(Видимость)
	Элементы.ГруппаДанныеЗапроса.Видимость = Видимость;
	Элементы.ПоказатьПараметры.Доступность = Видимость;
	ОформитьКнопкуПоказатьСекциюСЗапросами(Видимость);
КонецПроцедуры // ОбработкаДействияПоказатьСекциюСЗапросами()

&НаКлиенте
Функция ПолучитьКодДляЗапроса(ИдентификаторЗапроса)
	лСтрокиСИсполняемымКодом = ИсполняемыйКод.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", ИдентификаторЗапроса));
	лРезультат = Новый Массив;
	Для каждого лСтрокСИсполняемымКодом Из лСтрокиСИсполняемымКодом Цикл
		лРезультат.Добавить(Новый Структура("Имя, Текст, Идентификатор", лСтрокСИсполняемымКодом.Имя, лСтрокСИсполняемымКодом.Текст, лСтрокСИсполняемымКодом.ИдентификаторСтроки));
	КонецЦикла; 
	
	Возврат лРезультат
КонецФункции // ПолучитьКодДляЗапроса()

// Возвращает представление значения.
//
// Параметры:
//	Значение - передаваемое значение.
//
&НаСервереБезКонтекста
Функция ФормированиеПредставленияЗначения(Знач ЗначениеИсходное) Экспорт
	
	ВозврЗнач = "";
	
	Если ТипЗнч(ЗначениеИсходное) = Тип("Строка") Тогда 
		
		Если ЗначениеИсходное = "" Тогда 
			Возврат ЗначениеИсходное
		Иначе
			Попытка
				Значение = ЗначениеИзСтрокиВнутр(ЗначениеИсходное);
			Исключение
				Возврат ""
			КонецПопытки; 
		КонецЕсли;
	Иначе
		Значение = ЗначениеИсходное
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда 
		ВыводнаяСтрока = "Таблица: строк = %КоличествоСтрок%, колонок = %КоличествоКолонок%";
		ВыводнаяСтрока = СтрЗаменить(ВыводнаяСтрока, "%КоличествоСтрок%", Строка(Значение.Количество()));
		ВыводнаяСтрока = СтрЗаменить(ВыводнаяСтрока, "%КоличествоКолонок%", Строка(Значение.Колонки.Количество()));
		ВозврЗнач = ВыводнаяСтрока;
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда 
		ВыводнаяСтрока = "Массив: размер = %КоличествоСтрок%";
		ВыводнаяСтрока = СтрЗаменить(ВыводнаяСтрока, "%КоличествоСтрок%", Строка(Значение.Количество()));
		ВозврЗнач = ВыводнаяСтрока;
	ИначеЕсли ТипЗнч(Значение) = Тип("МоментВремени") Тогда 
		ВозврЗнач = Строка(Значение.Дата) + "; " + Строка(Значение.Ссылка);
	ИначеЕсли ТипЗнч(Значение) = Тип("Граница") Тогда 
		ВозврЗнач = Строка(Значение.Значение) + "; " + Строка(Значение.ВидГраницы);
	Иначе
		ВозврЗнач = Значение
	КонецЕсли;	
	
	Возврат ВозврЗнач;
КонецФункции // ФормированиеПредставленияЗначения()

&НаКлиенте
Процедура СохранитьЗапросыВОблако(Режим, СохранитьТекущийЗапрос = Ложь)
	
	СохранитьЗначенияПоЗапросу(мТекущаяСтрокаДереваЗапросов);
	
	лТекущийЗапрос       = ДеревоЗапросов.НайтиПоИдентификатору(мТекущаяСтрокаДереваЗапросов);
	лИмяЭлементаИзОблака = ИмяФайлаСЗапросом;
	
	Если Не СохранитьТекущийЗапрос Тогда 
		Если ПустаяСтрока(лИмяЭлементаИзОблака) Тогда 
			лИмяЭлементаИзОблака = "Запросы от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ЧЧ_ММ_сс'");
		Иначе
			лИмяЭлементаИзОблака = СтрЗаменить(лИмяЭлементаИзОблака, ".sel", "");
		КонецЕсли;
		лТипДиалога =  мТипыИсточниковДанных.Пакет;
	Иначе
		лИмяЭлементаИзОблака = лТекущийЗапрос.Имя;
		лТипДиалога          = мТипыИсточниковДанных.Запрос;
	КонецЕсли;
	
	лИдентификаторСессии = гВосстановитьИдентификаторСессииConsqueryCloud(ТипОбработка, СеансовыеДанные);
	
	Если Не ЗначениеЗаполнено(лИдентификаторСессии) Тогда 
		Оповестить("НеобходимоПереподключиться", , ЭтаФорма);
		Возврат;
	КонецЕсли;
		
	ПараметрыОткрытияформы = Новый Структура();
	ПараметрыОткрытияформы.Вставить("Режим"              , Режим);
	ПараметрыОткрытияформы.Вставить("Тип"                , лТипДиалога);
	ПараметрыОткрытияформы.Вставить("ИмяЭлементаИзОблака", лИмяЭлементаИзОблака);
	
	ОткрытьФорму("ВнешняяОбработка.КонсольЗапросов.Форма.ФормаУпрДиалогВыбораИсточникаДанныхИзОблака", 
		ПараметрыОткрытияформы, 
		ЭтаФорма,,,, 
		Новый ОписаниеОповещения("СохранитьЗапросыВОблакоПродолжение", Вычислить(ЭтотОбъектФорма), Новый Структура("ИдентификаторСессии, ТекущаяСтрокаДереваЗапросов", лИдентификаторСессии, мТекущаяСтрокаДереваЗапросов)), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // СохранитьЗапросыВОблако()

&НаКлиенте
Процедура СохранитьЗапросыВФайлНачало(ВызыватьДиалог, СохранитьТекущийЗапрос, ДополнительныеПараметры)
	
	Перем ТекущийЗапрос, СохранитьЗначенияПоЗапросу, ФайлСуществует;
	
	Если СохранитьТекущийЗапрос И мТекущаяСтрокаДереваЗапросов = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда 
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	лПутьКФайлу     = "";                                                                                                
	лПолноеИмяФайла = ИмяФайлаСЗапросом;
	
	Если Не ДополнительныеПараметры.Свойство("СохранитьЗначенияПоЗапросу", СохранитьЗначенияПоЗапросу) ИЛИ СохранитьЗначенияПоЗапросу = Истина Тогда 
		СохранитьЗначенияПоЗапросу(мТекущаяСтрокаДереваЗапросов);
	КонецЕсли;
	
	Если Не СохранитьТекущийЗапрос Тогда 
		Если Не ПустаяСтрока(лПолноеИмяФайла) Тогда 
			
			лВремФайл = Новый Файл(лПолноеИмяФайла); 
			
			Если Не ДополнительныеПараметры.Свойство("ФайлСуществует", ФайлСуществует) Тогда 
				лТранзитныеПараметры = Новый Структура;
					лТранзитныеПараметры.Вставить("ВызыватьДиалог"         , ВызыватьДиалог);
					лТранзитныеПараметры.Вставить("СохранитьТекущийЗапрос" , СохранитьТекущийЗапрос);
					лТранзитныеПараметры.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
					
				ПараметрыОповещения = Новый Структура();
				ПараметрыОповещения.Вставить("ТранзитныеПараметры", лТранзитныеПараметры);
				ПараметрыОповещения.Вставить("ИсточникПроверки"   , "СохранитьЗапросыВФайлНачало");
				лВремФайл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ОкончаниеПроверкиСуществования", ЭтаФорма, ПараметрыОповещения));
				Возврат;
			КонецЕсли;
			
			Если ФайлСуществует Тогда 
				лПутьКФайлу = лВремФайл.Путь; 
				лИмяФайла   = лВремФайл.Имя;	
			Иначе
				лИмяФайла      = СтрЗаменить(лПолноеИмяФайла, ".sel", "");
				ВызыватьДиалог = Истина;
			КонецЕсли;
		Иначе
			лИмяФайла      = "Запросы от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ЧЧ_ММ_сс'");
			ВызыватьДиалог = Истина;
		КонецЕсли;
		
		лЗаголовок  = "Укажите имя файла для сохранения запросов";
		лФильтр     = "Файлы с запросами (*.sel)|*.sel";
		лРасширение = "sel";
	Иначе
		лИмяФайла   = ТекущийЗапрос.Имя;
		лЗаголовок  = "Укажите имя файла для сохранения текущего запроса";
		лФильтр     = "Файлы веток (*.sl)|*.sl";
		лРасширение = "sl";
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда 
		ДополнительныеПараметры = Новый Структура
	КонецЕсли;
	
	Если СохранитьТекущийЗапрос Тогда 
		ДополнительныеПараметры.Вставить("ТекущийЗапрос", ТекущийЗапрос);
	КонецЕсли;
	
	лОповещение = Новый ОписаниеОповещения("СохранитьЗапросыВФайлПродолжение", ЭтаФорма, ДополнительныеПараметры);
	
	Если ВызыватьДиалог Тогда		
		
		лДиалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		
		лДиалог.ПолноеИмяФайла = лПутьКФайлу + лИмяФайла;
		лДиалог.Каталог        = лПутьКФайлу;
		лДиалог.Заголовок      = лЗаголовок;
		лДиалог.Фильтр         = лФильтр;
		лДиалог.Расширение     = лРасширение;
		
		лДиалог.Показать(лОповещение);
		
	Иначе
		
		лМассивыВыбранныхФайлов = Новый Массив;
		лМассивыВыбранныхФайлов.Добавить(лПолноеИмяФайла);
		
		ВыполнитьОбработкуОповещения(лОповещение, лМассивыВыбранныхФайлов);
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьЗапросыВФайлНачало()

Функция ЗначениеВСтрокуСервер(Значение)
	ВозврЗнач = ЗначениеВСтрокуВнутр(Значение);
	Возврат ВозврЗнач;
КонецФункции	

Функция ПолучитьСледующееУникальноеИмя(Знач ИсходноеИмя, Коллекция, ИмяПоля)
	Сч = 0;
	Пока НайтиЗначениеБезУчетаРегистра(ИсходноеИмя + ?(Сч = 0, "", Формат(Сч, "ЧГ=0")), Коллекция, ИмяПоля) <> Неопределено Цикл
		Сч = Сч + 1;
	КонецЦикла;

	Возврат ИсходноеИмя + ?(Сч = 0, "", Формат(Сч, "ЧГ=0"));
КонецФункции // ПолучитьСледующееУникальноеИмя()

&НаКлиентеНаСервереБезКонтекста
Функция НайтиЗначениеБезУчетаРегистра(Значение, Коллекция, Поле)
	Для каждого СтрокаКоллекции Из Коллекция Цикл
		Если НРЕГ(?(СтрокаКоллекции = Тип("Массив"), СтрокаКоллекции, СтрокаКоллекции[Поле])) = НРЕГ(Значение) тогда
			Возврат СтрокаКоллекции
		Конецесли;
	КонецЦикла; 
	Возврат Неопределено
КонецФункции

Функция ВыполнитьНаСервере(КодДляВыполнения)
	Попытка
		Выполнить(КодДляВыполнения);
		Возврат Истина;
	Исключение
		лТекстОшибки = ОписаниеОшибки();
		гВывестиОшибкуВыполненияКода(ТипОбработка, СеансовыеДанные, лТекстОшибки, КодДляВыполнения);
		Возврат Ложь;
	КонецПопытки;
КонецФункции

#КонецОбласти

#Область ВыполнениеЗапроса

// Запускает выполнение запроса.
//
&НаКлиенте
Процедура ЗапуститьВыполнениеЗапроса(Удаленно = Ложь)
	
	СохранитьЗначенияПоЗапросу(мТекущаяСтрокаДереваЗапросов);

	ТекущийЗапрос = ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока);
	
	Если ПустаяСтрока(ТекущийЗапрос.ТекстЗапроса) Тогда 
		ТекстПредупреждения = НСтр("ru = 'Введите текст запроса.'");
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПоказатьПредупреждениеЗавершение", ЭтаФорма), ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ТекущийЗапрос.ТекстЗапроса = СтрЗаменить(ТекущийЗапрос.ТекстЗапроса, "|", "");
	
	// Определение текста запроса.
	ВыделенныйТекст = ПолучитьУстановитьТекущийТекстЗапроса().ЭлементФормы.ВыделенныйТекст;
	Если Не ПустаяСтрока(ВыделенныйТекст) Тогда 
		ТекстЗапроса = ВыделенныйТекст;
	Иначе
		ТекстЗапроса = ТекущийЗапрос.ТекстЗапроса;
	КонецЕсли;	
	
	ТекстСообщения   = "";
	
	ОчиститьСообщения();
	
	Ошибка = Ложь;
	
	Если Не Ошибка Тогда 
		
		Если Удаленно Тогда 
			лИмяПараметра = Константы().ИмяПараметраСоединенияСИБ;
			
			лПараметрыСоединенияСИБ     = ПараметрыТекущегоЗапроса.НайтиСтроки(Новый Структура("Имя", лИмяПараметра));
			лИмяПараметра               = Константы().ВерсияВнешнейБазы;
			лПараметрыВерсияВнешнейБазы = ПараметрыТекущегоЗапроса.НайтиСтроки(Новый Структура("Имя", лИмяПараметра));
			Если лПараметрыСоединенияСИБ.Количество() = 0 ИЛИ лПараметрыВерсияВнешнейБазы.Количество() = 0 Тогда 
				лСтрокаПредупреждения = "Запрос к внешней базе не выполнен.
				|Отсутствует параметр %ИмяПараметраСоединенияСИБ% ИЛИ %ВерсияВнешнейБазы% для подключения к внешней базе.
				|Для добавления параметров текущей базы можно воспользоваться кнопкой ""Настройки подключения к внешней базе в параметры""";
				лСтрокаПредупреждения = СтрЗаменить(лСтрокаПредупреждения, "%ИмяПараметраСоединенияСИБ%", Константы().ИмяПараметраСоединенияСИБ);
				лСтрокаПредупреждения = СтрЗаменить(лСтрокаПредупреждения, "%ВерсияВнешнейБазы%"        , Константы().ВерсияВнешнейБазы);
				ПоказатьПредупреждение(Новый ОписаниеОповещения("ПоказатьПредупреждениеЗавершение", ЭтаФорма), лСтрокаПредупреждения, 10);
				Возврат;
			КонецЕсли;
			ПараметрыПодключенияКВнешнейБазе = Новый Структура;
			ПараметрыПодключенияКВнешнейБазе.Вставить("ПараметрыСоединенияСИБ", лПараметрыСоединенияСИБ[0].ЗначениеВФорме);
			ПараметрыПодключенияКВнешнейБазе.Вставить("ВерсияВнешнейБазы"     , лПараметрыВерсияВнешнейБазы[0].ЗначениеВФорме);
		Иначе
			ПараметрыПодключенияКВнешнейБазе = Неопределено;
		КонецЕсли;
		
		ВыполнитьЗапросСервер(ТекстЗапроса, ТекущийЗапрос.Идентификатор, ТекстСообщения, Ошибка, ПараметрыПодключенияКВнешнейБазе);
		
		Если Не Ошибка Тогда 
			лИмяРодителяЭлементаРезультатЗапроса = СвойстваРеквизитаРезультатЗапроса.ИмяЭлементаРодителя;
			Элементы[лИмяРодителяЭлементаРезультатЗапроса].Видимость = Истина;
			ОформитьКнопкуПоказатьРезультат(Элементы[лИмяРодителяЭлементаРезультатЗапроса].Видимость);
			ТекущийЭлемент = Элементы[СвойстваРеквизитаРезультатЗапроса.ИмяРеквизита].ПодчиненныеЭлементы[0];		
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСостояниеРезультатаЗапроса();
	
	Если Не ПустаяСтрока(ТекстСообщения) Тогда 
		ПоказатьСообщениеПользователю(ТекстСообщения, "Объект");
	КонецЕсли;	
	
КонецПроцедуры // ЗапуститьВыполнениеЗапроса()

Процедура УстановитьПараметрыЗапроса(Запрос, ИдентификаторЗапроса)
	
	// добавляем локальные параметры текущего запроса
	лМассивПараметровЗапроса = ПараметрыЗапросов.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", ИдентификаторЗапроса));
	Для каждого ЭлементПараметр из лМассивПараметровЗапроса Цикл 
		Если ЭлементПараметр.Значение <> "" Тогда 
			Запрос.УстановитьПараметр(ЭлементПараметр.Имя, ЗначениеИзСтрокиВнутр(ЭлементПараметр.Значение));
		КонецЕсли;
	КонецЦикла;
	
	// добавляем глобальные параметры
	лМассивПараметровЗапроса = ПараметрыЗапросов.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", ""));
	Для каждого ЭлементПараметр из лМассивПараметровЗапроса Цикл 
		Если ЭлементПараметр.Значение <> "" Тогда 
			Запрос.УстановитьПараметр(ЭлементПараметр.Имя, ЗначениеИзСтрокиВнутр(ЭлементПараметр.Значение));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	// УстановитьПараметрыЗапроса()

Функция ПараметрыЗапроса(ИдентификаторЗапроса)
	
	лСписокПараметров = Новый Массив;
	
	// добавляем локальные параметры текущего запроса
	лМассивПараметровЗапроса = ПараметрыЗапросов.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", ИдентификаторЗапроса));
	Для каждого ЭлементПараметр из лМассивПараметровЗапроса Цикл 
		лСписокПараметров.Добавить(ЭлементПараметр.Имя);
	КонецЦикла;
	
	Возврат лСписокПараметров
	
КонецФункции // ПараметрыЗапроса()

&НаКлиенте
Процедура ПоказатьПараметры(Команда)
	Элементы.ГруппаПараметрыЗапросов.Видимость = Не Элементы.ГруппаПараметрыЗапросов.Видимость;
	ОформитьКнопкуПоказатьПараметры(Элементы.ГруппаПараметрыЗапросов.Видимость);
КонецПроцедуры

Процедура ВыполнитьЗапросСервер(ТекстЗапроса, ИдентификаторЗапроса, ТекстСообщения, Ошибка, ПараметрыПодключенияКВнешнейБазе = Неопределено) Экспорт
	
	Если ПараметрыПодключенияКВнешнейБазе = Неопределено Тогда 
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		лПараметрыДляДобавленияВоВременнуюТаблицу = ПараметрыТекущегоЗапроса.НайтиСтроки(Новый Структура("ДобавлятьВоВременнуюТаблицу", Истина));
		Если лПараметрыДляДобавленияВоВременнуюТаблицу.Количество() > 0 Тогда 
			
			Массив = Новый Массив;
			Массив.Добавить(Тип("Строка"));
			КС = Новый КвалификаторыСтроки(500);
			ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
			
			Для каждого лПараметрДляДобавленияВоВременнуюТаблицу Из лПараметрыДляДобавленияВоВременнуюТаблицу Цикл
				Запрос.Текст = "Выбрать * Поместить " + лПараметрДляДобавленияВоВременнуюТаблицу.Имя + " из &" + лПараметрДляДобавленияВоВременнуюТаблицу.Имя + " КАК Выборка";

				ТЗПараметры = ЗначениеИзСтрокиВнутр(лПараметрДляДобавленияВоВременнуюТаблицу.Значение);
				
				Если ТипЗнч(ТЗПараметры) <> Тип("ТаблицаЗначений") Тогда 
					ВызватьИсключение("Параметр " + лПараметрДляДобавленияВоВременнуюТаблицу.Имя + " должен иметь тип ""ТаблицаЗначений""");
				КонецЕсли;
				
				ТЗПараметрыНовая = Новый ТаблицаЗначений;

				Для Каждого Колонка Из ТЗПараметры.Колонки Цикл
					Если ЗначениеЗаполнено(Колонка.ТипЗначения) Тогда 
						ТЗПараметрыНовая.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
					Иначе
						ТЗПараметрыНовая.Колонки.Добавить(Колонка.Имя, ОписаниеТиповС);
					КонецЕсли;
				КонецЦикла;

				Для Каждого Строка Из ТЗПараметры Цикл
					НоваяСтрока = ТЗПараметрыНовая.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				КонецЦикла;

				Запрос.УстановитьПараметр(лПараметрДляДобавленияВоВременнуюТаблицу.Имя, ТЗПараметрыНовая);
				Запрос.Выполнить();
			КонецЦикла; 
		КонецЕсли;
	Иначе
		V8COM = Коннектор(ПараметрыПодключенияКВнешнейБазе.ПараметрыСоединенияСИБ, ПараметрыПодключенияКВнешнейБазе.ВерсияВнешнейБазы);
		Если V8COM = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		Запрос = V8COM.NewObject("Запрос");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПараметрыЗапроса(Запрос, ИдентификаторЗапроса);
	
	Попытка
		лРезультат = Запрос.Выполнить();
	Исключение
		Ошибка = Истина;
		мПоказатьОшибкуНаСервере(ОписаниеОшибки());
	КонецПопытки;
	
	Если ПараметрыПодключенияКВнешнейБазе = Неопределено Тогда 
		лРезультатЗапроса = лРезультат.Выгрузить();
	Иначе
		лРезультатЗапроса = СформироватьТаблицуПоВнешнейВыборке(лРезультат.Выгрузить());
	КонецЕсли;
	
	АдресРезультата = ПоместитьВоВременноеХранилище(лРезультатЗапроса, УникальныйИдентификатор);
	
	СоздатьРеквизитCРезультатомЗапроса(АдресРезультата);
	
КонецПроцедуры // ВыполнитьЗапросСервер()

&НаКлиенте
Процедура ДеревоЗапросовПараметрыЗапросовЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоЗапросовПараметрыЗапросов.ТекущиеДанные;	
	
	Если ТекущиеДанные.Значение = Неопределено Тогда
		Элемент.ВыбиратьТип = Истина;
	Иначе
		Элемент.ВыбиратьТип = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСекциюСЗапросами(Команда)
	ОбработкаДействияПоказатьСекциюСЗапросами(Не Элементы.ГруппаДанныеЗапроса.Видимость);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультат(Команда)
	лИмяРодителяЭлементаРезультатЗапроса = СвойстваРеквизитаРезультатЗапроса.ИмяЭлементаРодителя;
	лЭлементРезультатЗапроса             = Элементы[лИмяРодителяЭлементаРезультатЗапроса];
	лЭлементРезультатЗапроса.Видимость   = Не лЭлементРезультатЗапроса.Видимость;
	ОформитьКнопкуПоказатьРезультат(лЭлементРезультатЗапроса.Видимость);
КонецПроцедуры

&НаКлиенте
Процедура ПозицияКурсора(Команда)
	Элементы.ФормаКнопкаПозицияКурсора.Пометка = Не Элементы.ФормаКнопкаПозицияКурсора.Пометка;
	АвтоопределениеПозицииКурсора = Элементы.ФормаКнопкаПозицияКурсора.Пометка;	
	ВывестиПозициюКурсора();
КонецПроцедуры

#КонецОбласти


#КонецОбласти


мВыполняетсяЗакрытие              = Ложь;
мКэшЗначений                      = Новый Структура;
мДлительнаяОперацияЗапущена       = Ложь;
мОперацияПослеСохраненияИзменений = Неопределено;
чёмСохранитьПередВыполнением        = Ложь;