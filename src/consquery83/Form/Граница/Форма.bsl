
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	лГраница = ЗначениеИзСтрокиВнутр(Параметры.Значение);
	Если ТипЗнч(лГраница) = Тип("Граница") Тогда
		
		Элементы.ВидГраницы.СписокВыбора.Добавить("Включая");
		Элементы.ВидГраницы.СписокВыбора.Добавить("Исключая");
		
		СписокТипов = ОбъектОбработки().гСформироватьСписокТипов();
		
		ЗначениеЗагруженное = лГраница.Значение;
		ТипЗ = ОбъектОбработки().ИмяТипаИзЗначения(ЗначениеЗагруженное);
		Тип = СписокТипов.НайтиПоЗначению(ТипЗ).Представление;
		Если Тип <> НСтр("en='Point in time';ru='Момент времени'") Тогда
			ЗначениеВФорме = ЗначениеЗагруженное;
		Иначе
			ЗначениеВФорме = ОбъектОбработки().ФормированиеПредставленияЗначения(ЗначениеЗагруженное);
		КонецЕсли;
		
		Если Тип <> НСтр("en='Point in time';ru='Момент времени'") Тогда
			ЗначениеВФорме = ЗначениеЗагруженное;
		Иначе
			ЗначениеВФорме = ОбъектОбработки().ФормированиеПредставленияЗначения(ЗначениеЗагруженное);
		КонецЕсли;
		
		Если лГраница.ВидГраницы = ВидГраницы.Включая Тогда
			ВидГраницыФормы = элементы.ВидГраницы.СписокВыбора.Получить(0).Значение;
		Иначе
			ВидГраницыФормы = элементы.ВидГраницы.СписокВыбора.Получить(1).Значение;
		КонецЕсли;
		
		Значение = ЗначениеВСтрокуВнутр(ЗначениеЗагруженное);
		
	Иначе
		Сообщить("Передано значение некорректного типа в форму редактирования границы. Обратитесь к разработчику.");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПолучениеМоментаВремени" Тогда 
		ПолучениеМоментаВремени(Параметр);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ТипЗавершениеВыбора", ЭтотОбъект);
	СписокТипов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выбрать тип'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеВФормеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если Тип =  НСтр("ru = 'Момент времени'") Тогда
		Путь = Объект.ПутьКФормам + "." + "МоментВремени";
		ОткрытьФорму(Путь, Новый Структура("Значение", Значение), ЭтотОбъект);
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеВФормеПриИзменении(Элемент)
	ИзменениеЗначенияВФорме();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьГраницу(Команда)
	
	Закрыть(); 
	Владелец					= ЭтотОбъект.ВладелецФормы;
	Владелец.Модифицированность = Истина;
	
	Оповестить("ОбновитьПараметрСГраницей", РезультатВСтрокуВнутр());	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПоказатьСообщениеПользователю(ТекстСообщения)
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = НСтр("ru = '" + СтрЗаменить(ТекстСообщения, "'", "''") + "'");
    Сообщение.Сообщить();
	
КонецПроцедуры // ПоказатьСообщениеПользователю()

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ЗАВЕРШЕНИЕ АСИНХРОННЫХ ВЫЗОВОВ

&НаКлиенте
Процедура ТипЗавершениеВыбора(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		ТекущийТип = ВыбранныйЭлемент;
		
		Если ТекущийТип.Значение = "МоментВремени" Тогда 
			Тип 			= ТекущийТип.Представление;
			Значение    	= Тип;
			ЗначениеВФорме 	= Тип;
		Иначе
			Тип 		= ТекущийТип.Представление;
			
			Массив 		= Новый Массив;
			Массив.Добавить(Тип(ТекущийТип.Значение));
			Описание	= Новый ОписаниеТипов(Массив);
			
			ЗначениеВФорме	= Описание.ПривестиЗначение(ТекущийТип.Значение);
			Значение		= Описание.ПривестиЗначение(ТекущийТип.Значение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает вид границы из ее строкового представления.
//
// Параметры:
//	Вид - строковое представление вида границы.
//
Функция ОпределениеВидаГраницы(Вид)
	Если ВРег(Вид) = "ИСКЛЮЧАЯ" Тогда
		Результат = ВидГраницы.Исключая;
	Иначе
		Результат = ВидГраницы.Включая;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // ОпределениеВидаГраницы()

&НаСервере
Функция ОбъектОбработки()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервере
Процедура ПолучениеМоментаВремени(СтруктураПередачи)
	Значение  		= СтруктураПередачи.ВнутрМоментВремени;
	ЗначениеВФорме	= СтруктураПередачи.ПредставлениеМоментаВремени;
КонецПроцедуры	

&НаСервере
Процедура ИзменениеЗначенияВФорме()
	Значение = ЗначениеВСтрокуВнутр(ЗначениеВФорме);
КонецПроцедуры	

&НаСервере
Функция РезультатВСтрокуВнутр()
	
	Возврат ЗначениеВСтрокуВнутр(Новый Граница(ЗначениеИзСтрокиВнутр(Значение), ОпределениеВидаГраницы(ВидГраницыФормы)));

КонецФункции // РезультатВСтрокуВнутр()()

#КонецОбласти


