&НаКлиенте
Перем мВыполняетсяЗакрытие;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
     // установим внутреннее строковое представление типа значения объекта обработки
    ТипОбработка = ЗначениеВСтрокуВнутр(ТипЗнч(РеквизитФормыВЗначение("Объект")));
	
	АдресРезультата          = Параметры.АдресРезультата;
	ИдентификаторЗапроса     = Параметры.ИдентификаторЗапроса;
	ЭтотОбъектФорма          = Параметры.ЭтотОбъектФорма;
	ТекстТекущегоЗапроса     = Параметры.ТекстТекущегоЗапроса;
	СеансовыеДанные          = Параметры.СеансовыеДанные;
	СтруктураКЭШ             = Параметры.СтруктураКЭШ;
	
	лИсполняемыйКодСписок = Параметры.ИсполняемыйКод;
	ИсполняемыйКодСписок.Очистить();
	Для каждого лВариантКода Из лИсполняемыйКодСписок Цикл
		лНоваяСтрока = ИсполняемыйКодСписок.Добавить();
		ЗаполнитьЗначенияСвойств(лНоваяСтрока, лВариантКода);
		
		Если ЗначениеЗаполнено(Параметры.ИдентификаторКода) И лНоваяСтрока.Идентификатор = Параметры.ИдентификаторКода Тогда 
			ТекущаяСтрокаПриОткрытии = лНоваяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЦикла; 
	
	Если ИсполняемыйКодСписок.Количество() = 0 Тогда 
		лНоваяСтрока = ИсполняемыйКодСписок.Добавить();
		лНоваяСтрока.Идентификатор        = Новый УникальныйИдентификатор;
		лНоваяСтрока.Имя                  = ПолучитьНазваниеВариантаКода();
	КонецЕсли;

	лПутькКартинке = ОбъектОбработки(ТипОбработка).гЗначениеИзСеансовыхДанных("ПутькКартинкам", СеансовыеДанные);
	лКореньМеню    = ЗаполнитьМенюПоДереву(КоманднаяПанель, ОбъектОбработки(ТипОбработка).гПолучитьМеню("ПредустановленныйКод", Истина, Ложь, лПутькКартинке));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// подключитьОбработчикОжидания("ВывестиПозициюКурсора", 1);
	ТекущийЭлемент = Элементы.ИсполняемыйКодСписокТекстПолеВвода;
	
	Если ТекущаяСтрокаПриОткрытии <> 0 Тогда 
		
		ТекущийЭлемент = Элементы.ИсполняемыйКодСписок;
		
		Элементы.ИсполняемыйКодСписок.ТекущаяСтрока = ТекущаяСтрокаПриОткрытии;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не мВыполняетсяЗакрытие Тогда 
		Если Модифицированность Тогда 
			Отказ = Истина;
			ТекстВопроса = НСтр("ru = 'Сохранить изменения?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("СохранитьИзмененияЗавершение", Вычислить(ЭтотОбъектФорма), 
				ПолучитьСтруктуруПараметровДляЗакрытияФормы(ВернутьЗначениеССервера("ОбъектОбработки(ТипОбработка).гРежимыЗакрытияФормыВводаПроизвольногоКода().Сохранить"), Истина)), 
				ТекстВопроса, 
				РежимДиалогаВопрос.ДаНетОтмена);		
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредустановленныйКодВставитьЦикл(Команда)
	ПодставитьПредустановленныйКод(ТипыПредустановленногоКода(ТипОбработка).ВставитьЦикл);
КонецПроцедуры // ПредустановленныйКодВставитьЦикл

&НаКлиенте
Процедура ПредустановленныйКодРедактироватьРегистрСведений(Команда)
	ПодставитьПредустановленныйКод(ТипыПредустановленногоКода(ТипОбработка).РедактироватьРегистрСведений);
КонецПроцедуры // ПредустановленныйКодРедактироватьРегистрСведений

&НаКлиенте
Процедура ПредустановленныйКодРедактироватьДокументы(Команда)
	ПодставитьПредустановленныйКод(ТипыПредустановленногоКода(ТипОбработка).РедактироватьДокументы);
КонецПроцедуры // ПредустановленныйКодРедактироватьДокументы

&НаКлиенте
Процедура ПредустановленныйКодРедактироватьСправочники(Команда)
	ПодставитьПредустановленныйКод(ТипыПредустановленногоКода(ТипОбработка).РедактироватьСправочники);
КонецПроцедуры // ПредустановленныйКодРедактироватьСправочники

&НаКлиенте
Процедура ПодставитьПредустановленныйКод(ВидПредустановленногоКода)
	
	Если ВидПредустановленногоКода = ТипыПредустановленногоКода(ТипОбработка).ВставитьЦикл Тогда 
		лТекстПредустановленногоКода = ПолучитьПредустановленныйКодВставитьЦиклНаСервере();
		ПодставитьПредустановленныйКодЗавершение(лТекстПредустановленногоКода);
	ИначеЕсли ВидПредустановленногоКода = ТипыПредустановленногоКода(ТипОбработка).РедактироватьРегистрСведений Тогда 
		лЗначениеПоУмолчанию       = Неопределено;
		лСписокОбъектовМетаданных  = ПолучитьСписокОбъектовМетаданныхИзТекстаНаСервере(ТекстТекущегоЗапроса, "РегистрыСведений", лЗначениеПоУмолчанию);		
		лСписокОбъектовМетаданных.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ВыборРегистраДляРедактированияЗавершение", Вычислить(ЭтотОбъектФорма)), "Выберите регистр сведений", лСписокОбъектовМетаданных.НайтиПоЗначению(лЗначениеПоУмолчанию));
	ИначеЕсли ВидПредустановленногоКода = ТипыПредустановленногоКода(ТипОбработка).РедактироватьДокументы Тогда 
		лЗначениеПоУмолчанию       = Неопределено;
		лСписокОбъектовМетаданных  = ПолучитьСписокОбъектовМетаданныхИзТекстаНаСервере(ТекстТекущегоЗапроса, "Документы", лЗначениеПоУмолчанию);		
		лСписокОбъектовМетаданных.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ВыборДокументаДляРедактированияЗавершение", Вычислить(ЭтотОбъектФорма)), "Выберите документ", лСписокОбъектовМетаданных.НайтиПоЗначению(лЗначениеПоУмолчанию));
	ИначеЕсли ВидПредустановленногоКода = ТипыПредустановленногоКода(ТипОбработка).РедактироватьСправочники Тогда 
		лЗначениеПоУмолчанию       = Неопределено;
		лСписокОбъектовМетаданных  = ПолучитьСписокОбъектовМетаданныхИзТекстаНаСервере(ТекстТекущегоЗапроса, "Справочники", лЗначениеПоУмолчанию);		
		лСписокОбъектовМетаданных.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ВыборСправочникаДляРедактированияЗавершение", Вычислить(ЭтотОбъектФорма)), "Выберите справочник", лСписокОбъектовМетаданных.НайтиПоЗначению(лЗначениеПоУмолчанию));
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодставитьПредустановленныйКодЗавершение(ТекстПредустановленногоКода)
	ВставитьТекстВПолеФормы(Элементы.ИсполняемыйКодСписок.ТекущиеДанные, Элементы.ИсполняемыйКодСписокТекстПолеВвода, ТекстПредустановленногоКода);
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполняемыйКодСписок

&НаКлиенте
Процедура ИсполняемыйКодСписокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока тогда
		ИсполняемыйКодСписок[ИсполняемыйКодСписок.Количество() - 1].Имя   = ПолучитьНазваниеВариантаКода();
		Элементы.ИсполняемыйКодСписок.ТекущиеДанные.Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполняемыйКодСписокПередУдалением(Элемент, Отказ)
	Если ИсполняемыйКодСписок.Количество() = 1 Тогда 
		ПоказатьПредупреждение(, "Должен остаться хотя бы один вариант кода.", 10, "Информация");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКодДляВыполнения
// код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	ОбработкаДействийКомандыВыполнить(Истина)
КонецПроцедуры

&НаКлиенте
 Процедура КомандаВыполнитьНаКлиенте(Команда)
	ОбработкаДействийКомандыВыполнить(Ложь)
 КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	ЗакрытьФормуРедактирования(ПолучитьСтруктуруПараметровДляЗакрытияФормы(ВернутьЗначениеССервера("ОбъектОбработки(ТипОбработка).гРежимыЗакрытияФормыВводаПроизвольногоКода().Сохранить"), Истина));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	КомментированиеВыделенногоТекста(Истина);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКомментарий(Команда)
	КомментированиеВыделенногоТекста(Ложь);
КонецПроцедуры

#КонецОбласти

#Область ЗавершенияАСинхронныхВызовов

&НаКлиенте
Процедура ВыборРегистраДляРедактированияЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда 
		ПодставитьПредустановленныйКодЗавершение(ПредустановленныйКодРедактироватьРегистрСведенийНаСервере(ВыбранныйЭлемент.Значение));
	Иначе 
		Возврат;
	КонецЕсли;
		
КонецПроцедуры // ВыборРегистраДляРедактированияЗавершение()

&НаКлиенте
Процедура ВыборДокументаДляРедактированияЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда 
		ПодставитьПредустановленныйКодЗавершение(ПредустановленныйКодРедактироватьДокументНаСервере(ВыбранныйЭлемент.Значение));
	Иначе 
		Возврат;
	КонецЕсли;
		
КонецПроцедуры // ВыборДокументаДляРедактированияЗавершение()

&НаКлиенте
Процедура ВыборСправочникаДляРедактированияЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда 
		ПодставитьПредустановленныйКодЗавершение(ПредустановленныйКодРедактироватьСправочникНаСервере(ВыбранныйЭлемент.Значение));
	Иначе 
		Возврат;
	КонецЕсли;
		
КонецПроцедуры // ВыборСправочникаДляРедактированияЗавершение()

&НаКлиенте
Процедура СохранитьИзмененияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	мВыполняетсяЗакрытие = Истина;
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК ИЛИ РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		ЗакрытьФормуРедактирования(ДополнительныеПараметры);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда 
		Закрыть();
	КонецЕсли;
	
	мВыполняетсяЗакрытие = Ложь;
	
КонецПроцедуры // СохранитьИзмененияЗавершение()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнтерфейсныеПроцедурыИФункции

//// Процедура выводит информацию по позиции курсора в строке с произвольным кодом
////
//// Параметры
////  Нет
////
//&НаКлиенте
// процедура ВывестиПозициюКурсора()
//	
//	Перем СтрокаНач,КолонкаНач,СтрокаКон,КолонкаКон;
//	
//	Элементы.ИсполняемыйКодСписокТекстПолеВвода.ПолучитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон);
//	
//	НадписьПозицияКурсора = "Строка: " + СтрокаНач + "	Кол: " + КолонкаНач;

// конецПроцедуры // ВывестиПозициюКурсора()

&НаСервере
Функция ЗаполнитьМенюПоДереву(Родитель, ДеревоМенюКнопки)
	
	Для каждого ТекСтрока Из ДеревоМенюКнопки.Строки Цикл
		
		Если Элементы.Найти(ТекСтрока.Имя) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Действие) Тогда
			Кнопка = Элементы.Добавить(ТекСтрока.Имя, ?(ЗначениеЗаполнено(ТекСтрока.Название), Тип("ГруппаФормы"), Тип("КнопкаФормы")), Родитель);
			Если ТекСтрока.Строки.Количество() > 0 Тогда
				ЗаполнитьМенюПоДереву(Кнопка, ТекСтрока)
			КонецЕсли;				
		Иначе
			
			КомандаФормы  = Команды.Найти(ТекСтрока.Действие);
			
			Если КомандаФормы = Неопределено Тогда 
				КомандаФормы = Команды.Добавить(ТекСтрока.Действие);
				КомандаФормы.Действие = ТекСтрока.Действие;
			КонецЕсли;
			
			Кнопка            = Элементы.Добавить(ТекСтрока.Имя, Тип("КнопкаФормы"), Родитель);
			Кнопка.ИмяКоманды = ТекСтрока.Действие;
			
			Если ТекСтрока.Картинка.Вид = ВидКартинки.ИзБиблиотеки Тогда 
				Кнопка.Картинка   = ТекСтрока.Картинка;
			КонецЕсли;
			
			Если ТекСтрока.СочетаниеКлавиш <> Неопределено Тогда
				Кнопка.СочетаниеКлавиш = ТекСтрока.СочетаниеКлавиш;
			КонецЕсли;
			
		КонецЕсли;
		
		Кнопка.Заголовок = ТекСтрока.Название;
		
	КонецЦикла; 
	
	Возврат Кнопка
	
КонецФункции // ЗаполнитьМенюПоДереву()

&НаКлиенте
Процедура ВставитьТекстВПолеФормы(РеквизитФормы, ПолеТекстовогоДокумента, ТекстДляДобавления)
	
	Перем СтрокаНач,КолонкаНач,СтрокаКон,КолонкаКон;
	
	Если Не ЗначениеЗаполнено(ТекстДляДобавления) Тогда 
		Возврат;
	КонецЕсли;
	
	ПолеТекстовогоДокумента.ПолучитьГраницыВыделения(СтрокаНач,КолонкаНач,СтрокаКон,КолонкаКон);
	ПолеТекстовогоДокумента.ВыделенныйТекст = ТекстДляДобавления;
	
	лИзменяемыйТекст = Новый ТекстовыйДокумент;
	лИзменяемыйТекст.УстановитьТекст(ТекстДляДобавления);
	ПолеТекстовогоДокумента.УстановитьГраницыВыделения(
		СтрокаНач,
		КолонкаНач,
		СтрокаКон + лИзменяемыйТекст.КоличествоСтрок(),
		СтрДлина(лИзменяемыйТекст.ПолучитьСтроку(лИзменяемыйТекст.КоличествоСтрок())));

КонецПроцедуры // ВставитьТекстВПолеФормы()

#КонецОбласти

#Область ВызовГлобальныхПроцедурИФункций

Функция ПолучитьСписокОбъектовМетаданныхИзТекстаНаСервере(ИсходныйТекст, ФильтрМетаданных, ЗначениеПоУмолчанию)
	Возврат ОбъектОбработки(ТипОбработка).гПолучитьСписокОбъектовМетаданныхИзТекста(ИсходныйТекст, ФильтрМетаданных, ЗначениеПоУмолчанию, СтруктураКЭШ);
КонецФункции

&НаСервере
Функция ПолучитьПредустановленныйКодВставитьЦиклНаСервере()
	Возврат ОбъектОбработки(ТипОбработка).гПолучитьПредустановленныйКодВставитьЦикл(ПолучитьИзВременногоХранилища(АдресРезультата).Колонки);
КонецФункции // ПолучитьПредустановленныйКодВставитьЦиклНаСервере()

&НаСервере
Функция ПредустановленныйКодРедактироватьРегистрСведенийНаСервере(ПолноеИмяОбъектаМетаданных)
	Возврат ОбъектОбработки(ТипОбработка).гПолучитьПредустановленныйКодРедактироватьРегистрСведений(ПолноеИмяОбъектаМетаданных, ТекстТекущегоЗапроса);
КонецФункции // ПредустановленныйКодРедактироватьРегистрСведений()

&НаСервере
Функция ПредустановленныйКодРедактироватьДокументНаСервере(ПолноеИмяОбъектаМетаданных)
	Возврат ОбъектОбработки(ТипОбработка).гПолучитьПредустановленныйКодРедактироватьДокумент(ПолноеИмяОбъектаМетаданных, ТекстТекущегоЗапроса);
КонецФункции // ПредустановленныйКодРедактироватьДокументНаСервере()

&НаСервере
Функция ПредустановленныйКодРедактироватьСправочникНаСервере(ПолноеИмяОбъектаМетаданных)
	Возврат ОбъектОбработки(ТипОбработка).гПолучитьПредустановленныйКодРедактироватьСправочник(ПолноеИмяОбъектаМетаданных, ТекстТекущегоЗапроса);
КонецФункции // ПредустановленныйКодРедактироватьСправочникНаСервере()

#КонецОбласти 

&НаКлиенте
Функция ПолучитьСтруктуруСИсполняемымКодом()
	лРезультат = Новый Массив;
	Для каждого лСтрокСИсполняемымКодом Из ИсполняемыйКодСписок Цикл
		лРезультат.Добавить(Новый Структура("Имя, Текст", лСтрокСИсполняемымКодом.Имя, лСтрокСИсполняемымКодом.Текст));
	КонецЦикла; 
	
	Возврат лРезультат
КонецФункции // ПолучитьСтруктуруСИсполняемымКодом()

&НаКлиенте
Функция ПолучитьСтруктуруПараметровДляЗакрытияФормы(Режим, ВыполнитьНаСервере)

	СтруктураПараметров = Новый Структура("Режим, Текст, ИсполняемыйКод, ИдентификаторЗапроса, ВыполнитьНаСервере");
	СтруктураПараметров.Режим                = Режим;
	СтруктураПараметров.Текст                = Элементы.ИсполняемыйКодСписок.ТекущиеДанные.Текст;
	СтруктураПараметров.ИсполняемыйКод       = ПолучитьСтруктуруСИсполняемымКодом();
	СтруктураПараметров.ИдентификаторЗапроса = ИдентификаторЗапроса;
	СтруктураПараметров.ВыполнитьНаСервере   = ВыполнитьНаСервере;
	
	Возврат СтруктураПараметров

КонецФункции // ПолучитьСтруктуруПараметровДляЗакрытияФормы()
 
&НаСервере
Функция ВернутьЗначениеССервера(Алгоритм)
	
	Результат = Вычислить(Алгоритм);
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТипыПредустановленногоКода(ТипОбработка)
	Возврат ОбъектОбработки(ТипОбработка).гТипыПредустановленногоКода()
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектОбработки(ТипОбработка)
	Возврат Новый (ЗначениеИзСтрокиВнутр(ТипОбработка))
КонецФункции

Функция ПолучитьНазваниеВариантаКода(ПредварительныйВариантКода = "", УровеньРекурсии = 0)

	Если ПредварительныйВариантКода = "" Тогда 
		ПредварительныйВариантКода = "Вариант №" + Формат(ИсполняемыйКодСписок.Количество(), "ЧГ=0");
	Иначе
		ПредварительныйВариантКода = ПредварительныйВариантКода + ?(УровеньРекурсии < 2, " Копия", " " + Формат(УровеньРекурсии - 1, "ЧГ=0"));
	КонецЕсли;
	
	Если ИсполняемыйКодСписок.НайтиСтроки(Новый Структура("Имя", ПредварительныйВариантКода)).Количество() > 0 Тогда 
		УровеньРекурсии = УровеньРекурсии + 1;
		ПолучитьНазваниеВариантаКода(ПредварительныйВариантКода, УровеньРекурсии);
	КонецЕсли;
	
	Возврат ПредварительныйВариантКода

КонецФункции // ПолучитьНазваниеВариантаКода()

&НаКлиенте
Процедура ЗакрытьФормуРедактирования(ПараметрЗакрытия = Неопределено)

	Модифицированность = Ложь;	
	Закрыть(ПараметрЗакрытия);                    
	
 КонецПроцедуры // ЗакрытьФормуРедактирования()

&НаКлиенте
Процедура ОбработкаДействийКомандыВыполнить(ВыполнитьНаСервере)
 
 	ТекстВопроса = НСтр("ru = 'Вы уверены?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("СохранитьИзмененияЗавершение", Вычислить(ЭтотОбъектФорма), 
		ПолучитьСтруктуруПараметровДляЗакрытияФормы(ВернутьЗначениеССервера("ОбъектОбработки(ТипОбработка).гРежимыЗакрытияФормыВводаПроизвольногоКода().Выполнить"), ВыполнитьНаСервере)),
		ТекстВопроса, 
		РежимДиалогаВопрос.ОКОтмена);		
 
КонецПроцедуры // ОбработкаДействийКомандыВыполнить()

// ДУБЛЬ процедуры из формы ФормаУпр
//
&НаКлиенте
Процедура КомментированиеВыделенногоТекста(УстановитьКомментарий)

	лИзменяемыйТекст                = Новый ТекстовыйДокумент;
	лЭлементФормыСТекстомЗапроса    = Элементы.ИсполняемыйКодСписокТекстПолеВвода;
    лТекстЗапроса                   = Элементы.ИсполняемыйКодСписок.ТекущиеДанные.Текст;
	
	лИзменяемыйТекст.УстановитьТекст(лТекстЗапроса);
	
	СтруктураВыделенногоТекста = ПолучитьСтруктуруВыделенногоТекста();
	
	Для Сч = СтруктураВыделенногоТекста.НачалоСтрокиКомментария По СтруктураВыделенногоТекста.КонецСтрокиКомментария-1 Цикл
		
		Если УстановитьКомментарий Тогда
			лИзменяемыйТекст.ЗаменитьСтроку(Сч, "//" + лИзменяемыйТекст.ПолучитьСтроку(Сч));
		Иначе
			лТекущаяСтрока = лИзменяемыйТекст.ПолучитьСтроку(Сч);
			Если Найти(СокрЛ(лТекущаяСтрока), "//") = 1 Тогда 
				лИзменяемыйТекст.ЗаменитьСтроку(Сч, Сред(лТекущаяСтрока, Найти(лТекущаяСтрока, "//") + 2));			
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	лЭлементФормыСТекстомЗапроса.УстановитьГраницыВыделения(1, 1, лИзменяемыйТекст.КоличествоСтрок() + 1, 1);
	лЭлементФормыСТекстомЗапроса.ВыделенныйТекст = лИзменяемыйТекст.ПолучитьТекст();
	лЭлементФормыСТекстомЗапроса.УстановитьГраницыВыделения(СтруктураВыделенногоТекста.НачалоСтрокиКомментария, 
		СтруктураВыделенногоТекста.НачалоКолонкиКомментария, 
		СтруктураВыделенногоТекста.КонецСтрокиКомментария, 
		СтруктураВыделенногоТекста.КонецКолонкиКомментария);
	
	Модифицированность = Истина;                                        
	
КонецПроцедуры // КомментированиеВыделенногоТекста()

// ДУБЛЬ процедуры из формы ФормаУпр
//
&НаКлиенте
Функция ПолучитьСтруктуруВыделенногоТекста()

	Перем НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки;
	
	Элементы.ИсполняемыйКодСписокТекстПолеВвода.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	
	НачалоСтрокиКомментария = НачалоСтроки;
	
	Если КонецСтроки > НачалоСтроки И КонецКолонки = 1 Тогда 
		КонецСтрокиКомментария = КонецСтроки;
	Иначе
		КонецСтрокиКомментария = КонецСтроки + 1;
	КонецЕсли;
	
	НачалоКолонкиКомментария = 1;
	КонецКолонкиКомментария  = 1;
	
	Результат = Новый Структура();
	Результат.Вставить("НачалоСтроки"            , НачалоСтроки);
	Результат.Вставить("НачалоКолонки"           , НачалоКолонки);
	Результат.Вставить("КонецСтроки"             , КонецСтроки);
	Результат.Вставить("КонецКолонки"            , КонецКолонки);
	Результат.Вставить("НачалоСтрокиКомментария" , НачалоСтрокиКомментария);
	Результат.Вставить("НачалоКолонкиКомментария", НачалоКолонкиКомментария);
	Результат.Вставить("КонецСтрокиКомментария"  , КонецСтрокиКомментария);
	Результат.Вставить("КонецКолонкиКомментария" , КонецКолонкиКомментария);	
	
	Возврат Результат;

КонецФункции // ПолучитьСтруктуруВыделенногоТекста()
  
#КонецОбласти

мВыполняетсяЗакрытие = Ложь;