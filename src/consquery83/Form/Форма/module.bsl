// Консоль запросов 1С от Евгения Лавелина
// e-mail:support@consquery.ru
// http: www.consquery.ru

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ


////////////////////////////////////////////////////////////////////////////////
// Интерфейс обработки

Перем ЗапросДляОтладки Экспорт; 		// сюда перед открытием формы необходимо передать значение типа Запрос
Перем РежимВыбораВеткиДерева Экспорт;   // используется в вызываемой формы выбора ветки

Перем мФормаПараметров Экспорт;         // форма параметров
Перем мФормаИсполняемыйКод Экспорт;		// форма вариантов кода
Перем мФормаПоиска Экспорт;				// форма поиска
Перем мФормаПараметрыИБ Экспорт;		// форма параметров ИБ

////////////////////////////////////////////////////////////////////////////////
// Прочие переменные

Перем мФормаПрогрессора;

Перем мТаблицаЗагружена;                // признак того, что результат запроса загружен в табличное поле
Перем мСводнаяТаблицаЗагружена;         // признак того, что результат запроса загружен в сводную таблицу

Перем мСтруктураСРазмерами;
Перем мПодменюВременныеТаблицыКнопки;

Перем мМассивУдаленныхСтрок, мМассивИзмененныхСтрок;

Перем мЭтотОбъектФорма;                 // для совместимости со старыми версиями платформы (после отказа от поддержки старых релизов необходимо удалить, заменив на "ЭтотОбъект")

Перем мВыполняетсяЗакрытие, мОтменаРедактирования;

Перем мАгрегатнаяФункция;               // текущая(последняя выбранная в меню на форме) агрегатная функция
Перем мТекущаяСтрока;                   // текущая(до перехода на новую строку) строка дерева запросов.
Перем мВременныеТаблицы;                // временные таблицы выполняемого запроса 
Перем мЭлементФормыРеквизитаТаблицы;    // элемент формы таблицы с результатом запроса

// "облачные" переменные
Перем мИмяФайла;                        // имя файла запросов 
Перем мИмяПользователяВОблаке;          // имя пользователя в облаке
Перем мНастройкиПрокси;

Перем мНачалоВыполненияЗапроса, мОкончаниеВыполненияЗапроса; // даты начала и окончания выполнения запроса



#Область ОбработчикиСобытийФормы

// Обработчик события перед открытием формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	//////////////////////////////////////////////////////////////////
	// Проверка свойств обработки и конфигурации на корректность
	
	// метаданные.РежимИспользованияСинхронныхВызововРасширенийИВнешнихКомпонент - в старых релизах
	Если Метаданные.СвойстваОбъектов.РежимИспользованияСинхронныхВызововРасширенийПлатформыИВнешнихКомпонент = 
			Метаданные.СвойстваОбъектов.РежимИспользованияСинхронныхВызововРасширенийПлатформыИВнешнихКомпонент.Использовать Тогда 
		
		текстОшибки = "В свойствах конфигурации установлен режим использования синхронных вызовов расширений платформы и внешних компонент. 
			|	(Корень дерева метаданных > Cвойства > Совместимость > Режим использования синхронных вызовов расширений платформы и внешних компонент)
			|	Работа данной обработки при таком свойстве в режиме обычного приложения невозможна.
			|	Вы можете изменить данное свойство на ""Использовать с предупреждением"" или использовать обработку в управляемом режиме.";
		ВывестиСообщение(текстОшибки);		
		
		Отказ = Истина;		
	КонецЕсли;
	
	Если Метаданные.РежимИспользованияМодальности = Метаданные.СвойстваОбъектов.РежимИспользованияМодальности.Использовать Тогда 
		
		текстОшибки = "В свойствах конфигурации установлен запрет использования модальных окон. 
			|	(Корень дерева метаданных > Cвойства > Совместимость > Режим использования модальности)
			|	Некоторые функции обработки при таком свойстве в режиме обычного приложения будут недоступны.
			|	Вы можете изменить данное свойство на ""Использовать с предупреждением"" или использовать обработку в управляемом режиме.";
		ВывестиСообщение(текстОшибки);		
		
	КонецЕсли;
	
	лИмяЭлементаФормыСРезультатомЗапроса = гСвойстваРеквизитаРезультатЗапроса().ИмяРеквизита;
	
	лТабличноеПолеСРезультатомЗапроса = ЭлементыФормы.Найти(лИмяЭлементаФормыСРезультатомЗапроса);
	Если лТабличноеПолеСРезультатомЗапроса = Неопределено Тогда 
		
		текстОшибки = "не найден элемент формы ""%ИмяЭлементаФормыСРезультатомЗапроса%"".
			|	Необходимо изменить переменную ""мИмяЭлементаФормыСРезультатомЗапроса"" или изменить имя реквизита(ТабличноеПоле) для вывода результата запроса на ""%ИмяЭлементаФормыСРезультатомЗапроса%""";
		
		текстОшибки = СтрЗаменить(текстОшибки, "%ИмяЭлементаФормыСРезультатомЗапроса%", лИмяЭлементаФормыСРезультатомЗапроса);
		
		ВывестиСообщение(текстОшибки);		
		
		Отказ = Истина;		
	Иначе
		
		лДанныеТабличногоПоляСРезультатомЗапросаПоУмолчанию = ИмяРеквизитаРезультатЗапроса();
		Если лТабличноеПолеСРезультатомЗапроса.Данные <> лДанныеТабличногоПоляСРезультатомЗапросаПоУмолчанию Тогда 
			
			текстОшибки = "Свойство 'Данные' табличного поля '%ИмяТабличногоПоля%' должно быть равно '%ДанныеТабличногоПоля%'.
				|	Необходимо изменить свойство 'Данные' табличного поля '%ИмяТабличногоПоля%'.";
			
			текстОшибки = СтрЗаменить(текстОшибки, "%ИмяТабличногоПоля%"   , лИмяЭлементаФормыСРезультатомЗапроса);
			текстОшибки = СтрЗаменить(текстОшибки, "%ДанныеТабличногоПоля%", лДанныеТабличногоПоляСРезультатомЗапросаПоУмолчанию);
			
			ВывестиСообщение(текстОшибки);		
			
			Отказ = Истина;		
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	//////////////////////////////////////
	// Инициализация обработки
	
	мЭлементФормыРеквизитаТаблицы    = ЭлементыФормы[лИмяЭлементаФормыСРезультатомЗапроса];
	мТекущаяСтрока                   = Неопределено;
	мАктивизированаДобавляемаяЗапись = Ложь;

	мФормаПараметров = Обработка.ПолучитьФорму("ФормаПараметрыЗапроса", ЭтаФорма);
	мФормаПараметров.РазрешитьСостояниеПрикрепленное = Истина;
	мФормаПараметров.РазрешитьСостояниеПрячущееся    = Ложь;
	мФормаПараметров.РазрешитьСостояниеСвободное     = Истина;

	мФормаИсполняемыйКод = Обработка.ПолучитьФорму("ФормаИсполняемыйКод"    , ЭтаФорма);
	мФормаПараметрыИБ    = Обработка.ПолучитьФорму("ФормаПараметрыИБ"       , ЭтаФорма);
	мФормаПрогрессора    = Обработка.ПолучитьФорму("ФормаИндикатораЛокально", ЭтаФорма);
	
	мВременныеТаблицы = Новый ТаблицаЗначений;
	мВременныеТаблицы.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));

	мТаблицаЗагружена        = Ложь;
	мСводнаяТаблицаЗагружена = Ложь;

	мАгрегатнаяФункция = "Нет";

	гСоответствиеВременныеТаблицы = Новый Соответствие;

	гСеансовыеДанные = Новый Структура();	
	гСеансовыеДанные.Вставить("ИдентификаторСеанса", Новый УникальныйИдентификатор);
	гСеансовыеДанные.Вставить("КЭШ"                , Новый Структура);
	гСеансовыеДанные.Вставить("ПутьККартинкам"     , гИзвлечьКартинкиОбработкиНаСервере());
	
	гГлобальныеПеременные  = Новый Структура;
	
	//////////////////////////////////////
	// Формирование меню
	
	МассивМенюДляДобавления = Новый Массив;                                                                                                                                        
	МассивМенюДляДобавления.Добавить(Новый Структура("Имя, Контейнер, Картинка, Индекс", "ПреобразованияКодаВЗапросИОбратно", 
		ЭлементыФормы.КоманднаяПанельФормы     , ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Индекс(ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Найти("ПолучитьИзЗапроса")) + 1));
	МассивМенюДляДобавления.Добавить(Новый Структура("Имя, Контейнер, Картинка, Индекс", "Дополнительно", ЭлементыФормы.КоманднаяПанельФормы     ));
	МассивМенюДляДобавления.Добавить(Новый Структура("Имя, Контейнер, Картинка, Индекс", "Информация"   , ЭлементыФормы.КоманднаяПанельФормы     ));
	МассивМенюДляДобавления.Добавить(Новый Структура("Имя, Контейнер, Картинка, Индекс", "Сервис"       , ЭлементыФормы.КоманднаяПанельРезультата));
	МассивМенюДляДобавления.Добавить(Новый Структура("Имя, Контейнер, Картинка, Индекс", "Запросы"      , ЭлементыФормы.КоманднаяПанельРезультата));
	
	СформироватьМеню(МассивМенюДляДобавления);
	
КонецПроцедуры // ПередОткрытием

// Обработчик события при открытии формы
//
Процедура ПриОткрытии()
	
	мФормаПрогрессора.НадписьСостоянияИндикатораОбщая = "Заполнение начальных параметров ...";
	мФормаПрогрессора.Открыть();
	мФормаПрогрессора.ЭлементыФормы.ИндикаторПроцесса.МаксимальноеЗначение = 5;
	мФормаПрогрессора.ЗначениеИндикатора = 1;
	
	мПодменюВременныеТаблицыКнопки = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюВременныеТаблицы.Кнопки;
	
	ВосстановитьШириныКолонокРезультатаЗапросаПоУмолчанию(Ложь);
	
	УстановитьДополнительныеПараметрыДляСтарыхВерсий();	
	
	мФормаПрогрессора.ЗначениеИндикатора = 2;
	
	ИнициализацияДанных();
	
	мФормаПрогрессора.ЗначениеИндикатора = 3;
	
	Если Не мФормаПрогрессора.Открыта() Тогда 
		мФормаПрогрессора.Открыть();
		мФормаПрогрессора.ЗначениеИндикатора = 3;
	КонецЕсли;
	
	ЗагрузитьЗапросы(Истина, мИмяФайла); 
	
	мФормаПрогрессора.ЗначениеИндикатора = 4;
	
	ИспользоватьАвтосохранение      = ВосстановитьЗначение("КонсольЗапросов_ИспользоватьАвтосохранение");
	ИнтервалАвтосохранения          = ВосстановитьЗначение("КонсольЗапросов_ИнтервалАвтосохранения");
	ВыводитьВсеИтогиДляДерева       = ВосстановитьЗначение("КонсольЗапросов_ВыводитьВсеИтогиДляДерева");
	СохранитьПередВыполнением = ВосстановитьЗначение("КонсольЗапросов_ФлажокСохранитьПередВыполнением");

	ОбработкаАвтосохранения();
	
	мФормаПрогрессора.ЗначениеИндикатора = 5;
	
	// Открытие обработки из режима отладки "1С Предприятия"
	Если ЗапросДляОтладки <> Неопределено И ТипЗнч(ЗапросДляОтладки) = Тип("Запрос") Тогда 
		
		мТекущаяСтрока                = ДеревоЗапросов.Строки.Добавить();
		мТекущаяСтрока.Имя            = "" + ТекущаяДата();
		мТекущаяСтрока.ТекстЗапроса   = ЗапросДляОтладки.Текст;
		мТекущаяСтрока.Идентификатор  = Строка(Новый УникальныйИдентификатор);
		мТекущаяСтрока.СпособВыгрузки = 1; // СпособВыгрузки = 1;
		ДействияПриИзмененииСпособаВыгрузки();

		гКэшЗапросов.Вставить(мТекущаяСтрока.Идентификатор, ЗапросДляОтладки);
		
		Для каждого ТекПараметр Из ЗапросДляОтладки.Параметры Цикл
			
			// #добавлениепараметразапроса 4
			СтрокаПараметров = ПараметрыЗапросов.Добавить();
			
			СтрокаПараметров.ИдентификаторЗапроса = мТекущаяСтрока.Идентификатор;
			СтрокаПараметров.ИдентификаторСтроки  = Строка(Новый УникальныйИдентификатор);
			СтрокаПараметров.Имя                  = ТекПараметр.Ключ;
			СтрокаПараметров.Значение             = ЗначениеВСтрокуВнутр(ТекПараметр.Значение);
			
		КонецЦикла; 		
		
		ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = мТекущаяСтрока;
	КонецЕсли;

	КнопкаПодменю = мПодменюВременныеТаблицыКнопки.УдалитьВременнуюТаблицу;
	КнопкаПодменю.Кнопки.Добавить("УдалитьВсе", ТипКнопкиКоманднойПанели.Действие, "Удалить все таблицы", Новый Действие("ПодменюВременныеТаблицыПриВыбореУдалитьВременнуюТаблицу"));
	КнопкаПодменю.Кнопки.Добавить();
	
	Если мФормаПрогрессора.Открыта() Тогда 
		мФормаПрогрессора.Закрыть();
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события преред закрытием формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не мВыполняетсяЗакрытие Тогда 
	    СтандартнаяОбработка = Ложь;
		Отказ                = Истина;
		ПроверитьМодифицированность("ЗакрытьФорму");// #рефакторинг определить константу
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
Процедура ПриЗакрытии()
	
	путьККартинкам = гСеансовыеДанные.ПутьККартинкам;
	
	Если ЗначениеЗаполнено(путьККартинкам) Тогда 
		Попытка
			УдалитьФайлы(путьККартинкам);
		Исключение
		КонецПопытки; 
	КонецЕсли;
	
	мФормаИсполняемыйКод = Неопределено;
	мФормаПараметров     = Неопределено;
	мФормаПараметрыИБ    = Неопределено;
	мФормаПоиска         = Неопределено;
	
	гДанныеВременныхТаблиц = Неопределено;
	гГлобальныеПеременные  = Неопределено;
	гСеансовыеДанные       = Неопределено;
	гСоответствиеВременныеТаблицы = Неопределено;
	гКэшЗапросов           = Неопределено;
	
	мЭтотОбъектФорма       = Неопределено;
	
КонецПроцедуры

// Обработчик события выбора в подчиненной форме
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если РежимВыбораВеткиДерева = "ПеренестиВДругуюВетку" Тогда
		НоваяСтрока = ЗначениеВыбора.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, мТекущаяСтрока);
		СкопироватьДеревоЗапросовРекурсивно(мТекущаяСтрока, НоваяСтрока, Новый Структура("ОбновлятьИД, ЭтоСтарыйРелиз", Ложь, Ложь));

		РодительТекущейСтроки = ?(мТекущаяСтрока.Родитель = Неопределено, ДеревоЗапросов, мТекущаяСтрока.Родитель);		
		РодительТекущейСтроки.Строки.Удалить(РодительТекущейСтроки.Строки.Индекс(мТекущаяСтрока));
		мТекущаяСтрока = Неопределено;
		
		ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрока;

		Модифицированность = Истина;
	ИначеЕсли РежимВыбораВеткиДерева = "СравнитьЗапросы" Тогда
		
		ЗаписьФайла = Новый ЗаписьТекста;
		
		ПервыйФайл = ПолучитьИмяВременногоФайла("txt");
		ВторойФайл = ПолучитьИмяВременногоФайла("txt");
		
		ЗаписьФайла.Открыть(ПервыйФайл);
		ЗаписьФайла.ЗаписатьСтроку(мТекущаяСтрока.ТекстЗапроса);
		ЗаписьФайла.Закрыть();
		
		ЗаписьФайла.Открыть(ВторойФайл);
		ЗаписьФайла.ЗаписатьСтроку(ЗначениеВыбора.ТекстЗапроса);
		ЗаписьФайла.Закрыть();
		
		
		Сравнение = Новый СравнениеФайлов;
		Сравнение.СпособСравнения = СпособСравненияФайлов.ТекстовыйДокумент;
		Сравнение.ИгнорироватьПустоеПространство = Истина;
		
		Сравнение.ПервыйФайл = ПервыйФайл;
		Сравнение.ВторойФайл = ВторойФайл;
		
		Если Сравнение.Сравнить() Тогда
			ПоказатьПредупреждение(, "Различий нет", 10);
		Иначе
			Сравнение.ПоказатьРазличияМодально();
		КонецЕсли;
		
		УдалитьФайлы(ПервыйФайл);
		УдалитьФайлы(ВторойФайл);
		
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "НеобходимоПереподключиться" Тогда 
		ПодключенияКОблакуДействие();
	ИначеЕсли ИмяСобытия = "ДобавитьЗапросИзПредпросмотра" Тогда 
		ЗагрузитьЗапросыИзОблака(Параметр.идПакета, Параметр.идЗапроса, Параметр.идКода, Ложь, ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока.Родитель)
	ИначеЕсли ИмяСобытия = "ОбновитьНастройкиПрокси" Тогда 
		мНастройкиПрокси = Параметр;
		СохранитьЗначение("Consquery_cloud_НастройкиПрокси", мНастройкиПрокси);
	ИначеЕсли ИмяСобытия = "ОбновитьИмяПользователяВОблаке" Тогда 
		Если Параметр.ИмяПользователя <> мИмяПользователяВОблаке Тогда 
			Если Не ЗначениеЗаполнено(Параметр.ИмяПользователя) Тогда  мИмяФайла = ""; КонецЕсли;
			мИмяПользователяВОблаке = Параметр.ИмяПользователя;
			ОбновитьЗаголовок();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

Процедура ОбновлениеОтображения()
	
	Если мФормаПрогрессора <> Неопределено и мФормаПрогрессора.Открыта() Тогда
		мФормаПрогрессора.Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ОбновлениеОтображения()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Модифицированность и ТекущаяСтраница = 0 Тогда
		СохранитьШаблоныВДополнительныеПараметры();
	КонецЕсли;
КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Обработчик нажатия кнопки командной панели "Открыть файл запросов"
//
Процедура КоманднаяПанельФормыОткрытьФайл(Кнопка)
	ПроверитьМодифицированность(гОперацииСЗапросами().Открыть);
КонецПроцедуры // ОткрытьФайл()

Процедура МенюДействияЗагрузитьВеткуЛокально(Кнопка)
	ЗагрузитьВеткуЛокальноДействие();
КонецПроцедуры

Процедура МенюДействияСохранитьЗапросыВФайл(Кнопка)
	СохранитьЗапросыВФайлНачало(Ложь, Ложь, Неопределено);
КонецПроцедуры

Процедура МенюДействияСохранитьЗапросыВНовыйФайл(Кнопка)
	СохранитьЗапросыВФайлНачало(Истина, Ложь, Неопределено);
КонецПроцедуры

Процедура МенюДействияСохранитьТекущийЗапросВФайл(Кнопка)
	СохранитьЗапросыВФайлНачало(Истина, Истина, Неопределено);
КонецПроцедуры

Процедура МенюДействияДобавитьЗапросИзОблака(Кнопка)
	ДобавитьЗапросИзОблакаДействие();
КонецПроцедуры

Процедура МенюДействиеВыгрузитьВсеЗапросыВОблако(Кнопка)
	СохранитьЗапросыВОблакоДействие(гОперацииСЗапросами().СохранитьКАК);
КонецПроцедуры

Процедура МенюДействияВыгрузитьТекущийЗапросВОблако(Кнопка)
	СохранитьЗапросыВОблакоДействие(гОперацииСЗапросами().СохранитьКАК, Истина);
КонецПроцедуры

Процедура МенюДействиеПараметрыПодключенияКОблаку(Кнопка)
	ПодключенияКОблакуДействие();
КонецПроцедуры

Процедура МенюДействияНастройкиПрокси(Кнопка)
	НастройкиПроксиДействие();
КонецПроцедуры

// Обработчик нажатия кнопки командной панели "Настройка автосохранения"
//
Процедура МенюДействияНастройкаАвтосохранения(Кнопка)
	ФормаНастройкиАвтосохранения = ПолучитьФорму("ФормаНастройкиАвтосохранения");
	ФормаНастройкиАвтосохранения.ОткрытьМодально();
	ОбработкаАвтосохранения();
КонецПроцедуры // НастройкаАвтосохранения()

Процедура МенюДействияСравнитьЗапросы(Кнопка)
	СравнитьЗапросыДействие();
КонецПроцедуры


// Обработчик нажатия кнопки командной панели "Новый список запросов"
//
Процедура КоманднаяПанельФормыНовыйФайлЗапросов(Кнопка)
	ПроверитьМодифицированность(гОперацииСЗапросами().Новый);
КонецПроцедуры // НовыйФайл()

Процедура КоманднаяПанельФормыСохранитьЗапросыВФайл(Кнопка)
	СохранитьЗапросыВФайлНачало(Ложь, Ложь, Неопределено);
КонецПроцедуры

Процедура КоманднаяПанельФормыДобавитьЗапросИзОблака(Кнопка)
	ДобавитьЗапросИзОблакаДействие();
КонецПроцедуры

// Обработчик нажатия кнопки командной панели "Перенести в другую группу"
//
Процедура КоманднаяПанельФормыПеренестиСтрокуДерева(Кнопка)

	СохранитьЗначенияПоЗапросу(мТекущаяСтрока);
	
	ФормаВыбораСтрокиДереваЗапросов = ПолучитьФорму("ФормаВыбораСтрокиДереваЗапросов", ЭтаФорма);
	ФормаВыбораСтрокиДереваЗапросов.ЗакрыватьПриВыборе = Истина;

	ФормаВыбораСтрокиДереваЗапросов.ДеревоЗапросов = ДеревоЗапросов;
	ФормаВыбораСтрокиДереваЗапросов.ТекущаяСтрокаВладельца = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	ФормаВыбораСтрокиДереваЗапросов.ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;

	РежимВыбораВеткиДерева = "ПеренестиВДругуюВетку";
	ФормаВыбораСтрокиДереваЗапросов.ОткрытьМодально();

КонецПроцедуры // ПеренестиСтрокуДерева()

Процедура КоманднаяПанельФормыЗаполнитьПараметрыИзЗапроса(Кнопка)
	гОбработкаДействийЗаполнитьПараметрыИзЗапроса(мФормаПараметров);
КонецПроцедуры

Процедура КоманднаяПанельФормыВыполнитьЗапрос(Кнопка)
	
	Если ЗначениеЗаполнено(мТекущаяСтрока) И ЗначениеЗаполнено(мТекущаяСтрока.Идентификатор) И гКэшЗапросов.Получить(мТекущаяСтрока.Идентификатор) <> Неопределено Тогда 
		ВыполнитьЗапросИзФормы(мЭлементФормыРеквизитаТаблицы, Ложь, гКэшЗапросов[мТекущаяСтрока.Идентификатор]);
	Иначе
		ВыполнитьЗапросИзФормы(мЭлементФормыРеквизитаТаблицы, Ложь);
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельФормыВыполнитьЗапрос()

Процедура КоманднаяПанельФормыВыполнитьПакет(Кнопка)
	
	Если СпособВыгрузкиДерево() Тогда 
		ПоказатьПредупреждение(, "Функция доступна только в режиме способа выгрузки ""Список"".", 10);
	Иначе
		ВыполнитьЗапросИзФормы(мЭлементФормыРеквизитаТаблицы, Истина);
	КонецЕсли;	
	
КонецПроцедуры // КоманднаяПанельФормыВыполнитьПакет()

Процедура КоманднаяПанельФормыВыполнитьЗапросПоСпискуИБ(Кнопка)
	
	лПараметрыИБ           = мФормаПараметрыИБ.ТаблицаПараметров;
	лПараметрыИБКоличество = лПараметрыИБ.Количество();
	Если лПараметрыИБКоличество = 0 Тогда
		ПоказатьПредупреждение(, "Не указаны параметры ИБ", 10);
		Возврат;
	Конецесли;
	
	Если Вопрос("Выполнить запросы по списку информационных баз?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	мФормаПрогрессора.Открыть();
	мФормаПрогрессора.ЭлементыФормы.ИндикаторПроцесса.МаксимальноеЗначение = лПараметрыИБКоличество;
	мФормаПрогрессора.НадписьСостоянияИндикатораОбщая = "Формирование внешних запросов:";
	мФормаПрогрессора.ЗначениеИндикатора = 0;
	
	// очищаем панель вывода отчета
	УдалитьСтраницыСВнешниимРезультатами();
	
	Для каждого ТекПараметрИБ Из лПараметрыИБ Цикл
		
		ОбработкаПрерыванияПользователя();
			
		мФормаПрогрессора.НадписьСостоянияИндикатораТекущая = "Формируется запрос по базе: " + ТекПараметрИБ.ИмяБазы;
		
		Если ТекПараметрИБ.Использовать Тогда
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Установить"       , Истина);
			СтруктураПараметров.Вставить("Версия"           , ТекПараметрИБ.Версия);
			СтруктураПараметров.Вставить("КаталогБазы"      , ТекПараметрИБ.КаталогБазы);
			СтруктураПараметров.Вставить("SQL_Сервер"       , ТекПараметрИБ.SQL_Сервер);
			СтруктураПараметров.Вставить("SQL_БазаДанных"   , ТекПараметрИБ.SQL_БазаДанных);
			СтруктураПараметров.Вставить("ТипБазы"          , ТекПараметрИБ.ФайловаяБаза);
			СтруктураПараметров.Вставить("ИмяПользователя"  , ТекПараметрИБ.ИмяПользователя);
			СтруктураПараметров.Вставить("Пароль"           , ТекПараметрИБ.Пароль);
			СтруктураПараметров.Вставить("ВыводитьСообщение", Истина);			
			
			V8COM = КоннекторКВнешнейБазе(СтруктураПараметров);	
			Если V8COM <> Неопределено Тогда		
				
				// добавляем закладку
				ТекИмяСтраницыРезультата = "СтраницаСРезультатом_" + ТекПараметрИБ.ИмяБазы;
				ТекИмяТаблицыРезультата  = "ТаблицаСРезультатом_"  + ТекПараметрИБ.ИмяБазы;
				
				ЭлементыФормы.ПанельРезультата.Страницы.Вставить(1, ТекИмяСтраницыРезультата, ТекПараметрИБ.ИмяБазы);
				ЭлементыФормы.ПанельРезультата.ТекущаяСтраница = ЭлементыФормы.ПанельРезультата.Страницы[ТекИмяСтраницыРезультата];
				
				// добавить(<Тип > , <Имя > , <Видимость > , <Поместить на > ) 
				Элемент = ЭлементыФормы.Добавить(Тип("Табличноеполе"), ТекИмяТаблицыРезультата,,ЭлементыФормы.ПанельРезультата); 
				Элемент.КонтекстноеМеню = ЭлементыФормы.СпецМеню;
				Элемент.Лево            = 6; 
				Элемент.Верх            = Элемент.Лево;
				Элемент.Ширина          = ЭлементыФормы.ПанельРезультата.Ширина - 12; Элемент.Высота = ЭлементыФормы.ПанельРезультата.Высота - 12;
				Элемент.ТолькоПросмотр  = Ложь;
				Элемент.УстановитьДействие("Выбор", Новый Действие("РезультатЗапросаВыбор"));
				
				// установитьПривязку(<Граница > , <Первый элемент > , <Граница первого элемента > , <Второй элемент > , <Граница второго элемента > ) 
				Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Верх , ЭлементыФормы.ПанельРезультата, ГраницаЭлементаУправления.Верх);
				Элемент.УстановитьПривязку(ГраницаЭлементаУправления.НИз  , ЭлементыФормы.ПанельРезультата, ГраницаЭлементаУправления.НИз);
				Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево , ЭлементыФормы.ПанельРезультата, ГраницаЭлементаУправления.Лево);
				Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельРезультата, ГраницаЭлементаУправления.Право);
				
				// выполняем запросы во внешних базах
				Попытка
					ВыполнитьЗапросИзФормы(ЭлементыФормы[ТекИмяТаблицыРезультата], Ложь, V8COM.NewObject("Запрос"));
				Исключение
					Сообщить("Ошибка при формировании запроса для базы: " + ТекПараметрИБ.ИмяБазы, СтатусСообщения.Важное);
					Сообщить(ОписаниеОшибки());
					Сообщить(" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");
				КонецПопытки; 
				
				V8COM = Неопределено;
			Иначе	
				Сообщить("Ошибка при формировании запроса для базы: " + ТекПараметрИБ.ИмяБазы, СтатусСообщения.Важное);
				Сообщить(" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");
			КонецЕсли;
			
			мФормаПрогрессора.ЗначениеИндикатора = мФормаПрогрессора.ЗначениеИндикатора + 1;
			
		КонецЕсли;
	КонецЦикла; // цикл по ПараметрамИБ
	
	мФормаПрогрессора.Закрыть()
	
КонецПроцедуры // КоманднаяПанельФормыВыполнитьЗапросПоСпискуИБ()

Процедура КоманднаяПанельФормыПараметрыИБ(Кнопка)
	мФормаПараметрыИБ.Открыть();
КонецПроцедуры

// Обработчик нажатия кнопки командной панели "Параметры"
//
Процедура КоманднаяПанельФормыПараметры(Кнопка)

	Если мФормаПараметров.Открыта() Тогда
		мФормаПараметров.Активизировать();
	Иначе
		мФормаПараметров.Открыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыПараметры()




Процедура ПодменюВременныеТаблицыИспользоватьМенеджерВременныхТаблиц(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
	Если Не Кнопка.Пометка = Истина Тогда
		мВременныеТаблицы.Очистить();
		ПерерисоватьСпискиВременныхТаблиц();
	КонецЕсли;
	
КонецПроцедуры // ПодменюВременныеТаблицыИспользоватьМенеджерВременныхТаблиц()

Процедура ПодменюВременныеТаблицыПоказатьВременнуюТаблицу(Кнопка)
	
	лФормаВложеннойТаблицы = Обработка.ПолучитьФорму("ФормаВложеннойТаблицы", ЭтаФорма, Новый УникальныйИдентификатор);
	лФормаВложеннойТаблицы.ВложеннаяТаблица = гСоответствиеВременныеТаблицы[Кнопка.Имя];
	лФормаВложеннойТаблицы.ЭлементыФормы.ВложеннаяТаблица.СоздатьКолонки();
	лФормаВложеннойТаблицы.Заголовок = "Временная таблица " + Кнопка.Имя;
	лФормаВложеннойТаблицы.Открыть();
	
КонецПроцедуры // ПодменюВременныеТаблицыПриВыбореПоказатьВременнуюТаблицу()

Процедура ПодменюВременныеТаблицыУдалитьВременнуюТаблицу(Кнопка)
	
	Если Кнопка.Имя = "УдалитьВсе" Тогда
		мВременныеТаблицы.Очистить();		
	Иначе
		мВременныеТаблицы.Удалить(мВременныеТаблицы.Найти(Кнопка.Имя));
	КонецЕсли;
	
	ПерерисоватьСпискиВременныхТаблиц();		

КонецПроцедуры // ПодменюВременныеТаблицыПриВыбореУдалитьВременнуюТаблицу()

Процедура ПодменюВременныеТаблицыПоказатьВыделеннуюВременнуюТаблицу(Кнопка)
	
    ТекстЗап = СокрЛП(ЭлементыФормы.ТекстЗапроса.ПолучитьВыделенныйТекст());
	Если СтрДлина(ТекстЗап) = 0 Тогда
		ПоказатьПредупреждение(, "Выделите временную таблицу для просмотра", 10);
		Возврат;
	КонецЕсли;
	
	лНазваниеВременнойТаблицы = ТекстЗап;
	
	Если гСоответствиеВременныеТаблицы[лНазваниеВременнойТаблицы] = Неопределено Тогда 
		ПоказатьПредупреждение(, "Не найдена временная таблица """ + лНазваниеВременнойТаблицы + """", 10);
		Возврат;
	КонецЕсли;
	
	ФормаВложеннойТаблицы = Обработка.ПолучитьФорму("ФормаВложеннойТаблицы", ЭтаФорма, Новый УникальныйИдентификатор);
	ФормаВложеннойТаблицы.ВложеннаяТаблица = гСоответствиеВременныеТаблицы[лНазваниеВременнойТаблицы];
	ФормаВложеннойТаблицы.ЭлементыФормы.ВложеннаяТаблица.СоздатьКолонки();
	ФормаВложеннойТаблицы.Заголовок = "Временная таблица " + лНазваниеВременнойТаблицы;
	ФормаВложеннойТаблицы.Открыть();
	
КонецПроцедуры

Процедура ПодменюВременныеТаблицыПерейтиКОписаниюВременнойТаблицы(Кнопка)
	
	лПолеТекстаЗапроса = ЭлементыФормы.ТекстЗапроса;
	
    ТекстЗап = СокрЛП(лПолеТекстаЗапроса.ПолучитьВыделенныйТекст());
	Если СтрДлина(ТекстЗап) = 0 Тогда
		ПоказатьПредупреждение(, "Выделите временную таблицу для просмотра", 100);
		Возврат;
	КонецЕсли;
	
	лНазваниеВременнойТаблицы = ТекстЗап;
	
	лВесьТекстЗапроса = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	
	лПозицияВременнойТаблицыВТекстеЗапроса = Найти(ВРег(лВесьТекстЗапроса), "ПОМЕСТИТЬ " + ВРег(лНазваниеВременнойТаблицы));
	
	Если лПозицияВременнойТаблицыВТекстеЗапроса = 0 Тогда 
		ПоказатьПредупреждение(, "В тексте запроса не найдена строка ""Поместить " + лНазваниеВременнойТаблицы + """", 100);
		Возврат;
	КонецЕсли;
	
	лПолеТекстаЗапроса.УстановитьГраницыВыделения(лПозицияВременнойТаблицыВТекстеЗапроса, лПозицияВременнойТаблицыВТекстеЗапроса);
	
КонецПроцедуры



Процедура МенюСпискаЗапросовЗагрузитьВетку(Кнопка)
	ЗагрузитьВеткуЛокальноДействие();
КонецПроцедуры

Процедура МенюСпискаЗапросовСохранитьТекущийЗапросВФайл(Кнопка)
	СохранитьЗапросыВФайлНачало(Истина, Истина, Неопределено);
КонецПроцедуры

Процедура МенюСпискаЗапросовВыгрузитьТекущийЗапросВОблако(Кнопка)
	СохранитьЗапросыВОблакоДействие(гОперацииСЗапросами().СохранитьКАК, Истина);
КонецПроцедуры

Процедура МенюСпискаЗапросовСравнитьЗапросы(Кнопка)
	СравнитьЗапросыДействие();
КонецПроцедуры

Процедура МенюСпискаЗапросовСтрокаНаТомЖеУровне(Кнопка)
	РодительТекущейСтроки = ?(мТекущаяСтрока.Родитель = Неопределено, ДеревоЗапросов, мТекущаяСтрока.Родитель);
	ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = РодительТекущейСтроки.Строки.Добавить();
КонецПроцедуры // МенюСпискаЗапросовСтрокаНаТомЖеУровне()


// Меню "Дополнительно"

Процедура КнопкаМенюДополнительноОткрытьФормуСпискаМетаданногоизЗапроса(Кнопка)
	
	// #рефакторинг: Необходимо сделать универсальный для других объектов метаданных

	СписокОбъектовМетаданных = гСписокОбъектовМетаданныхИзТекста(Элементыформы.ТекстЗапроса.ПолучитьТекст());
	
	Если СписокОбъектовМетаданных.Количество() > 0 Тогда 
		ВыбЗначениеМетаданного = СписокОбъектовМетаданных.ВыбратьЭлемент("Выберите объект для открытия формы списка.");
		Если ВыбЗначениеМетаданного <> Неопределено Тогда 
			ВыбЗначениеМетаданного.Значение.ПолучитьФормуСписка().Открыть();
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(,"Не найдены метаданные в запросе.");
	КонецЕсли;

КонецПроцедуры // КнопкаМенюДополнительноОткрытьФормуСпискаМетаданногоизЗапроса()

Процедура КнопкаМенюДополнительноПоиск(Кнопка)
	
	Если мФормаПоиска <> Неопределено И мФормаПоиска.Открыта() Тогда
		мФормаПоиска.АктивИзировать();
		мФормаПоиска.ТекущийЭлемент = мФормаПоиска.Элементыформы.СтрокаПоиска;
	Иначе
		Если мФормаПоиска = Неопределено Тогда
			мФормаПоиска = ПолучитьФорму("ФормаПоиск");
		КонецЕсли;
		мФормаПоиска.ВладелецФормы = ЭтаФорма;
		мФормаПоиска.Открыть();
	КонецЕсли;
		
КонецПроцедуры // КнопкаМенюДополнительноПоиск()


// Обработчик Изменения способа выгрузки
//
Процедура СпособВыгрузкиПриИзменении(Элемент)
	
	ДействияПриИзмененииСпособаВыгрузки();

КонецПроцедуры // СпособВыгрузкиПриИзменении()


// Меню "Сервис"

Процедура КнопкаМенюСервисПровестиДокументы(Кнопка)
	ПровестиДокументыДействие(Истина)
КонецПроцедуры

Процедура КнопкаМенюСервисОтменитьПроведение(Кнопка)
	ПровестиДокументыДействие(Ложь)
КонецПроцедуры

Процедура КнопкаМенюСервисУстановитьПометкуУдаления(Кнопка)
	УстановитьПометкуУдаленияДействие(Истина)
КонецПроцедуры

Процедура КнопкаМенюСервисСнятьПометкуУдаления(Кнопка)
	УстановитьПометкуУдаленияДействие(Ложь);
КонецПроцедуры

Процедура КнопкаМенюСервисСервисПерейтиКСледующемуЗначению(Кнопка)
	
	лПолеСРезультатомЗапроса = ЭлементыФормы[гСвойстваРеквизитаРезультатЗапроса().ИмяРеквизита];
	лРезультатЗапроса        = РезультатЗапроса();
	лТекущаяКолонка          = лПолеСРезультатомЗапроса.ТекущаяКолонка.Имя;
	лТекущееЗначение         = лПолеСРезультатомЗапроса.ТекущаяСтрока[лТекущаяКолонка];
	лНомерСтроки             = лРезультатЗапроса.Индекс(лПолеСРезультатомЗапроса.ТекущаяСтрока) + 1;
	
	Пока лНомерСтроки < лРезультатЗапроса.Количество() Цикл
		Если лРезультатЗапроса[лНомерСтроки][лТекущаяКолонка] <> лТекущееЗначение Тогда
			лПолеСРезультатомЗапроса.ТекущаяСтрока = лРезультатЗапроса[лНомерСтроки];
			Возврат;
		КонецЕсли;
		лНомерСтроки = лНомерСтроки + 1;
	КонецЦикла;
	ПоказатьПредупреждение(, "Не найдено изменений текущего значения");
	
КонецПроцедуры // КнопкаМенюСервисСервисПерейтиКСледующемуЗначению()

Процедура КнопкаМенюСервисВыгрузитьКолонкуРезультатаЗапросаВПараметр(Кнопка)
	ВыгрузитьКолонкуРезультатаЗапросаВПараметр()
КонецПроцедуры

Процедура КнопкаМенюСервисВыполнитьКод(Кнопка)
	ВыполнитьКод();
КонецПроцедуры

Процедура КнопкаМенюСервисПечатьРезультатаЗапроса(Кнопка)
	СохранитьРезультат()
КонецПроцедуры

Процедура КнопкаМенюСервисПечатьДанныхТаблицы(Кнопка)
	
	лДополнительныеПараметры = Новый Структура("ФормаПрогрессора", мФормаПрогрессора); // конфликт с глобальным значением ДополнительныеПараметры
	
	ТекСтраница = ЭлементыФормы.ПанельРезультата.ТекущаяСтраница;
	Если ТекСтраница.Имя = "Результат" Тогда 
		СформироватьПечатнуюФормуКоллекции(мЭлементФормыРеквизитаТаблицы.Значение, лДополнительныеПараметры);
	Иначе
		
		Если ТекСтраница <> Неопределено Тогда
			Если Найти(ТекСтраница.Имя, "СтраницаСРезультатом_") > 0 Тогда
				СформироватьПечатнуюФормуКоллекции(ЭлементыФормы[СтрЗаменить(ТекСтраница.Имя, "СтраницаСРезультатом_", "ТаблицаСРезультатом_")].Значение, лДополнительныеПараметры);
			Конецесли;
		Конецесли;		
	КонецЕсли;

КонецПроцедуры // КнопкаМенюСервисПечатьДанныхТаблицы()

Процедура КнопкаМенюСервисПоискСсылок(Кнопка)
	
	Если СпособВыгрузкиДерево() Тогда 
		ПоказатьПредупреждение(, "Данный функционал работает только для способа выгрузки ""Список"" ", 10);
		Возврат;
	КонецЕсли;
	
	лКолонкаССылками = Неопределено;
	лТаблицаНайденныхСсылок = ТаблицаНайденныхСсылок(лКолонкаССылками);

	Если ЗначениеЗаполнено(лТаблицаНайденныхСсылок) Тогда 
		СформироватьПечатнуюФормуКоллекции(лТаблицаНайденныхссылок, Новый Структура("ФормаПрогрессора", мФормаПрогрессора));
	КонецЕсли;	
	
КонецПроцедуры // КнопкаМенюСервисПоискСсылок()

Процедура КнопкаМенюСервисПоискСсылокВСтруктуру(Кнопка)
	
	Если СпособВыгрузкиДерево() Тогда 
		ПоказатьПредупреждение(, "Данный функционал работает только для способа выгрузки ""Список"" ", 10);
		Возврат;
	КонецЕсли;
	
	КолонкаССылками         = Неопределено;
	лТаблицаНайденныхСсылок = ТаблицаНайденныхСсылок(КолонкаССылками);

	Если ЗначениеЗаполнено(лТаблицаНайденныхСсылок) Тогда 
		
		лИмяПараметра = ИмяНовогоПараметраСтруктуры("НайденныеСсылки", гГлобальныеПеременные);
		гГлобальныеПеременные.Вставить(лИмяПараметра, лТаблицаНайденныхСсылок);
		
		ТекстСообщения = "В глобальную структуру выгружена таблица значений с найденными ссылками. 
			|	Доступ к таблице в структуре: гГлобальныеПеременные." + лИмяПараметра + "
			|	Поля таблицы                : Данные, Метаданные, ПутьКРасположениюСсылкиВОбъекте, Ссылка";
		
		ВывестиСообщение(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры // КнопкаМенюСервисПоискСсылокВСтруктуру()

Процедура КнопкаМенюСервисВыгрузкаВDBF(Кнопка)
	ВыгрузитьРезультатЗапросаВDBF()
КонецПроцедуры

Процедура КнопкаМенюСервисВыгрузкаВXML(Кнопка)
	ВыгрузитьРезультатЗапросаВXML()
КонецПроцедуры

Процедура КнопкаМенюСервисПоказатьДиаграмму(Кнопка)
	ПоказатьДиаграмму()
КонецПроцедуры // КнопкаМенюСервисПоказатьДиаграмму()

Процедура КнопкаМенюСервисЗапомнитьШиринуКолонок(Кнопка)
	ЗапомнитьШиринуКолонокПоляСРезультатомЗапроса(ЭлементыФормы, мСтруктураСРазмерами);
КонецПроцедуры // КнопкаМенюСервисЗапомнитьШиринуКолонок()

Процедура КнопкаМенюСервисПросмотретьТекущиеШириныКолонок(Кнопка)
	
	лТаблицаСРазмерамиШирин = ПолучитьТаблицуПоСтруктуре(мСтруктураСРазмерами);
	
	Если лТаблицаСРазмерамиШирин.Количество() > 0 Тогда 
		лТаблицаСРазмерамиШирин.ВыбратьСтроку();
	Иначе
		ПоказатьПредупреждение(, "Нет сохраненных настроек ширин колонок результата запроса.", 10);
	КонецЕсли;
	
КонецПроцедуры // КнопкаМенюСервисПросмотретьТекущиеШириныКолонок()

Процедура КнопкаМенюСервисСохранитьТекущиеШириныКолонокПоУмолчанию(Кнопка)
	
	Если мСтруктураСРазмерами.Количество() = 0 Тогда 
		ПоказатьПредупреждение(, "Нет сохраненных настроек ширин колонок результата запроса.", 10);
		Возврат;
	КонецЕсли;
	
	лСтруктураСШиринамиКолонокРезультатаЗапроса = ШириныКолонокРезультатаЗапросаПоУмолчанию();
	
	Для Каждого ЗначениеСтруктуры Из мСтруктураСРазмерами Цикл
		лСтруктураСШиринамиКолонокРезультатаЗапроса.Вставить(ЗначениеСтруктуры.Ключ, ЗначениеСтруктуры.Значение);
	КонецЦикла;
	
	УстановитьШириныКолонокРезультатаЗапросаПоУмолчанию(лСтруктураСШиринамиКолонокРезультатаЗапроса);
	
	ПоказатьПредупреждение(, "Текущие настройки ширин колонок результата запроса сохранены по умолчанию.", 10);
	
КонецПроцедуры // КнопкаМенюСервисСохранитьТекущиеШириныКолонокПоУмолчанию()

Процедура КнопкаМенюСервисВосстановитьШириныКолонокПоУмолчанию(Кнопка)
	
	ВосстановитьШириныКолонокРезультатаЗапросаПоУмолчанию();
	
КонецПроцедуры // КнопкаМенюСервисВосстановитьШириныКолонокПоУмолчанию()

Процедура КнопкаМенюСервисОчиститьЗначенияШириныКолонокПоУмолчанию(Кнопка)
	УстановитьШириныКолонокРезультатаЗапросаПоУмолчанию(Новый Структура)
КонецПроцедуры // КнопкаМенюСервисОчиститьЗначенияШириныКолонокПоУмолчанию()

Процедура КнопкаМенюСервисПросмотретьЗначенияШириныКолонокПоУмолчанию(Кнопка)

	лТаблицаСРазмерамиШирин = ПолучитьТаблицуПоСтруктуре(ШириныКолонокРезультатаЗапросаПоУмолчанию());
	
	Если лТаблицаСРазмерамиШирин.Количество() > 0 Тогда 
		лТаблицаСРазмерамиШирин.ВыбратьСтроку();
	Иначе
		ПоказатьПредупреждение(, "Нет сохраненных настроек ширин колонок результата запроса по умолчанию.", 10);
	КонецЕсли;
	
КонецПроцедуры // КнопкаМенюСервисПросмотретьЗначенияШириныКолонокПоУмолчанию()

Процедура КнопкаМенюСервисУстановитьВсемКолонкамРезультатаЗапросаОднуШирину(Кнопка)
	
	ТекШиринаКолонки = 10;
	
	Если ВвестиЧисло(ТекШиринаКолонки, "Введите ширину колонки", 3, 0) Тогда
		ТекКолонки = мЭлементФормыРеквизитаТаблицы.Колонки;
		Для каждого Колонка Из ТекКолонки Цикл
			Колонка.Ширина = ТекШиринаКолонки
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры // КнопкаМенюСервисУстановитьВсемКолонкамРезультатаЗапросаОднуШирину()

Процедура КнопкаМенюСервисЗагрузитьИзБуфераВТаблицуСРезультатом(Кнопка)
	
	ЗагрузитьТекстВТаблицу(гПолучитьСодержимоеБуфера(), РезультатЗапроса());
	
	мЭлементФормыРеквизитаТаблицы.СоздатьКолонки();
	
	ПоказатьПредупреждение(, "Загрузка данных из буфера.", 10);
	
КонецПроцедуры // КнопкаМенюСервисЗагрузитьИзБуфераВТаблицуСРезультатом()

Процедура КнопкаМенюСервисАвтодополнениеТекста(Кнопка)
	
	ПоказатьМенюАвтодополненияТекста(ЭлементыФормы.ТекстЗапроса);
	
КонецПроцедуры // КнопкаМенюСервисАвтодополнениеТекста()

Процедура КнопкаМенюСервисСформироватьКодДляОтладки(Кнопка)
	
	СформироватьКодДляОтладки()
	
КонецПроцедуры // КнопкаМенюСервисСформироватьКодДляОтладки()




Процедура КнопкаМенюЗапросыВсеДокументы(Кнопка)
	
	УстановитьТекстЗапросомПоДокументам(Истина)
	
КонецПроцедуры // КнопкаМенюЗапросыВсеДокументы()

Процедура КнопкаМенюЗапросыВыбранныеДокументы(Кнопка)	
	
	УстановитьТекстЗапросомПоДокументам(Ложь)
	
КонецПроцедуры // КнопкаМенюЗапросыВыбранныеДокументы()

Процедура КнопкаМенюЗапросыВсеСправочники(Кнопка)
	
	УстановитьТекстЗапросомПоСправочникам(Истина)
	
КонецПроцедуры // КнопкаМенюЗапросыВсеСправочники()

Процедура КнопкаМенюЗапросыВыбранныеСправочники(Кнопка)
	
	УстановитьТекстЗапросомПоСправочникам(Ложь)
	
КонецПроцедуры // КнопкаМенюЗапросыВыбранныеСправочники()

Процедура КнопкаМенюЗапросыВыбратьМетаданноеДляЗапроса(Кнопка)
	
	УстановитьТекстЗапросомПоВыбранномуМетаданному()
	
КонецПроцедуры // КнопкаМенюЗапросыВыбратьМетаданноеДляЗапроса







Процедура СсылкаНаДокументПриИзменении(Элемент)
	
	ЭлементыФормы.ИмяТабличнойЧастиЗагружаемогоДокумента.СписокВыбора.Очистить();
	Если ЭлементыФормы.СсылкаНаДокумент.Значение <> Неопределено Тогда
		Если СсылкаНаДокумент.Метаданные().ТабличныеЧасти.Количество() Тогда
			Для Каждого ТЧ Из СсылкаНаДокумент.Метаданные().ТабличныеЧасти Цикл
				ЭлементыФормы.ИмяТабличнойЧастиЗагружаемогоДокумента.СписокВыбора.Добавить(ТЧ.Имя);
			КонецЦикла;
			ИмяТабличнойЧастиЗагружаемогоДокумента = ЭлементыФормы.ИмяТабличнойЧастиЗагружаемогоДокумента.СписокВыбора[0];
			ИмяТабличнойЧастиЗагружаемогоДокументаПриИзменении(Неопределено);
		Иначе
			ПоказатьПредупреждение(, "В документе вида """ + СсылкаНаДокумент.Метаданные().Синоним + """ нет табличных частей для выгрузки.");
			СсылкаНаДокумент = Неопределено;
		КонецЕсли;
	КонецЕсли;		
	
	ИнициализацияКнопкиВыгрузки();
	
КонецПроцедуры

Процедура СсылкаНаДокументОчистка(Элемент, СтандартнаяОбработка)
	
		ЭлементыФормы.СтрокТЧ.Значение = "";
		ИмяТабличнойЧастиЗагружаемогоДокумента = Неопределено;
		
КонецПроцедуры

Процедура ИмяТабличнойЧастиЗагружаемогоДокументаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ИмяТабличнойЧастиЗагружаемогоДокумента) Тогда
	     ЭлементыФормы.СтрокТЧ.Значение = "Строк ТЧ = " + СсылкаНаДокумент[ИмяТабличнойЧастиЗагружаемогоДокумента].Количество();
	КонецЕсли;
	
	ИнициализацияКнопкиВыгрузки();

КонецПроцедуры

Процедура ВыгрузитьВДокументНажатие(Элемент)
	
	// Использует следующие реквизиты формы: 
	// 	СсылкаНаДокумент	
	// 	ОчищатьТЧПриВыгрузкеВДокумент
	// 	ИмяТабличнойЧастиЗагружаемогоДокумента
	
	Если СпособВыгрузкиДерево() Тогда 
		ПоказатьПредупреждение(, "Данный функционал работает только для способа выгрузки ""Список"" ", 10);
		Возврат;
	КонецЕсли;
	
	лРезультатЗапроса = РезультатЗапроса();
	
	Если лРезультатЗапроса.Количество() = 0 Тогда 
		ПоказатьПредупреждение(, "Результат запроса пуст.", 10);
		Возврат;
	КонецЕсли;
	
	Если СсылкаНаДокумент = Неопределено Тогда
		ПоказатьПредупреждение(, "Выберите документ для заполнения.", 10);
		ТекущийЭлемент = ЭлементыФормы.СсылкаНаДокумент;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяТабличнойЧастиЗагружаемогоДокумента) Тогда
		ПоказатьПредупреждение(, "Не указана табличная часть.", 10);
		ТекущийЭлемент = ЭлементыФормы.ИмяТабличнойЧастиЗагружаемогоДокумента;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		лДокументДляЗаполнения = Документы[СсылкаНаДокумент.Метаданные().Имя].СоздатьДокумент();
	Иначе
		лДокументДляЗаполнения = СсылкаНаДокумент.ПолучитьОбъект();
	КонецЕсли;
	
	Если ОчищатьТЧПриВыгрузкеВДокумент Тогда
		лДокументДляЗаполнения[ИмяТабличнойЧастиЗагружаемогоДокумента].Загрузить(лРезультатЗапроса);
	Иначе
		Для Каждого СтрокаРезультатаЗапроса Из лРезультатЗапроса Цикл
			лНоваяСтрокаДокумента = лДокументДляЗаполнения[ИмяТабличнойЧастиЗагружаемогоДокумента].Добавить();
			ЗаполнитьЗначенияСвойств(лНоваяСтрокаДокумента, СтрокаРезультатаЗапроса);						
		КонецЦикла;
	КонецЕсли;
	
	лДокументДляЗаполнения.ПолучитьФорму().Открыть();
	
КонецПроцедуры // ВыгрузитьВДокументНажатие()











// динамически формируемые кнопки

Процедура ВыборМенюИнформация(Кнопка)
	гНажатиеНаКнопкуВыборМенюИнформация(Кнопка.Имя);
КонецПроцедуры 

Процедура КнопкаМенюПолучениеКода1СПоЗапросуПолучитьКод1ССВыборкой(Кнопка)
	ОбработкаДействияПолучитьКод1С(0)
КонецПроцедуры

Процедура КнопкаМенюПолучениеКода1СПоЗапросуПолучитьКод1ССТаблицейЗначений(Кнопка)
	ОбработкаДействияПолучитьКод1С(1)
КонецПроцедуры

Процедура КнопкаМенюПолучениеКода1СПоЗапросуПолучитьКод1ССОбработкойРезультата(Кнопка)
	ОбработкаДействияПолучитьКод1С(2)
КонецПроцедуры

Процедура КнопкаМенюПолучениеЗапросаИзКода1СПолучитьЗапросСОбработкой(Кнопка)
	ОбработкаДействияКодЗапросПолучитьЗапрос(Ложь);
КонецПроцедуры

Процедура КнопкаМенюПолучениеЗапросаИзКода1СПолучитьЗапросБезОбработки(Кнопка)
	ОбработкаДействияКодЗапросПолучитьЗапрос(Истина);
КонецПроцедуры





















// Обработчик события при смене страницы панели
//
Процедура ПанельРезультатаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элемент.ТекущаяСтраница.Имя = "ВыгрузкаВДокумент" Тогда
		ИнициализацияКнопкиВыгрузки();
	Иначе	
		ЗагрузитьРезультат();
	КонецЕсли;
	
КонецПроцедуры // ПанельРезультатаПриСменеСтраницы()


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоЗапросов

// Обработчик выбора строки в дереве запросов
//
Процедура ДеревоЗапросовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ВыполнитьЗапросИзФормы(мЭлементФормыРеквизитаТаблицы, Ложь);
	
КонецПроцедуры // ДеревоЗапросовВыбор()

// Обработчик активации строки в дереве запросов
//
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)

	// если мПрограммноеДобавлениеСтрокиЗапроса = Истина Тогда 
	//	мПрограммноеДобавлениеСтрокиЗапроса = Ложь;
	//	мТекущаяСтрока = Элемент.ТекущаяСтрока;
	//	Возврат;
	// конецЕсли;
	
	СохранитьЗначенияПоЗапросу(мТекущаяСтрока);
	
	мТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	// чистим ссылки на удаленные строки
	Пока мМассивУдаленныхСтрок.Количество() Цикл
		лУдаленнаяСтрока = мМассивУдаленныхСтрок[0];
		лМассивУдаляемыхЭлементов = ИсполняемыйКод.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", лУдаленнаяСтрока));
		Для Каждого УдаляемыйЭлемент Из лМассивУдаляемыхЭлементов Цикл
			ИсполняемыйКод.Удалить(УдаляемыйЭлемент);
		КонецЦикла;
		лМассивУдаляемыхЭлементов = ПараметрыЗапросов.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", лУдаленнаяСтрока));
		Для Каждого УдаляемыйЭлемент Из лМассивУдаляемыхЭлементов Цикл
			ПараметрыЗапросов.Удалить(УдаляемыйЭлемент);
		КонецЦикла;
		мМассивУдаленныхСтрок.Удалить(0);
	КонецЦикла;
	
	Если ДеревоЗапросов.Строки.Количество() <> 0 И мТекущаяСтрока <> Неопределено Тогда

		СпособВыгрузки       = мТекущаяСтрока.СпособВыгрузки;
		СтатусДереваЗапросов = мТекущаяСтрока.Имя;
		
		ЗадатьТекстЗапроса(мТекущаяСтрока.ТекстЗапроса);
		
		мФормаПараметров.ПараметрыСписок.Очистить();
		// заполняем параметры для текущей строки запроса
		Если Не ПустаяСтрока(мТекущаяСтрока.Идентификатор) Тогда 
			Для каждого СтрокаИсходнойТаблицы Из ПараметрыЗапросов.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", мТекущаяСтрока.Идентификатор)) Цикл
				ДобавитьПараметрВСписокНаФорме(мФормаПараметров.ПараметрыСписок, СтрокаИсходнойТаблицы);
			КонецЦикла;
		КонецЕсли;
		
		// заполняем глобальные параметры для текущей строки запроса
		Для каждого СтрокаИсходнойТаблицы Из ПараметрыЗапросов.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", "")) Цикл
			ДобавитьПараметрВСписокНаФорме(мФормаПараметров.ПараметрыСписок, СтрокаИсходнойТаблицы, Истина);
		КонецЦикла;

		// заполняем исполняемый код для текущей строки запроса
		мФормаИсполняемыйКод.ИсполняемыйКодСписок.Очистить();
		Для каждого СтрокаИсходнойТаблицы Из ИсполняемыйКод.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", мТекущаяСтрока.Идентификатор)) Цикл
			НоваяСтрока       = мФормаИсполняемыйКод.ИсполняемыйКодСписок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсходнойТаблицы, "Имя, ИдентификаторСтроки, Текст");
		КонецЦикла;
		
	Иначе
		ЗадатьТекстЗапроса("");
		мФормаПараметров.ПараметрыСписок.Очистить();
		мФормаИсполняемыйКод.ИсполняемыйКодСписок.Очистить();
		мФормаПараметрыИБ.ТаблицаПараметров.Очистить();
	КонецЕсли;

КонецПроцедуры // ДеревоЗапросовПриАктивизацииСтроки()

// Обработчик события перед удалением строки в дереве запросов
//
Процедура ДеревоЗапросовПередУдалением(Элемент, Отказ)

	Если ДеревоЗапросов.Строки.Количество() = 1 И ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = ДеревоЗапросов.Строки[0] Тогда   
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияВопросаСоздатьНовыйФайл", мЭтотОбъектФорма), "Список запросов должен содержать хотя бы одну строку. Создать новый файл?", РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	мМассивИзмененныхСтрок.Добавить(мТекущаяСтрока.Идентификатор);
	мМассивУдаленныхСтрок.Добавить(мТекущаяСтрока.Идентификатор);
	
	мТекущаяСтрока     = Неопределено;
	Модифицированность = Истина;

КонецПроцедуры // ДеревоЗапросовПередУдалением()

Процедура ДеревоЗапросовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	лТекущаяСтрока = Элемент.ТекущаяСтрока;
	Если Копирование Тогда
		
		СохранитьЗначенияПоЗапросу(мТекущаяСтрока);
		
		ПараметрыВерсииОбработки = ПараметрыВерсииОбработки();
		СкопироватьДеревоЗапросовРекурсивно(мТекущаяСтрока, лТекущаяСтрока, ПараметрыВерсииОбработки);
		
		мТекущаяСтрока = лТекущаяСтрока;
	КонецЕсли;
	
	Если (НоваяСтрока ИЛИ Копирование) Тогда 
		Если мТекущаяСтрока.СпособВыгрузки = Неопределено Тогда
			мТекущаяСтрока.СпособВыгрузки = 1; 
			СпособВыгрузки = 1;
			ДействияПриИзмененииСпособаВыгрузки();
		КонецЕсли;
		
		Если НоваяСтрока Тогда 
			мТекущаяСтрока.Идентификатор = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДеревоЗапросовПриНачалеРедактирования()

Процедура ДеревоЗапросовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда 
		мОтменаРедактирования = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	
	Если Копирование Тогда 
		
		Отказ = Истина;
		
		СохранитьЗначенияПоЗапросу(мТекущаяСтрока);
		
		РодительТекущейСтроки = ?(мТекущаяСтрока.Родитель = Неопределено, ДеревоЗапросов, мТекущаяСтрока.Родитель);
		
		лНоваяСтрока = РодительТекущейСтроки.Строки.Добавить();
		
		ПараметрыВерсииОбработки = ПараметрыВерсииОбработки();
		СкопироватьДеревоЗапросовРекурсивно(мТекущаяСтрока, лНоваяСтрока, ПараметрыВерсииОбработки);
		
		ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = лНоваяСтрока;				
	КонецЕсли;
	
КонецПроцедуры // ДеревоЗапросовПередНачаломДобавления()


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультатЗапроса

Процедура РезультатЗапросаПриАктивизацииЯчейки(Элемент)
	ЗаполнитьЗначениеАгрегатнойФункции();
КонецПроцедуры

// Обработчик выбора строки в таблице результата
//
Процедура РезультатЗапросаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
    СодержимоеЯчейки = ВыбраннаяСтрока[Колонка.Имя];

	Если ТипЗнч(СодержимоеЯчейки) = Тип("ТаблицаЗначений") Тогда
		ФормаВложеннойТаблицы = Обработка.ПолучитьФорму("ФормаВложеннойТаблицы", ЭтаФорма);
		ФормаВложеннойТаблицы.ВложеннаяТаблица = СодержимоеЯчейки;
		ФормаВложеннойТаблицы.ЭлементыФормы.ВложеннаяТаблица.СоздатьКолонки();
		ФормаВложеннойТаблицы.Открыть();
	ИначеЕсли Не ЗначениеЗаполнено(СодержимоеЯчейки) Тогда 
		ПоказатьПредупреждение(, "[Пустое значение типа: " + ТипЗнч(СодержимоеЯчейки) + "]", 10);
	Иначе
		ПоказатьЗначение(, СодержимоеЯчейки);
	КонецЕсли;

КонецПроцедуры // РезультатЗапросаВыбор()

Процедура РезультатЗапросаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ОбновитьСтрокуСтатуса();
	
КонецПроцедуры // РезультатЗапросаПриПолученииДанных()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и функции

// Функция формирует строку "XX час XX мин XX сек" или "меньше секунды"
// Параметры функции:
// 	Секунд - Число - количество секунд, которые необходимо преобразовать в строку
//
Функция ПреобразоватьСекунды(Секунд)
	
	Если Секунд > 0 Тогда
		Час = Цел(Секунд / 60 / 60);
		Мин = Цел((Секунд % 3600) / 60);
		Сек = Цел(Секунд % 60);
		Результат = ?(час > 0, строка(час) + " час ", "") + ?(мин > 0, строка(мин) + " мин ", "") + ?(сек > 0, строка(сек) + " сек", "");
	Иначе
		Результат = "меньше секунды"
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПреобразоватьСекунды()

// Функция формирует таблицу значений
// Параметры функции:
// 	ВнешниеДанные - ComObject - выборка запроса из внешней базы
//
Функция СформироватьТаблицуПоВнешнейВыборке(ВнешниеДанные)
	
	Результат = Новый ТаблицаЗначений;
	
	Для каждого КолонкаТаблицы Из ВнешниеДанные.Колонки Цикл
		Результат.Колонки.Добавить(КолонкаТаблицы.Имя) ;
	КонецЦикла; 
	
	Для каждого СтрокаТаблицы Из ВнешниеДанные Цикл
		НоваяСтрока = Результат.Добавить();
		Для каждого КолонкаТаблицы Из ВнешниеДанные.Колонки Цикл
			НоваяСтрока[КолонкаТаблицы.Имя] = СтрокаТаблицы[КолонкаТаблицы.Имя];
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции // СформироватьТаблицуПоВнешнейВыборке()

Функция ИмяНовогоПараметраСтруктуры(ИмяПараметра, Структура)
	
	НовоеИмяПараметра = ИмяПараметра;
	
	Сч = 1;
	Пока Структура.Свойство(НовоеИмяПараметра) Цикл
		НовоеИмяПараметра = ИмяПараметра + Формат(Сч, "ЧГ=0");
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат НовоеИмяПараметра;
	
КонецФункции // ИмяНовогоПараметраСтруктуры()

Функция КраткоеОписаниеОшибки(ОписаниеОшибки)
	Возврат Прав(ОписаниеОшибки, СтрДлина(ОписаниеОшибки) - Найти(ОписаниеОшибки, "}:"));
КонецФункции // КраткоеОписаниеОшибки()

Функция ПолучитьТаблицуПоСтруктуре(Структура)
	
	лТаблица = Новый ТаблицаЗначений;
	лТаблица.Колонки.Добавить("Ключ");
	лТаблица.Колонки.Добавить("Значение");
	
	Если ТипЗнч(Структура) = Тип("Структура") Тогда
		Для каждого ТекЗначение Из Структура Цикл
			НоваяСтрока          = лТаблица.Добавить();
			НоваяСтрока.Ключ     = ТекЗначение.Ключ;
			НоваяСтрока.Значение = ТекЗначение.Значение;
		КонецЦикла; 
	КонецЕсли;
	
	Возврат лТаблица
	
КонецФункции // ПолучитьТаблицуПоСтруктуре()

Функция ПолучитьОтмеченныеЭлементыСписка(Список)
	
	Результат = Новый СписокЗначений;
	
	Для каждого ЭлементСписка Из Список Цикл
		Если ЭлементСписка.Пометка Тогда 
			Результат.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЕсли;
	КонецЦикла; 

	Возврат Результат

КонецФункции // ПолучитьОтмеченныеЭлементыСписка()
 
Процедура ВывестиСообщение(ТекстСообщения)
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = НСтр("ru = '" + СтрЗаменить(ТекстСообщения, "'", "''") + "'");
    Сообщение.Сообщить();
	
КонецПроцедуры // ВывестиСообщение()

// Процедура загружает строку в таблицу значений
//
// Параметры
//  <Текст>  - <Строка> - строка, которую необходимо добавить в таблицу значений
//  <ТаблицаЗначений>  - <ТаблицаЗначений> - Таблица значений, в которую добавляем строку
//  <Разделитель>  - <Строка> - разделитель колонок в строке
//
Процедура ЗагрузитьТекстВТаблицу(ИсходныйТекст, ТаблицаЗначений, Разделитель = Неопределено)
	
	Текст =  Новый ТекстовыйДокумент;	
	Текст.УстановитьТекст(ИсходныйТекст);
	
	лКоличествоСтрок = Текст.КоличествоСтрок();
	
	Если лКоличествоСтрок = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Если Разделитель = Неопределено Тогда
		Разделитель = Символы.Таб;		
	КонецЕсли;
	
	лКоличествоКолонокЭлементаТЗ = ТаблицаЗначений.Колонки.Количество();
	лМассивКолонокСтрокиТаблицы = гРазложитьСтрокуВМассивПодстрок(Текст.ПолучитьСтроку(1), Разделитель);

	Если лМассивКолонокСтрокиТаблицы.Количество() > лКоличествоКолонокЭлементаТЗ Тогда 
		Результат = Вопрос("Добавить колонки в таблице?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Результат = КодВозвратаДиалога.Отмена Тогда 
			Возврат
		ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда 
			Для Сч = лКоличествоКолонокЭлементаТЗ По лМассивКолонокСтрокиТаблицы.Количество() - 1 Цикл
				НоваяКолонка     = ТаблицаЗначений.Колонки.Добавить();
				НоваяКолонка.Имя = "НоваяКолонка__" + Формат(Сч, "ЧН=; ЧГ=0");
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;

	лКоличествоКолонокЭлементаТЗ = ТаблицаЗначений.Колонки.Количество();
	
	Для сч = 1 По Текст.КоличествоСтрок() Цикл
		лМассивКолонокСтрокиТаблицы = гРазложитьСтрокуВМассивПодстрок(Текст.ПолучитьСтроку(сч), Разделитель);
		лКоличествоЗаполняемыхКолонок = Мин(лКоличествоКолонокЭлементаТЗ, лМассивКолонокСтрокиТаблицы.Количество());
		НоваяСтрока = ТаблицаЗначений.Добавить();
		Для Сч1 = 0 По лКоличествоЗаполняемыхКолонок - 1 Цикл
			НоваяСтрока[Сч1] = лМассивКолонокСтрокиТаблицы[Сч1];
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры // ЗагрузитьТекстВТаблицу()

//////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с табличным полем результата запроса

Функция ИмяРеквизитаРезультатЗапроса() Экспорт
	
	Если СпособВыгрузкиДерево() Тогда 
		ОкончаниеИмениРеквизита = "Дерево";
	Иначе
		ОкончаниеИмениРеквизита = "Таблица";
	КонецЕсли;	
	
	Возврат гСвойстваРеквизитаРезультатЗапроса().ИмяРеквизита + ОкончаниеИмениРеквизита;
	
КонецФункции // ИмяРеквизитаРезультатЗапроса()

Функция РезультатЗапроса() Экспорт
	
	Возврат Вычислить(ИмяРеквизитаРезультатЗапроса());
	
КонецФункции // РезультатЗапроса()

Процедура УстановитьРезультатЗапроса(ДанныеЗапроса)
	
	Выполнить(ИмяРеквизитаРезультатЗапроса() + " = ДанныеЗапроса.Скопировать();");
	
	лЭлементФормыСРезультатомЗапроса = ЭлементыФормы.Найти(гСвойстваРеквизитаРезультатЗапроса().ИмяРеквизита);
	лИмяРеквизитаСДаннымиРезультатаЗапроса = ИмяРеквизитаРезультатЗапроса();
	Если лЭлементФормыСРезультатомЗапроса.Данные <> лИмяРеквизитаСДаннымиРезультатаЗапроса Тогда 
		лЭлементФормыСРезультатомЗапроса.Данные = лИмяРеквизитаСДаннымиРезультатаЗапроса;
	КонецЕсли;
	
	ОбновитьСтрокуСтатуса();
	
КонецПроцедуры // УстановитьРезультатЗапроса()

//////////////////////////////////////////////////////////////////////////////////
// Определение констант формы

Функция СпособВыгрузкиДерево() Экспорт
	Возврат СпособВыгрузки = 2;
КонецФункции // СпособВыгрузкиДерево()

Функция ПараметрыВерсииОбработки()
	
	ПараметрыВерсииОбработки = Новый Структура();
	ПараметрыВерсииОбработки.Вставить("ОбновлятьИД"                  , Истина);
	ПараметрыВерсииОбработки.Вставить("ОбновлятьИДСтрокДанныхЗапроса", Истина);
	ПараметрыВерсииОбработки.Вставить("ЭтоСтарыйРелиз"               , Ложь);
	ПараметрыВерсииОбработки.Вставить("НеОпределятьПараметрыРекурсии", Истина);
	
	Возврат ПараметрыВерсииОбработки;
	
КонецФункции // ПараметрыВерсииОбработки()

Функция ШириныКолонокРезультатаЗапросаПоУмолчанию()
	
	лРезультат = ВосстановитьЗначение("КонсольЗапросов_ОтЛавелина_СтруктураСШиринойКолонок");
	
	Если лРезультат = Неопределено ИЛИ ТипЗнч(лРезультат) <> Тип("Структура") Тогда 
		
		лРезультат = Новый Структура
		
	КонецЕсли;
	
	Возврат лРезультат;
	
КонецФункции // ШириныКолонокРезультатаЗапросаПоУмолчанию()

Процедура УстановитьШириныКолонокРезультатаЗапросаПоУмолчанию(СтруктураСШиринамиКолонок)
	
	СохранитьЗначение("КонсольЗапросов_ОтЛавелина_СтруктураСШиринойКолонок", СтруктураСШиринамиКолонок);
	
КонецПроцедуры // УстановитьШириныКолонокРезультатаЗапросаПоУмолчанию()
	
//////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для обработчиков

Процедура ДействияПриИзмененииСпособаВыгрузки()
	
	Если СпособВыгрузкиДерево() Тогда
		УстановитьРезультатЗапроса(Новый ДеревоЗначений);
		ЭлементыФормы.ВыводитьВсеИтогиДляДерева.Доступность = Истина;
	Иначе
		ВыводитьВсеИтогиДляДерева = Ложь;
		УстановитьРезультатЗапроса(Новый ТаблицаЗначений);
		ЭлементыФормы.ВыводитьВсеИтогиДляДерева.Доступность = Ложь;
	КонецЕсли;
	
	мОкончаниеВыполненияЗапроса = Неопределено;
	мНачалоВыполненияЗапроса    = Неопределено;
	
	ОбновитьСтрокуСтатуса();
	
КонецПроцедуры // ДействияПриИзмененииСпособаВыгрузки()

//////////////////////////////////////////////////////////////////////////////////
// Интерфейсные процедуры

Процедура ОбновитьСтрокуСтатуса()
	
	Если ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Имя = "Результат" Тогда
		
		лРезультатЗапроса = РезультатЗапроса();
		
		Если СпособВыгрузкиДерево() Тогда
			лКоличествоСтрокВЗапросе = лРезультатЗапроса.Строки.Количество();
		ИначеЕсли лРезультатЗапроса.Количество() > 0 Тогда
			лКоличествоСтрокВЗапросе = лРезультатЗапроса.Количество();
		Иначе
			лКоличествоСтрокВЗапросе = 0;
		КонецЕсли;
		
		Если лКоличествоСтрокВЗапросе > 0 Тогда 
			СтатусРезультатаТаблицы = "Строк в запросе: " + лКоличествоСтрокВЗапросе;
		Иначе
			СтатусРезультатаТаблицы = "";
		КонецЕсли;
		
		Если мОкончаниеВыполненияЗапроса <> Неопределено и мНачалоВыполненияЗапроса <> Неопределено Тогда
			СтатусРезультатаТаблицы = СтатусРезультатаТаблицы + ?(СтатусРезультатаТаблицы = "", "", "; ") + 
				"Выполнение запроса: " + ПреобразоватьСекунды(мОкончаниеВыполненияЗапроса - мНачалоВыполненияЗапроса);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСтрокуСтатуса()

Процедура ПерейтиНаСтраницуСРезультатомЗапроса()
	
	ЭлементыФормы.ПанельРезультата.ТекущаяСтраница = ЭлементыФормы.ПанельРезультата.Страницы[0];
	
КонецПроцедуры // ПерейтиНаСтраницуСРезультатомЗапроса()

Процедура ИнициализацияКнопкиВыгрузки()
	
	лВыгрузитьВДокументДоступность = (РезультатЗапроса().Количество() > 0) И 
		СсылкаНаДокумент <> Неопределено И 
		ЗначениеЗаполнено(ИмяТабличнойЧастиЗагружаемогоДокумента);
	
	Если НЕ лВыгрузитьВДокументДоступность Тогда 
		Если РезультатЗапроса().Количество() = 0 Тогда
			ЭлементыФормы.ВыгрузитьВДокумент.Заголовок = "Результат запроса пуст. Нет данных для выгрузки.";
		ИначеЕсли СсылкаНаДокумент = Неопределено Тогда 
			ЭлементыФормы.ВыгрузитьВДокумент.Заголовок = "Необходимо выбрать документ (или тип документа) для выгрузки.";
		ИначеЕсли ЗначениеЗаполнено(ИмяТабличнойЧастиЗагружаемогоДокумента) Тогда 
			ЭлементыФормы.ВыгрузитьВДокумент.Заголовок = "Для выгрузки необходимо указать табличную часть.";
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
			ЭлементыФормы.ВыгрузитьВДокумент.Заголовок = "Выгрузить в новый документ <" + ЭлементыФормы.СсылкаНаДокумент.Значение.Метаданные().Имя + "." + ИмяТабличнойЧастиЗагружаемогоДокумента + ">";
		Иначе
			ЭлементыФормы.ВыгрузитьВДокумент.Заголовок = "Выгрузить в <" + СсылкаНаДокумент.Метаданные().Имя + " № " + СокрЛП(СсылкаНаДокумент.Номер) + "." + ИмяТабличнойЧастиЗагружаемогоДокумента + ">";
		КонецЕсли;
	КонецЕсли;

	ЭлементыФормы.ВыгрузитьВДокумент.Доступность = лВыгрузитьВДокументДоступность;
	
КонецПроцедуры // ИнициализацияКнопкиВыгрузки()

//////////////////////////////////////////////////////////////////////////////////
// Действия по событиям формы

Процедура ВыполнитьДействияПриЗакрытииФормы()
	
	СохранитьЗначение("КонсольЗапросов_ИспользоватьАвтосохранение"     , ИспользоватьАвтосохранение);
	СохранитьЗначение("КонсольЗапросов_ИнтервалАвтосохранения"         , ИнтервалАвтосохранения);
	СохранитьЗначение("КонсольЗапросов_ВыводитьВсеИтогиДляДерева"      , ВыводитьВсеИтогиДляДерева);
	СохранитьЗначение("КонсольЗапросов_ФлажокСохранитьПередВыполнением", СохранитьПередВыполнением);
	СохранитьЗначение("КонсольЗапросов_ИмяФайла"                       , мИмяФайла);
	
	мВыполняетсяЗакрытие = Истина;
	Закрыть();
	
КонецПроцедуры // ВыполнитьДействияПриЗакрытииФормы()

//////////////////////////////////////////////////////////////////////////////////
// Действия для кнопок меню "Сервис"

Функция ВыполнитьКод()
	КодДляВыполнения = мФормаИсполняемыйКод.ОткрытьМодально();
	Если КодДляВыполнения <> Неопределено Тогда
		Попытка
			Выполнить(КодДляВыполнения);
		Исключение
			лТекстОшибки = ОписаниеОшибки();
			гВывестиОшибкуВыполненияКода(лТекстОшибки, КодДляВыполнения);
		КонецПопытки;
	КонецЕсли;
КонецФункции // ВыполнитьКод()

// Код предоставлен пользателеи aairt (https://github.com/aairt)
//
Процедура ВыгрузитьРезультатЗапросаВXML()
	
	Если СпособВыгрузки <> 1 Тогда
		ПоказатьПредупреждение(, "Выгрузка работает только для способа выгрузки ""Список"" ", 10);
		Возврат;
	КонецЕсли;
	
	ТекКолонки = мЭлементФормыРеквизитаТаблицы.Колонки;
	Если ТекКолонки.Количество() = 0 Тогда
		Сообщить("Нет результата запроса");
		Возврат;
	КонецЕсли;
	
	ВыбКолонка = ВыбратьКолонкуРезультата();
	Если ВыбКолонка = Неопределено тогда
		Возврат
	КонецЕсли;

	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = "Файлы XML(*.xml)|*.xml";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл для выгрузки";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ИмяФайлаВыгрузки = ДиалогОткрытияФайла.ПолноеИмяФайла;
	Иначе
		Сообщить("Файл не выбран");
		Возврат;
	КонецЕсли;

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайлаВыгрузки, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("_1CV8DtUD", "http://www.1c.ru/V8/1CV8DtUD/");
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("V8Exch", "http://www.1c.ru/V8/1CV8DtUD/");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi"   , "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8"    ,  "http://v8.1c.ru/data");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("V8Exch:Data");
	
	лРезультатЗапроса = РезультатЗапроса();
	
	мФормаПрогрессора.Открыть();
	мФормаПрогрессора.ЭлементыФормы.ИндикаторПроцесса.МаксимальноеЗначение = лРезультатЗапроса.Количество();
	мФормаПрогрессора.НадписьСостоянияИндикатораОбщая = "Формирование печатной формы:";
	Инд = 1;
	мФормаПрогрессора.ЗначениеИндикатора = 1;
	
	Для каждого СтрокаТЧ Из лРезультатЗапроса Цикл
		
		Инд = Инд + 1;
		
		ОбработкаПрерыванияПользователя();
		
		мФормаПрогрессора.ЗначениеИндикатора = Инд;
		мФормаПрогрессора.НадписьСостоянияИндикатораТекущая = "Выгружается " + Инд + " - я строка";
		
		Попытка
			текОбъект = СтрокаТЧ[ВыбКолонка].ПолучитьОбъект();
			ЗаписатьXML(ЗаписьXML, текОбъект);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки; 
	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента(); //V8Exc:Data
	ЗаписьXML.ЗаписатьКонецЭлемента(); //V8Exc:_1CV8DtUD

	Сообщить("Выгружено объектов: " + Инд);
	Сообщить("Даные выгружены в файл:" + ИмяФайлаВыгрузки);
	
	мФормаПрогрессора.Закрыть();
	
КонецПроцедуры // ВыгрузитьРезультатЗапросаВXML()

Процедура ПровестиДокументыДействие(ПровестиДокумент)
	
	Перем лВыполнитьВТранзакции, лРезультатЗапроса;
	
	лИмяКолонки = ВыбратьКолонкуДляОбработкиОбъектовРезультатаЗапроса(лВыполнитьВТранзакции, лРезультатЗапроса);
	
	Если лИмяКолонки = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	лОшибки = 0;
	
	Если ПровестиДокумент Тогда 
		лНадписьСостоянияИндикатораОбщая = "Проведение документа:";
		лТекстОписаниеДействия           = "Проведение документов";
		лРежимЗаписиДокумента            = РежимЗаписиДокумента.ОтменаПроведения;
		лШаблонОписанияДействия          = "Документ '%ТекущийДокумент%' проведен.";
	Иначе
		лНадписьСостоянияИндикатораОбщая = "Отмена проведения документа:";
		лТекстОписаниеДействия           = "Отмена проведения документов";
		лРежимЗаписиДокумента            = РежимЗаписиДокумента.Проведение;
		лШаблонОписанияДействия          = "Документ '%ТекущийДокумент%' снят с проведения.";
	КонецЕсли;
	
	мФормаПрогрессора.ЭлементыФормы.ИндикаторПроцесса.МаксимальноеЗначение = лРезультатЗапроса.Количество();
	мФормаПрогрессора.НадписьСостоянияИндикатораОбщая                      = лНадписьСостоянияИндикатораОбщая;
	мФормаПрогрессора.ЗначениеИндикатора = 1;
	мФормаПрогрессора.Открыть();

	Если лВыполнитьВТранзакции Тогда
		НачатьТранзакцию();
	Конецесли;
	
	ВывестиСообщение("---------------------------------------------------------------------
		|" + лТекстОписаниеДействия + " (колонка '" + лИмяКолонки + "'): начало в " + ТекущаяДата());
	
	Инд = 0;
	Для Каждого СтрокаСРезультатомЗапроса Из лРезультатЗапроса Цикл		
		
		Инд = Инд + 1;
		
		ОбработкаПрерыванияПользователя();
		
		лТекущийДокумент = СтрокаСРезультатомЗапроса[лИмяКолонки].ПолучитьОбъект();
		
		мФормаПрогрессора.ЗначениеИндикатора = Инд;
		мФормаПрогрессора.НадписьСостоянияИндикатораТекущая = лТекущийДокумент;
		
		Попытка
			лТекущийДокумент.Записать(лРежимЗаписиДокумента);
			ВывестиСообщение(СтрЗаменить(лШаблонОписанияДействия, "%ТекущийДокумент%", лТекущийДокумент));
		Исключение
			ВывестиСообщение("Ошибка в строке " + Инд + "[" + СтрокаСРезультатомЗапроса[лИмяКолонки] + "]: " + КраткоеОписаниеОшибки(ОписаниеОшибки()));			
			лОшибки = лОшибки + 1;
			
			Если лОшибки > 100 Тогда
				ВывестиСообщение("Много ошибок. Возможно неправильно указана колонка. Обработка прервана");
				Прервать;
			КонецЕсли;		
		КонецПопытки;
	КонецЦикла;
	
	ВывестиСообщение(лТекстОписаниеДействия + " (колонка '" + лИмяКолонки + "'): окончание в " + ТекущаяДата() + "
		|---------------------------------------------------------------------");

	мФормаПрогрессора.Закрыть();
	
	Если лВыполнитьВТранзакции Тогда
		ЗафиксироватьТранзакцию();
	Конецесли;
	
КонецПроцедуры // ПровестиДокументыДействие()

Процедура УстановитьПометкуУдаленияДействие(Установить)
	
	Перем лВыполнитьВТранзакции, лРезультатЗапроса;
	
	лИмяКолонки = ВыбратьКолонкуДляОбработкиОбъектовРезультатаЗапроса(лВыполнитьВТранзакции, лРезультатЗапроса);
	
	Если лИмяКолонки = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	лОшибки = 0;
	
	Если Установить Тогда 
		лНадписьСостоянияИндикатораОбщая = "Пометка удаления документа:";
		лТекстОписаниеДействия           = "Пометка удаления документов";
		лШаблонОписанияДействия          = "Объект '%ТекущийОбъект%' помечен к удалению.";
	Иначе
		лНадписьСостоянияИндикатораОбщая = "Снятие пометки удаления:";
		лТекстОписаниеДействия           = "Снятие пометок удаления";
		лШаблонОписанияДействия          = "У объекта '%ТекущийОбъект%' снята пометка удаления.";
	КонецЕсли;
	
	мФормаПрогрессора.ЭлементыФормы.ИндикаторПроцесса.МаксимальноеЗначение = лРезультатЗапроса.Количество();
	мФормаПрогрессора.НадписьСостоянияИндикатораОбщая                      = лНадписьСостоянияИндикатораОбщая;
	мФормаПрогрессора.ЗначениеИндикатора = 1;
	мФормаПрогрессора.Открыть();

	Если лВыполнитьВТранзакции Тогда
		НачатьТранзакцию();
	Конецесли;
	
	ВывестиСообщение("---------------------------------------------------------------------
		|" + лТекстОписаниеДействия + " (колонка '" + лИмяКолонки + "'): начало в " + ТекущаяДата());
	
	Инд = 0;
	Для Каждого СтрокаСРезультатомЗапроса Из лРезультатЗапроса Цикл		
		
		Инд = Инд + 1;
		
		ОбработкаПрерыванияПользователя();
		
		лТекущийОбъект = СтрокаСРезультатомЗапроса[лИмяКолонки].ПолучитьОбъект();
		
		мФормаПрогрессора.ЗначениеИндикатора = Инд;
		мФормаПрогрессора.НадписьСостоянияИндикатораТекущая = лТекущийОбъект;
		
		Попытка
			лТекущийОбъект.УстановитьПометкуУдаления(Установить);
			ВывестиСообщение(СтрЗаменить(лШаблонОписанияДействия, "%ТекущийОбъект%", лТекущийОбъект));
		Исключение
			ВывестиСообщение("Ошибка в строке " + Инд + "[" + СтрокаСРезультатомЗапроса[лИмяКолонки] + "]: " + КраткоеОписаниеОшибки(ОписаниеОшибки()));
			Ошибки = Ошибки + 1;
			
			Если Ошибки > 100 Тогда
				ВывестиСообщение("Много ошибок. Возможно неправильно указана колонка. Обработка прервана");
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
	ВывестиСообщение(лТекстОписаниеДействия + " (колонка '" + лИмяКолонки + "'): окончание в " + ТекущаяДата() + "
		|---------------------------------------------------------------------");

	мФормаПрогрессора.Закрыть();
	
	Если лВыполнитьВТранзакции Тогда
		ЗафиксироватьТранзакцию();
	Конецесли;
	
КонецПроцедуры // УстановитьПометкуУдаленияДействие()

Процедура ВыгрузитьКолонкуРезультатаЗапросаВПараметр()
	
	Если СпособВыгрузкиДерево() Тогда 
		ПоказатьПредупреждение(, "Функция доступна только в режиме способа выгрузки ""Список"".", 10);
		Возврат;
	КонецЕсли;
	
	лРезультатЗапроса = РезультатЗапроса();
	
	Если лРезультатЗапроса.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Таблица с результатом запроса пуста.", 10);
		Возврат;
	КонецЕсли;
	
	лИмяКолонки = ВыбратьКолонкуРезультата();
	
	ТаблицаСПараметрами = мФормаПараметров.ПараметрыСписок;
	
	Если ТаблицаСПараметрами.Найти(лИмяКолонки, "Имя") <> Неопределено Тогда
		ПоказатьПредупреждение(, "Такой параметр уже есть", 10);
		Возврат
	Иначе
		НоваяСтрока     = ТаблицаСПараметрами.Добавить();
		НоваяСтрока.Имя = лИмяКолонки;
	Конецесли;
	
	лЗначениеПараметра = Новый СписокЗначений;
	
	Для Каждого СтрокаСРезультатомЗапроса Из лРезультатЗапроса Цикл		
		ОбработкаПрерыванияПользователя();
		лЗначениеПараметра.Добавить(СтрокаСРезультатомЗапроса[лИмяКолонки]);		
	КонецЦикла;
	
	НоваяСтрока.Значение = лЗначениеПараметра;
	НоваяСтрока.Тип      = ПолучитьТипПараметраПоЗначению(лЗначениеПараметра[0].Значение);
	
	ПоказатьПредупреждение(, "Загрузка параметра завершена.", 10);

Конецпроцедуры // ВыгрузитьКолонкуРезультатаЗапросаВПараметр()

Процедура ВыгрузитьРезультатЗапросаВDBF()
	
	Если СпособВыгрузкиДерево() Тогда
		ПоказатьПредупреждение(, "Выгрузка работает только для способа выгрузки ""Список"" ", 10);
		Возврат;
	КонецЕсли;
	
	лКолонкиРезультатаЗапроса = мЭлементФормыРеквизитаТаблицы.Колонки;
	Если лКолонкиРезультатаЗапроса.Количество() = 0 Тогда
		ВывестиСообщение("Нет результата запроса");
		Возврат;
	КонецЕсли;
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла     = "";
	ДиалогОткрытияФайла.Фильтр             = "Файлы DBF(*.dbf)|*.dbf";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок          = "Выберите файл для выгрузки";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ИмяФайлаВыгрузки = ДиалогОткрытияФайла.ПолноеИмяФайла;
	Иначе
		ВывестиСообщение("Файл не выбран");
		Возврат;
	КонецЕсли;
	лВременныйФайл = Новый Файл(ИмяФайлаВыгрузки);
	
	ФайлДБФ                = Новый xBase;
	ФайлДБФ.АвтоСохранение = Истина;
	Если лВременныйФайл.Существует() Тогда
		
		ОтветНаВопрос = Вопрос("Файл с таким именем существует. Дописать данные в файл?", РежимДиалогаВопрос.ДаНетОтмена);
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			// проверим структуру
			ФайлДБФ.ОткрытьФайл(ИмяФайлаВыгрузки);
			Для каждого Колонка Из лКолонкиРезультатаЗапроса Цикл
				Если ФайлДБФ.поля.Найти(Колонка.Имя) = Неопределено Тогда
					Сообщить("Не совпадает структура файла ДБФ с результатом запроса");
					Возврат;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			СоздатьНовыйФайлDBFПоСпискуКолонок(ФайлДБФ, ИмяФайлаВыгрузки, лКолонкиРезультатаЗапроса);
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		СоздатьНовыйФайлDBFПоСпискуКолонок(ФайлДБФ, ИмяФайлаВыгрузки, лКолонкиРезультатаЗапроса)
	КонецЕсли;
	
	лРезультатЗапроса = РезультатЗапроса();
	
	мФормаПрогрессора.Открыть();
	мФормаПрогрессора.ЭлементыФормы.ИндикаторПроцесса.МаксимальноеЗначение = лРезультатЗапроса.Количество();
	мФормаПрогрессора.НадписьСостоянияИндикатораОбщая = "Формирование печатной формы:";
	Инд = 1;
	мФормаПрогрессора.ЗначениеИндикатора = 1;
	
	Для каждого СтрокаТЧ Из лРезультатЗапроса Цикл
		
		Инд = Инд + 1;
		
		ОбработкаПрерыванияПользователя();
		
		мФормаПрогрессора.ЗначениеИндикатора = Инд;
		мФормаПрогрессора.НадписьСостоянияИндикатораТекущая = "Выгружается " + Инд + " - я строка";
		
		ФайлДБФ.Добавить();
		Для каждого Колонка Из лКолонкиРезультатаЗапроса Цикл
			ФайлДБФ[Колонка.Имя] = СтрокаТЧ[Колонка.Имя];
		КонецЦикла;
	КонецЦикла;
	
	ФайлДБФ.ЗакрытьФайл();
	
	ВывестиСообщение("Даные выгружены в файл:" + ИмяФайлаВыгрузки);
	
	мФормаПрогрессора.Закрыть();
	
КонецПроцедуры // ВыгрузитьРезультатЗапросаВDBF()

Процедура СохранитьРезультат()
	
	Перем ЗаголовокКолонки;
	
	Если мРезЗапроса <> Неопределено Тогда
		
		Если ТипЗнч(мРезЗапроса) = Тип("COMОбъект") Тогда 
			
			ПоказатьПредупреждение(, "Функция печати результата запроса доступна только для запроса по текущей базе.", 10);	
			
		ИначеЕсли СпособВыгрузкиДерево() Тогда 
			
			ПоказатьПредупреждение(, "Функция печати результата запроса доступна только для способа выгрузки ""Список"".", 10);	
			
		Иначе
			
			Выборка = мРезЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);

			Если Выборка.Количество() = 0 Тогда
				ПоказатьПредупреждение(, "Выборка пуста.", 10);
				Возврат;
			КонецЕсли;
			
			ТабДок = Новый ТабличныйДокумент;
			КоличествоКолонок = мРезЗапроса.Колонки.Количество();

	        ДетальнаяСтрока = ТабДок.ПолучитьОбласть(1, , 1, );
			ОбластьОбщихИтогов = ТабДок.ПолучитьОбласть(1, , 1, );
		    ОбластьОбщихИтогов.Область().Шрифт = Новый Шрифт(ОбластьОбщихИтогов.Область().Шрифт, , , Истина, , ,);
			ОбластьИерархическихЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
		    ОбластьИерархическихЗаписей.Область().Шрифт = Новый Шрифт(ОбластьИерархическихЗаписей.Область().Шрифт, , , Истина, , ,);
			ОбластьГрупповыхЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
		    ОбластьГрупповыхЗаписей.Область().Шрифт = Новый Шрифт(ОбластьГрупповыхЗаписей.Область().Шрифт, , , Истина, , ,);
			ОбластьЗаголовка = ТабДок.ПолучитьОбласть(1, , 1, );
			
			Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
				Область = ОбластьЗаголовка.Область(1, ТекущееПоле + 1);
				Область.Текст = мРезЗапроса.Колонки[ТекущееПоле].Имя;
	            Область.ШиринаКолонки = мРезЗапроса.Колонки[ТекущееПоле].Ширина;
			КонецЦикла;
			ТабДок.Вывести(ОбластьЗаголовка);
			ОбластьЗаголовка = ТабДок.Область(1, 1, 1, КоличествоКолонок);
			
			ОбластьЗаголовка.Шрифт = Новый Шрифт(ОбластьЗаголовка.Шрифт, , , Истина, , ,);
			ОбластьЗаголовка.ЦветФона = Новый Цвет(255, 255, 0);
			ОбластьЗаголовка.ГраницаСнИзу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);

			мФормаПрогрессора.Открыть();
			мФормаПрогрессора.ЭлементыФормы.ИндикаторПроцесса.МаксимальноеЗначение = Вычислить(ИмяРеквизитаРезультатЗапроса() + ".Количество()");
			мФормаПрогрессора.НадписьСостоянияИндикатораОбщая = "Формирование печатной формы:";
			Инд = 1;
			мФормаПрогрессора.ЗначениеИндикатора = 1;
			
	        ТабДок.НачатьАвтогруппировкуСтрок();
			Пока Выборка.Следующий() Цикл
				
				Инд = Инд + 1;
					
				ОбработкаПрерыванияПользователя();
				
				мФормаПрогрессора.ЗначениеИндикатора = Инд;
				мФормаПрогрессора.НадписьСостоянияИндикатораТекущая = "Выводится " + Инд + " - я строка";
							
				Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
					ИсходнаяСтрока = ОбластьГрупповыхЗаписей;
				ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда 
					ИсходнаяСтрока = ОбластьИерархическихЗаписей;
				ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда 
					ИсходнаяСтрока = ОбластьОбщихИтогов;
				Иначе
					ИсходнаяСтрока = ДетальнаяСтрока;
				КонецЕсли;
					
				Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
					Область = ИсходнаяСтрока.Область(1, ТекущееПоле + 1);
					Область.Текст = Выборка[ТекущееПоле];
					Область.Расшифровка = Выборка[ТекущееПоле];
				КонецЦикла;
				ТабДок.Вывести(ИсходнаяСтрока, Выборка.Уровень());
			КонецЦикла;
			ТабДок.ЗакончитьАвтогруппировкуСтрок();

			мФормаПрогрессора.Закрыть();
			
			ТабДок.ОтображатьСетку = True;
			ТабДок.Защита = Ложь;
			ТабДок.ТолькоПросмотр = Истина;
			ТабДок.Показать("Результат запроса");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СохранитьРезультат()

Процедура ПоказатьДиаграмму()
	
	ФормаСДиаграммой = ПолучитьФорму("Точка", ЭтаФорма);
	Если НЕ ФормаСДиаграммой.Открыта() Тогда
		ФормаСДиаграммой.ЭлементыФормы.Добавить(Тип("Диаграмма"), "Диаграмма");
		ФормаСДиаграммой.ЭлементыФормы.Диаграмма.Высота = ФормаСДиаграммой.Высота;
		ФормаСДиаграммой.ЭлементыФормы.Диаграмма.Ширина = ФормаСДиаграммой.Ширина;
	КонецЕсли;
	
	Диаграмма = ФормаСДиаграммой.ЭлементыФормы.Диаграмма;
	Диаграмма.ТипДиаграммы = ТипДиаграммы.График;
	Диаграмма.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ФормаСДиаграммой.Панель, ГраницаЭлементаУправления.Лево);
	Диаграмма.УстановитьПривязку(ГраницаЭлементаУправления.Право, ФормаСДиаграммой.Панель, ГраницаЭлементаУправления.Право);
	Диаграмма.УстановитьПривязку(ГраницаЭлементаУправления.НИз, ФормаСДиаграммой.Панель, ГраницаЭлементаУправления.НИз);
	Диаграмма.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ФормаСДиаграммой.Панель, ГраницаЭлементаУправления.Верх);
	
	Если СпособВыгрузки <> 1 Тогда
		ПоказатьПредупреждение(, "Выгрузка работает только для способа выгрузки ""Список"" ", 10);
		Возврат;
	КонецЕсли;
	
	лРезультатЗапроса = РезультатЗапроса();
	
	ТекКолонки = мЭлементФормыРеквизитаТаблицы.Колонки;
	Если ТекКолонки.Количество() = 0 ИЛИ лРезультатЗапроса.Количество() = 0 Тогда
		Сообщить("Нет результата запроса");
		Возврат;
	КонецЕсли;
	
	// формируем список серий
	СписокСерий = новый СписокЗначений;
	Для каждого Колонка Из ТекКолонки Цикл
		Попытка
		    ЗначениеВЧисло = Число(лРезультатЗапроса[0][Колонка.Имя]);
			СписокСерий.Добавить(Колонка.Имя,Колонка.Имя);
		Исключение
		КонецПопытки; 
	КонецЦикла; 
	
	Если НЕ СписокСерий.ОтметитьЭлементы() Тогда
		Возврат;
	КонецЕсли;
	
	мФормаПрогрессора.Открыть();
	мФормаПрогрессора.ЭлементыФормы.ИндикаторПроцесса.МаксимальноеЗначение = лРезультатЗапроса.Количество();
	мФормаПрогрессора.НадписьСостоянияИндикатораОбщая = "Формирование данных для диаграммы:";
	Инд = 0;
	
	Диаграмма.Очистить();
	
	
	Для каждого ТекЭлемент Из СписокСерий Цикл
		Диаграмма.УстановитьСерию(ТекЭлемент.Значение);
	КонецЦикла; 
	
	Для каждого СтрокаТЧ Из лРезультатЗапроса Цикл
		
		Инд = Инд + 1;
		
		ОбработкаПрерыванияПользователя();
		
		мФормаПрогрессора.ЗначениеИндикатора = Инд;
		мФормаПрогрессора.НадписьСостоянияИндикатораТекущая = "Выгружается " + Инд + " - я строка";
		
		
		Для каждого Серия Из Диаграмма.Серии Цикл
			Диаграмма.УстановитьТочку();
			// установитьЗначение
		КонецЦикла; 
	
	КонецЦикла;
	
	НоваяСерия = Диаграмма.Серии.Добавить();
	
	ФормаСДиаграммой.Открыть();
	
	мФормаПрогрессора.Закрыть();
	
КонецПроцедуры // ПоказатьДиаграмму()

Процедура ЗапомнитьШиринуКолонокПоляСРезультатомЗапроса(ЭлементыФормы, СтруктураСРазмерами) Экспорт
	
	Для каждого ТекКолонка Из мЭлементФормыРеквизитаТаблицы.Колонки Цикл
		СтруктураСРазмерами.Вставить(ТекКолонка.Имя,ТекКолонка.Ширина);
	КонецЦикла;
	
КонецПроцедуры // ЗапомнитьШиринуКолонокПоляСРезультатомЗапроса()

Процедура ВосстановитьШириныКолонокРезультатаЗапросаПоУмолчанию(ВыводитьСообщения = Истина);
	
	мСтруктураСРазмерами = ШириныКолонокРезультатаЗапросаПоУмолчанию();
	
	Если мСтруктураСРазмерами.Количество() = 0 Тогда 
		
		Если ВыводитьСообщения Тогда 
			ПоказатьПредупреждение(, "Нет сохраненных настроек ширин колонок результата запроса по умолчанию.", 10);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьШириныКолонокРезультатаЗапроса(мСтруктураСРазмерами);
	
КонецПроцедуры // ВосстановитьШириныКолонокРезультатаЗапросаПоУмолчанию()
            




//////////////////////////////////////////////////////////////////////////////////
// Действия с результатом запроса

Функция ВыбратьКолонкуДляОбработкиОбъектовРезультатаЗапроса(ВыполнитьВТранзакции, РезультатЗапроса)
	
	Если СпособВыгрузкиДерево() Тогда 
		ПоказатьПредупреждение(, "Функция доступна только в режиме способа выгрузки ""Список"".", 10);
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапроса();
	
	Если РезультатЗапроса.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Таблица с результатом запроса пуста.", 10);
		Возврат Неопределено;
	КонецЕсли;
	
	Ответ = Вопрос("Выполнить в транзакции?", РежимДиалогаВопрос.ДаНетОтмена); 
	
	ВыполнитьВТранзакции = Ложь;
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат Неопределено;
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		ТекстВопроса = НСтр("ru = 'В данном режиме сделанные изменения отменить невозможно.
			|Продолжить?'");
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Неопределено;
		Конецесли;
	Иначе
		ВыполнитьВТранзакции = Истина;
	Конецесли;
	
	лИмяКолонки = ВыбратьКолонкуРезультата();
	
	Возврат лИмяКолонки;
	
КонецФункции // ВыбратьКолонкуДляОбработкиОбъектовРезультатаЗапроса()
	

//////////////////////////////////////////////////////////////////////////////////
// Обработка текстов запросов

Функция ПолучитьТекстЗапроса(ВернутьВыделенныйТекст)

	лТекстЗапроса = "";
	
	ТекстЗапросаЭФ = ЭлементыФормы.ТекстЗапроса;
	
	Если ВернутьВыделенныйТекст Тогда
		
		лТекстЗапроса = ТекстЗапросаЭФ.ПолучитьВыделенныйТекст();
		
		Если ЗначениеЗаполнено(лТекстЗапроса) Тогда
			
			// удалим последнее помещение во временную таблицу
			Если гСравнитьВерсии(, "8.3.5.1068") >= 0 Тогда // в этой версии появился объект СхемаЗапроса
				
				СхемаЗапроса = Вычислить("Новый СхемаЗапроса");
				СхемаЗапроса.УстановитьТекстЗапроса(лТекстЗапроса);
				
				лКоллекцияПакетовЗапросов = СхемаЗапроса.ПакетЗапросов;
				Если лКоллекцияПакетовЗапросов.Количество() > 0 Тогда 
					лПоследнийПакет = лКоллекцияПакетовЗапросов[лКоллекцияПакетовЗапросов.Количество() - 1];
					Если лПоследнийПакет.ТаблицаДляПомещения <> "" Тогда 
						лПоследнийПакет.ТаблицаДляПомещения = "";
						лТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(лТекстЗапроса) Тогда 
		лТекстЗапроса = ТекстЗапросаЭФ.ПолучитьТекст();
	КонецЕсли;
	
	Возврат лТекстЗапроса;

КонецФункции // ПолучитьТекстЗапроса()

Процедура УстановитьТекстЗапросомПоСправочникам(ПоВсемСправочникам) Экспорт
	
	Если ЭлементыФормы.ТекстЗапроса.ПолучитьТекст()<> "" Тогда
		Если Вопрос("Текущий запрос очистится. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;			
		КонецЕсли;
	КонецЕсли;
	
	СписокМетаданных = Новый СписокЗначений;
	
	Для каждого ТекМетаданное Из Метаданные.Справочники Цикл
		СписокМетаданных.Добавить(ТекМетаданное,ТекМетаданное.Имя, ПоВсемСправочникам);
	КонецЦикла;
	
	Если НЕ ПоВсемСправочникам Тогда 
		Если не СписокМетаданных.ОтметитьЭлементы("Выберите справочники для формирования отчета") Тогда
			Возврат;		
		КонецЕсли;
	Конецесли;
	
	
	ФормаВыбораПолейЗапроса = ПолучитьФорму("ФормаВыбораПолейЗапроса");
	
	Поля = ВосстановитьЗначение("КонсольЗапросов_ОтЛавелина_ПоляВсеСправочники");
	Поля = ?(ЗначениеЗаполнено(Поля), Поля, "Ссылка");		
	
	ФормаВыбораПолейЗапроса.ПоляЗапроса    = Поля;
	ФормаВыбораПолейЗапроса.УсловиеЗапроса = ВосстановитьЗначение("КонсольЗапросов_ОтЛавелина_УсловиеВсеСправочники");
	ФормаВыбораПолейЗапроса.ИсточникДанных = "Справочники." + ПолучитьОтмеченныеЭлементыСписка(СписокМетаданных)[0].Значение.Имя;
	
	РезультатВыбораПолей = ФормаВыбораПолейЗапроса.ОткрытьМодально();
	Если РезультатВыбораПолей = Неопределено Тогда 
		Возврат;		
	КонецЕсли;
	
	Поля    = РезультатВыбораПолей.Поля;
	Условие = РезультатВыбораПолей.Условие;
	
	СохранитьЗначение("КонсольЗапросов_ОтЛавелина_ПоляВсеСправочники"   , Поля);
	СохранитьЗначение("КонсольЗапросов_ОтЛавелина_УсловиеВсеСправочники", Условие);
	
	ТекстЗапроса = "";
	сч           = 0;
	Для каждого ТекМетаданное Из СписокМетаданных Цикл
		
		Если НЕ ТекМетаданное.Пометка Тогда
			Продолжить
		КонецЕсли;
		
		// заменяем шаблонные поля на их значения
		ТекПоля = СтрЗаменить(ВРег(Поля), "[ИМЯ]"    , """" + ТекМетаданное.Значение.Имя + """");
		ТекПоля = СтрЗаменить(ТекПоля   , "[СИНОНИМ]", """" + СтрЗаменить(ТекМетаданное.Значение.Синоним, """", " ") + """");
		
		ТекУсловие = СтрЗаменить(ВРег(Условие), "[ИМЯ]"    , """" + ТекМетаданное.Значение.Имя + """");
		ТекУсловие = СтрЗаменить(ТекУсловие   , "[СИНОНИМ]", """" + СтрЗаменить(ТекМетаданное.Значение.Синоним, """", " ") + """");
		
		ПодЗапрос = "ВЫБРАТЬ " + ТекПоля + " ИЗ Справочник." + ТекМетаданное.Значение.Имя + ?(ТекУсловие = "", "", " ГДЕ " + ТекУсловие);
		
		Запрос = Новый Запрос(Подзапрос);
		Попытка
			ПараметрыЗапросовТекущаяСтрока = Запрос.НайтиПараметры();
		Исключение
			Сообщить("Справочник " + ТекМетаданное.Значение.Имя  + " не попал в запрос (" + ОписаниеОшибки() + ")");
			Продолжить;
		КонецПопытки;
		
		Если сч > 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ 
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ПодЗапрос;
		сч = сч + 1;
	КонецЦикла; 
	
	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ТекстЗапроса);
	
КонецПроцедуры // УстановитьТекстЗапросомПоСправочникам()

Процедура УстановитьТекстЗапросомПоДокументам(ПоВсемДокументам) Экспорт
	
	Если ЭлементыФормы.ТекстЗапроса.ПолучитьТекст()<> "" Тогда
		Если Вопрос("Текущий запрос очистится. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;			
		КонецЕсли;
	КонецЕсли;
	
	СписокМетаданных = Новый СписокЗначений;
	
	Для Каждого ТекМетаданное Из Метаданные.Документы Цикл
		СписокМетаданных.Добавить(ТекМетаданное, ТекМетаданное.Имя, ПоВсемДокументам);
	КонецЦикла;
	
	Если Не ПоВсемДокументам Тогда 
		Если Не СписокМетаданных.ОтметитьЭлементы("Выберите документы для формирования отчета") Тогда
			Возврат;		
		КонецЕсли;
	Конецесли;
	
	Поля = ВосстановитьЗначение("КонсольЗапросов_ОтЛавелина_ПоляВсеДокументы");
	Поля = ?(ЗначениеЗаполнено(Поля), Поля, "Ссылка");		
	
	ФормаВыбораПолейЗапроса                = ПолучитьФорму("ФормаВыбораПолейЗапроса");
	ФормаВыбораПолейЗапроса.ПоляЗапроса    = Поля;
	ФормаВыбораПолейЗапроса.УсловиеЗапроса = ВосстановитьЗначение("КонсольЗапросов_ОтЛавелина_УсловиеВсеДокументы");
	ФормаВыбораПолейЗапроса.ИсточникДанных = "Документы." + ПолучитьОтмеченныеЭлементыСписка(СписокМетаданных)[0].Значение.Имя;
	
	РезультатВыбораПолей = ФормаВыбораПолейЗапроса.ОткрытьМодально();
	Если РезультатВыбораПолей = Неопределено Тогда 
		Возврат;		
	КонецЕсли;
	
	Поля    = РезультатВыбораПолей.Поля;
	Условие = РезультатВыбораПолей.Условие;
	
	СохранитьЗначение("КонсольЗапросов_ОтЛавелина_ПоляВсеДокументы"   , Поля);
	СохранитьЗначение("КонсольЗапросов_ОтЛавелина_УсловиеВсеДокументы", Условие);
	
	ТекстЗапроса = "";
	сч           = 0;
	Для каждого ТекМетаданное Из СписокМетаданных Цикл
		
		Если НЕ ТекМетаданное.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ТекПоля = СтрЗаменить(Поля   , "[ИМЯ]"    , """" + ТекМетаданное.Значение.Имя + """");
		ТекПоля = СтрЗаменить(ТекПоля, "[СИНОНИМ]", """" + СтрЗаменить(ТекМетаданное.Значение.Синоним, """", " ") + """");
		
		ТекУсловие = СтрЗаменить(Условие   , "[ИМЯ]"    , """" + ТекМетаданное.Значение.Имя + """");
		ТекУсловие = СтрЗаменить(ТекУсловие, "[СИНОНИМ]", """" + СтрЗаменить(ТекМетаданное.Значение.Синоним, """", " ") + """");
		
		Подзапрос = "ВЫБРАТЬ " + ТекПоля + " ИЗ Документ." + ТекМетаданное.Значение.Имя + ?(ТекУсловие = "", "", " ГДЕ " + ТекУсловие);
		
		Запрос = Новый Запрос(Подзапрос);
		Попытка
			ПараметрыЗапросовТекущаяСтрока = Запрос.НайтиПараметры();
		Исключение
			Сообщить("Документ " + ТекМетаданное.Значение.Имя  + " не попал в запрос (" + ОписаниеОшибки() + ")");
			Продолжить;
		КонецПопытки;
		
		Если сч > 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + Подзапрос;
		сч = сч + 1;
	КонецЦикла;
	
	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ТекстЗапроса);
	
КонецПроцедуры // УстановитьТекстЗапросомПоДокументам()

Процедура УстановитьТекстЗапросомПоВыбранномуМетаданному()
	
	Если ЭлементыФормы.ТекстЗапроса.ПолучитьТекст() <> "" Тогда
		Если Вопрос("Текущий запрос очистится. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;			
		КонецЕсли;
	КонецЕсли;
	
	СписокКоллекцийМетаданных = Новый СписокЗначений;
	СписокКоллекцийМетаданных.Добавить("Справочник"            , "Справочники"           , Истина,БиблиотекаКартинок.Справочник);
	СписокКоллекцийМетаданных.Добавить("Документ"              ,"Документы"              , Истина,БиблиотекаКартинок.Документ);
	СписокКоллекцийМетаданных.Добавить("Перечисление"          ,"Перечисления"           , Истина,БиблиотекаКартинок.Перечисление);
	СписокКоллекцийМетаданных.Добавить("ПланВидовХарактеристик","ПланыВидовХарактеристик", Истина,БиблиотекаКартинок.ПланВидовХарактеристик);
	СписокКоллекцийМетаданных.Добавить("ПланСчетов"            ,"ПланыСчетов"            , Истина,БиблиотекаКартинок.ПланСчетов);
	СписокКоллекцийМетаданных.Добавить("ПланВидовРасчета"      ,"ПланыВидовРасчета"      , Истина,БиблиотекаКартинок.ПланВидовРасчета);
	СписокКоллекцийМетаданных.Добавить("РегистрСведений"       ,"РегистрыСведений"       , Истина,БиблиотекаКартинок.РегистрСведений);
	СписокКоллекцийМетаданных.Добавить("РегистрНакопления"     ,"РегистрыНакопления"     , Истина,БиблиотекаКартинок.РегистрНакопления);
	СписокКоллекцийМетаданных.Добавить("РегистрБухгалтерии"    ,"РегистрыБухгалтерии"    , Истина,БиблиотекаКартинок.РегистрБухгалтерии);
	СписокКоллекцийМетаданных.Добавить("РегистрРасчета"        ,"РегистрыРасчета"        , Истина,БиблиотекаКартинок.РегистрРасчета);
	СписокКоллекцийМетаданных.Добавить("БизнесПроцесс"         ,"БизнесПроцессы"         , Истина,БиблиотекаКартинок.БизнесПроцесс);
	СписокКоллекцийМетаданных.Добавить("Задача"                ,"Задачи"                 , Истина,БиблиотекаКартинок.Задача);
	
	Сч = 0;
	Пока Сч < СписокКоллекцийМетаданных.Количество() Цикл 
		Если Метаданные[СписокКоллекцийМетаданных[Сч].Представление].Количество() = 0 Тогда 
			СписокКоллекцийМетаданных.Удалить(Сч);
			Сч = Сч - 1;
			КонецЕсли;
		
		Сч = Сч + 1;
	КонецЦикла;
	
	ВыбраннаяКоллекция = СписокКоллекцийМетаданных.ВыбратьЭлемент("Выберите коллекцию");
	
	Если ВыбраннаяКоллекция = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Выбрать все элементы из коллекции [" + ВыбраннаяКоллекция.Представление + "]""", РежимДиалогаВопрос.ДаНетОтмена,,,"Вопрос");
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;
	
	СписокМетаданных = Новый СписокЗначений;	
	Для каждого ТекМетаданное Из Метаданные[ВыбраннаяКоллекция.Представление] Цикл
		СписокМетаданных.Добавить(ТекМетаданное, ТекМетаданное.Имя, Ответ = КодВозвратаДиалога.Да);
	КонецЦикла;

	Если Ответ = КодВозвратаДиалога.Нет Тогда 
		Если Не СписокМетаданных.ОтметитьЭлементы("Выберите элементы коллекции [" + ВыбраннаяКоллекция.Представление + "] для формирования отчета") Тогда
			Возврат;		
		КонецЕсли;
	Конецесли;
	
	ТекстЗапроса = "";
	сч = 0;
	
	ФормаВыбораПолейЗапроса = ПолучитьФорму("ФормаВыбораПолейЗапроса");
	
	ПрефиксСохраняемыхЗначений = "ВыбратьМетаданноеДляЗапроса_" + ВыбраннаяКоллекция.Представление;
	
	Поля = ВосстановитьЗначение("КонсольЗапросов_ОтЛавелина_Поля" + ПрефиксСохраняемыхЗначений);
	
	ФормаВыбораПолейЗапроса.ПоляЗапроса    = Поля;
	ФормаВыбораПолейЗапроса.УсловиеЗапроса = ВосстановитьЗначение("КонсольЗапросов_ОтЛавелина_Условие" + ПрефиксСохраняемыхЗначений);
	ФормаВыбораПолейЗапроса.ИсточникДанных = ВыбраннаяКоллекция.Представление + "." + ПолучитьОтмеченныеЭлементыСписка(СписокМетаданных)[0].Значение.Имя;
	
	РезультатВыбораПолей = ФормаВыбораПолейЗапроса.ОткрытьМодально();
	Если РезультатВыбораПолей = Неопределено Тогда 
		Возврат;		
	КонецЕсли;
	
	Поля = РезультатВыбораПолей.Поля;
	Условие = РезультатВыбораПолей.Условие;
	
	СохранитьЗначение("КонсольЗапросов_ОтЛавелина_Поля" + ПрефиксСохраняемыхЗначений   , Поля);
	СохранитьЗначение("КонсольЗапросов_ОтЛавелина_Условие" + ПрефиксСохраняемыхЗначений, Условие);
	
	Для каждого ТекМетаданное Из СписокМетаданных Цикл
		
		Если НЕ ТекМетаданное.Пометка Тогда
			Продолжить
		КонецЕсли;
		
		ТекПоля = СтрЗаменить(Поля, "[ИМЯ]", """" + ТекМетаданное.Значение.Имя + """");
		ТекПоля = СтрЗаменить(ТекПоля, "[СИНОНИМ]", """" + СтрЗаменить(ТекМетаданное.Значение.Синоним, """", " ") + """");
		
		ТекУсловие = СтрЗаменить(Условие, "[ИМЯ]", """" + ТекМетаданное.Значение.Имя + """");
		ТекУсловие = СтрЗаменить(ТекУсловие, "[СИНОНИМ]", """" + СтрЗаменить(ТекМетаданное.Значение.Синоним, """", " ") + """");
		
		Подзапрос = "ВЫБРАТЬ " + ТекПоля + " ИЗ " + ВыбраннаяКоллекция.Значение + "." + ТекМетаданное.Значение.Имя + ?(ТекУсловие = "", "", " ГДЕ " + ТекУсловие);
		
		Запрос = Новый Запрос(Подзапрос);
		Попытка
			ПараметрыЗапросовТекущаяСтрока = Запрос.НайтиПараметры();
		Исключение
			Сообщить("Объект метаданных " + ВыбраннаяКоллекция.Представление + "." + ТекМетаданное.Значение.Имя  + " не попал в запрос (" + ОписаниеОшибки() + ")", СтатусСообщения.Важное);
			Продолжить;
		КонецПопытки;
		
		Если сч > 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + Подзапрос;
		сч = сч + 1;
	КонецЦикла; 
	
	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ТекстЗапроса);
	
КонецПроцедуры // УстановитьТекстЗапросомПоВыбранномуМетаданному()




//////////////////////////////////////////////////////////////////////////////////
// Инициализация служебных данных

// #рефакторинг: только для совместимости со старыми версиями
//
Процедура УстановитьДополнительныеПараметрыДляСтарыхВерсий()
	
	ДополнительныеПараметры.Колонки.Добавить("Параметр");
	ДополнительныеПараметры.Колонки.Добавить("Значение");
	
	НоваяСтрока = ДополнительныеПараметры.Добавить();
	НоваяСтрока.Параметр = гПараметрыСпецСтрокиДереваЗапросов().Параметр;
	НоваяСтрока.Значение = гПараметрыСпецСтрокиДереваЗапросов().Значение;	
	
КонецПроцедуры // УстановитьДополнительныеПараметрыДляСтарыхВерсий()



//////////////////////////////////////////////////////////////////////////////////
// ЗавершенияАсинхронныхВызовов

Процедура ДиалогВыбораФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда 
		
		мИмяФайла             = ВыбранныеФайлы[0];
		идЗагружаемогоОбъекта = мИмяФайла;
		ЗагрузитьЗапросы(ДополнительныеПараметры.Локально, идЗагружаемогоОбъекта, ДополнительныеПараметры.ВеткаПриемника, ДополнительныеПараметры.ТипЗагружаемогоОбъекта);
		
	КонецЕсли;

КонецПроцедуры // ДиалогВыбораФайлаЗавершение()

&НаКлиенте
Процедура СохранитьЗапросыВФайлПродолжение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Перем лОперация, лТекущийЗапрос;
	
	Если Не ДополнительныеПараметры.Свойство("Операция", лОперация) Тогда 
		лОперация = Неопределено;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("ТекущийЗапрос", лТекущийЗапрос) Тогда 
		лТекущийЗапрос = Неопределено;
	КонецЕсли;
	
	Если ВыбранныеФайлы <> Неопределено Тогда 
		
		лПолноеИмяФайла = ВыбранныеФайлы[0];
		
		ЗаписьJSON = ПолучитьЗапросыВJSON(ДеревоЗапросов, ПараметрыЗапросов, ИсполняемыйКод, лПолноеИмяФайла, Истина, Ложь, лТекущийЗапрос);
		
		Попытка
			ЗаписьJSON.Закрыть();
			Ошибка = Ложь;
		Исключение
			Ошибка = Истина;
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);		
		КонецПопытки; 
		
		Если Не Ошибка Тогда 
			мИмяФайла = лПолноеИмяФайла;
			мМассивИзмененныхСтрок.Очистить();
			ОбновитьЗаголовок();
			Модифицированность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ФайлНеСохранен = (ВыбранныеФайлы = Неопределено) ИЛИ Ошибка;
	
	Если ФайлНеСохранен Тогда 
		Если лОперация = "ВыполнитьЗапрос" Тогда 
			ПоказатьВопрос(Новый ОписаниеОповещения("ВопросЗапросНеСохранилсяПродолжение", мЭтотОбъектФорма, Новый Структура()), 
				"Запрос не сохранился, продолжить выполнение?" + Символы.ПС + "Чтобы не выводился данный вопрос снимите галочку ""Сохранить запрос перед выполнением"".", РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	Иначе		
		Если лОперация = "ВыполнитьЗапрос" Тогда 
			ВыполнитьЗапросИзФормыПродолжение(ДополнительныеПараметры)
		ИначеЕсли лОперация = гОперацииСЗапросами().Новый Тогда 
			НовыйФайлЗапросовДействие();
		ИначеЕсли лОперация = гОперацииСЗапросами().Открыть Тогда 
			ПоказатьДиалогВыбораФайла();
		ИначеЕсли лОперация = "ЗакрытьФорму" Тогда // #рефакторинг определить константу
			ВыполнитьДействияПриЗакрытииФормы();
		КонецЕсли;				
	КонецЕсли;
	
КонецПроцедуры // СохранитьЗапросыВФайлПродолжение()

Процедура ВыполнитьПослеЗакрытияВопросанеНайденыВременныеТаблицы(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ЗагрузитьРезультат();
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьПослеЗакрытияВопросанеНайденыВременныеТаблицы()

Процедура ВыполнитьПослеЗакрытияВопросаСоздатьНовыйФайл(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		НовыйФайлЗапросовДействие();
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьПослеЗакрытияВопросаСоздатьНовыйФайл()

Процедура ВопросЗапросНеСохранилсяПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ВыполнитьЗапросИзФормыПродолжение(Параметры);	
	КонецЕсли;
	
КонецПроцедуры // ВопросЗапросНеСохранилсяПродолжение()

&НаКлиенте
Процедура ПослеВопросаСохранитьИзмененияПродолжение(Результат, Параметры) Экспорт
	
	Перем лОперация;
	
	Если Не Параметры.Свойство("Операция", лОперация) Тогда 
		лОперация = Неопределено;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		
		Если лОперация = гОперацииСЗапросами().Новый Тогда 
			НовыйФайлЗапросовДействие();
		ИначеЕсли лОперация = гОперацииСЗапросами().Открыть Тогда 
			ПоказатьДиалогВыбораФайла();
		ИначеЕсли лОперация = "ЗакрытьФорму" Тогда // #рефакторинг определить константу
			ВыполнитьДействияПриЗакрытииФормы();
		КонецЕсли;		
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда 
		СохранитьЗапросыВФайлНачало(Ложь, Ложь, Новый Структура("Операция", лОперация));
	КонецЕсли;
	
КонецПроцедуры // ПослеВопросаСохранитьИзмененияПродолжение()

Процедура ПослеВводаСтроки(Строка, Параметры) Экспорт
	Если Строка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	лРежим = Неопределено;
	Если Параметры.Свойство("ВставитьСсылку", лРежим) Тогда 
		Возврат;
	КонецЕсли;
		
	Если лРежим = "ПоказатьТипЗначения" Тогда 
	КонецЕсли;
КонецПроцедуры // ПослеВводаСтроки()




////////////////////////////////////////////////////////////////////////////////
// Работа с деревом запросов

// Функция добавляет в дерево запросов данные из коллекции с запросами
// Параметры:
// 	Запросы	- ДеревоЗначение - источник данных с запросами
//	ВеткаДерева - {ДеревоЗначений|СтрокиДереваЗначений} - коллекция для добавления запросов
//	ЗаменяемыеИД - Соответствие - коллекция, в которой накапливаются пары {СтарыйИД, НовыйИД}. Используется при загрузке из облака
// 	
Функция ПрочитатьЗапросыИзФайлаJSONРекурсивно(Запросы, Знач ВеткаДерева = Неопределено, ЗаменяемыеИД = Неопределено)
	
	Если ВеткаДерева = Неопределено Тогда 
		ВеткаДерева = ДеревоЗапросов;
	КонецЕсли;

	Для Каждого лСтруктураЗапроса Из Запросы Цикл
		
		лНоваяСтрока = ВеткаДерева.Строки.Добавить();
		
		ЗаполнитьЗначенияСвойств(лНоваяСтрока, лСтруктураЗапроса);
		
		Если Не ЗначениеЗаполнено(лНоваяСтрока.СпособВыгрузки) Тогда 
			лНоваяСтрока.СпособВыгрузки = 1;
		КонецЕсли;
		
		Если лНоваяСтрока.Идентификатор = "" Тогда 
			лНоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
			ВывестиСообщение("Ошибка загрузки запроса """ + лНоваяСтрока.Имя + """ (пустой идентификатор). 
				|Возможна потеря выполняемого кода, связанного с данным запроса. 
				|Параметры данного запроса могут отображаться как ""Глобальные"". 
				|Не сохраняйте запрос, скопируйте файл с запросами в другой файл и обратитесь к разработчику. 
				|Ситуация может быть исправлена.");
		КонецЕсли;
		
		Если ЗаменяемыеИД <> Неопределено Тогда 
			лНовыйИД = Новый УникальныйИдентификатор;
			ЗаменяемыеИД.Вставить(лНоваяСтрока.Идентификатор, лНовыйИД);
			лНоваяСтрока.Идентификатор = лНовыйИД;
		КонецЕсли;
		
		ПрочитатьЗапросыИзФайлаJSONРекурсивно(лСтруктураЗапроса.Строки, лНоваяСтрока, ЗаменяемыеИД);
	КонецЦикла; 
	
	Возврат лНоваяСтрока;
	
КонецФункции // ПрочитатьЗапросыИзФайлаJSONРекурсивно()

Процедура ДобавитьВеткуДереваЗапросов(Данные, Родитель)
	
	лЗаменяемыеИД = Новый Соответствие;
	
	лНоваяВетка = ПрочитатьЗапросыИзФайлаJSONРекурсивно(Данные.querys, Родитель, лЗаменяемыеИД);
	
	ДобавитьПараметрыИзСтруктурыJSON(Данные.parameters, лЗаменяемыеИД);
	ДобавитьКодИзСтруктурыJSON(Данные.codes, лЗаменяемыеИД);
	
	Если лНоваяВетка <> Неопределено Тогда 
		ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = ДеревоЗапросов.Строки.Найти(?(ТипЗнч(Родитель) = Тип("СтрокаДереваЗначений"), Родитель.Идентификатор, лНоваяВетка.Идентификатор), "Идентификатор", Истина);			
		Активизировать();
		Модифицированность = Истина;
	КонецЕсли;
		
КонецПроцедуры // ДобавитьВеткуДереваЗапросов()

Процедура СохранитьШаблоныВДополнительныеПараметры()
	
	ПараметрСШаблонами = ДополнительныеПараметры.Найти("Шаблоны", "Параметр");
	
	Если ПараметрСШаблонами = Неопределено тогда
		// создаем эту строку, если не нашли
		ПараметрСШаблонами = ДополнительныеПараметры.Добавить();
		ПараметрСШаблонами.Параметр = "Шаблоны";
	Конецесли;
	
	ПараметрСШаблонами.Значение = Шаблоны.Скопировать();
	
Конецпроцедуры // СохранитьШаблоныВДополнительныеПараметры()



#КонецОбласти

































/////////////////////////////////////////
// КонтекстнаяПодсказка

// пРОЦЕДУРА ДУБЛЬ(!!!)
Процедура ПоказатьМенюАвтодополненияТекста(ПолеТекстаЗапроса)

	Если ПолеТекстаЗапроса.ВыделенныйТекст <> "" тогда
		Возврат
	Конецесли;
	
	Если Не гИнициализацияVBScript() тогда
		Возврат;	
	КонецЕсли;
	
	// запоминаем текущие координаты курсора 
	лСтруктураКоординат = гПолучитьГраницыВыделенияПоляФормы(ПолеТекстаЗапроса);
	
	// если позиция курсора больше длины текущей строки, то перемещаем курсор в конец строки
	лТекущаяСтрока = ПолеТекстаЗапроса.ПолучитьСтроку(лСтруктураКоординат.СтрокаНач);
	Если СтрДлина(лТекущаяСтрока) < лСтруктураКоординат.КолонкаКон тогда
		лСтруктураКоординат.КолонкаНач = СтрДлина(лТекущаяСтрока)+1;
		лСтруктураКоординат.КолонкаКон = лСтруктураКоординат.КолонкаНач;
	КонецЕсли;
	
	лПозицияКурсораВТексте = ПолучитьПозициюКурсораВТексте(ПолеТекстаЗапроса, лСтруктураКоординат);
	лДанныеДляПодбораКП    = гПолучитьДанныеДляПодбораКП(ПолеТекстаЗапроса.ПолучитьТекст(), лПозицияКурсораВТексте);
	
	лСтруктураВыбора = Неопределено;
	
	Если лДанныеДляПодбораКП <> Неопределено Тогда 
		
		// выбираем значения контекстной подсказки
		Если лДанныеДляПодбораКП.ЗначенияДляВыбора.Количество() = 0 Тогда 
			Возврат;
		Иначе
			Если лДанныеДляПодбораКП.ЗначенияДляВыбора.Количество() = 1 Тогда 
				лВыбранноеЗначение = лДанныеДляПодбораКП.ЗначенияДляВыбора[0];
			Иначе
				Если лДанныеДляПодбораКП.МножественныйВыбор Тогда 
					Если Не лДанныеДляПодбораКП.ЗначенияДляВыбора.ОтметитьЭлементы() Тогда 
						Возврат 
					КонецЕсли;
					
					лВыбранноеЗначение = Новый СписокЗначений;
					Для каждого лВыбранныйЭлемент Из лДанныеДляПодбораКП.ЗначенияДляВыбора Цикл 
						Если Не лВыбранныйЭлемент.Пометка Тогда 
							Продолжить;
						КонецЕсли;
						лВыбранноеЗначение.Добавить(лВыбранныйЭлемент.Значение);
					КонецЦикла; 
				Иначе
					лВыбранноеЗначение = лДанныеДляПодбораКП.ЗначенияДляВыбора.ВыбратьЭлемент();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если лВыбранноеЗначение <> Неопределено Тогда 
		Если ТипЗнч(лВыбранноеЗначение) = Тип("СписокЗначений") Тогда 
			лРезультатПодстановкиКП = "";
			Для каждого ЭлементСписка Из лВыбранноеЗначение Цикл
				лРезультатПодстановкиКП = лРезультатПодстановкиКП + ?(лРезультатПодстановкиКП = "", "", ", ") + ЭлементСписка.Значение;
			КонецЦикла; 
		Иначе
			лРезультатПодстановкиКП = лВыбранноеЗначение.Значение
		КонецЕсли;
		
		Если ПустаяСтрока(лРезультатПодстановкиКП) Тогда 

			лСтруктураВыбора = Новый Структура();
			лСтруктураВыбора.Вставить("ТекстЗапроса", лДанныеДляПодбораКП.ТекстЗапросаДоКурсора + лДанныеДляПодбораКП.ТекстЗапросаПослеКурсора);
			лСтруктураВыбора.Вставить("Режим"       , лДанныеДляПодбораКП.РежимКП.Режим);
			лСтруктураВыбора.Вставить("дельта_x"    , 0);
			лСтруктураВыбора.Вставить("дельта_y"    , 0);
			лСтруктураВыбора.Вставить("дельта_x1"   , 0);
			лСтруктураВыбора.Вставить("дельта_y1"   , 0);						
		Иначе
			лВременныйТД = Новый ТекстовыйДокумент;
			лВременныйТД.УстановитьТекст(лРезультатПодстановкиКП);
			
			лТекстЗапроса = Лев(лДанныеДляПодбораКП.ТекстЗапросаДоКурсора, СтрДлина(лДанныеДляПодбораКП.ТекстЗапросаДоКурсора) - СтрДлина(лДанныеДляПодбораКП.СловоДоКурсора)) + 
				лРезультатПодстановкиКП + Сред(лДанныеДляПодбораКП.ТекстЗапросаПослеКурсора, СтрДлина(лДанныеДляПодбораКП.СловоПослеКурсора) + 1);
				
			лСтруктураВыбора = Новый Структура();
			лСтруктураВыбора.Вставить("ТекстЗапроса", лТекстЗапроса);
			лСтруктураВыбора.Вставить("Режим"       , лДанныеДляПодбораКП.РежимКП.Режим);
			лСтруктураВыбора.Вставить("дельта_x"    , СтрДлина(лДанныеДляПодбораКП.СловоДоКурсора));
			лСтруктураВыбора.Вставить("дельта_y"    , 0);
			лСтруктураВыбора.Вставить("дельта_x1"   , СтрДлина(лВременныйТД.ПолучитьСтроку(лВременныйТД.КоличествоСтрок())) - ?(лВременныйТД.КоличествоСтрок() > 1, 0, СтрДлина(лДанныеДляПодбораКП.СловоДоКурсора)));
			лСтруктураВыбора.Вставить("дельта_y1"   , лВременныйТД.КоличествоСтрок() - 1);								
		КонецЕсли;
	КонецЕсли;
	
	Если лСтруктураВыбора <> Неопределено Тогда 
		
		ПолеТекстаЗапроса.УстановитьТекст(лСтруктураВыбора.ТекстЗапроса);
		
		Если гПродолжитьФормироватьКП(лСтруктураВыбора.Режим, лРезультатПодстановкиКП) Тогда
			ПолеТекстаЗапроса.УстановитьГраницыВыделения(лСтруктураКоординат.СтрокаНач + лСтруктураВыбора.дельта_y1, лСтруктураКоординат.КолонкаНач + лСтруктураВыбора.дельта_x1,
				лСтруктураКоординат.СтрокаНач + лСтруктураВыбора.дельта_y1, лСтруктураКоординат.КолонкаНач + лСтруктураВыбора.дельта_x1);			
			ПоказатьМенюАвтодополненияТекста(ПолеТекстаЗапроса)
		Иначе
			ПолеТекстаЗапроса.УстановитьГраницыВыделения(лСтруктураКоординат.СтрокаНач - лСтруктураВыбора.дельта_y, лСтруктураКоординат.КолонкаНач - лСтруктураВыбора.дельта_x, 
				лСтруктураКоординат.СтрокаНач + лСтруктураВыбора.дельта_y1, лСтруктураКоординат.КолонкаНач + лСтруктураВыбора.дельта_x1);			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // ПоказатьМенюАвтодополненияТекста()

// пРОЦЕДУРА ДУБЛЬ(!!!)
Функция ПолучитьПозициюКурсораВТексте(ПолеФормыСТекстом, СтруктураКоординат)
	
	// выделяем текст от начала, до текущего
	ПолеФормыСТекстом.УстановитьГраницыВыделения(1, 1, СтруктураКоординат.СтрокаКон, СтруктураКоординат.КолонкаКон);
	
	Результат = СтрДлина(ПолеФормыСТекстом.ВыделенныйТекст);

	// возвращаем исходное выделение
	ПолеФормыСТекстом.УстановитьГраницыВыделения(СтруктураКоординат.СтрокаНач, СтруктураКоординат.КолонкаНач, СтруктураКоординат.СтрокаКон, СтруктураКоординат.КолонкаКон);
	
	Возврат Результат
	
КонецФункции // ПолучитьПозициюКурсораВТексте()

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ВыбранЗапрос(ТекущийЗапрос)
	
	ТекущийЗапрос = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	Если ТекущийЗапрос = Неопределено Тогда
		ПоказатьПредупреждение(, "Не выбран запрос для выгрузки.", 10);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ВыбранЗапрос()

&НаКлиенте
Процедура ПерерисоватьСпискиВременныхТаблиц() Экспорт
	
	// Пересоздаем список временных таблиц к показу	
	КнопкаПодменю = мПодменюВременныеТаблицыКнопки.ПоказатьВременнуюТаблицу;
	КнопкаПодменю.Кнопки.Очистить();
	
	Для Каждого ВремТаблица Из мВременныеТаблицы Цикл
		КнопкаПодменю.Кнопки.Добавить(                                                                  
			ВремТаблица.Имя,                                                                            // имя кнопки меню
			ТипКнопкиКоманднойПанели.Действие,                                                          // тип кнопки меню
			ВремТаблица.Имя + " (" + гСоответствиеВременныеТаблицы[ВремТаблица.Имя].Количество() + ")", // добавим в текст кнопки меню количество строк во временной таблице
			Новый Действие("ПодменюВременныеТаблицыПоказатьВременнуюТаблицу"));                // действие кнопки меню
	КонецЦикла;
	
	// Пересоздаем список временных таблиц к удалению
	КнопкаПодменю = мПодменюВременныеТаблицыКнопки.УдалитьВременнуюТаблицу;
	КнопкаПодменю.Кнопки.Очистить();
	
	КнопкаПодменю.Кнопки.Добавить("УдалитьВсе", ТипКнопкиКоманднойПанели.Действие, "Удалить все таблицы", Новый Действие("ПодменюВременныеТаблицыУдалитьВременнуюТаблицу"));
	КнопкаПодменю.Кнопки.Добавить();
	Для Каждого ВремТаблица Из мВременныеТаблицы Цикл
		КнопкаПодменю.Кнопки.Добавить(
			ВремТаблица.Имя,                                                                            // имя кнопки меню
			ТипКнопкиКоманднойПанели.Действие,                                                          // тип кнопки меню
			ВремТаблица.Имя + " (" + гСоответствиеВременныеТаблицы[ВремТаблица.Имя].Количество() + ")", // добавим в текст кнопки меню количество строк во временной таблице
			Новый Действие("ПодменюВременныеТаблицыУдалитьВременнуюТаблицу"));                 // действие кнопки меню
	КонецЦикла;
	
КонецПроцедуры // ПерерисоватьСпискиВременныхТаблиц()

Процедура СравнитьЗапросыДействие()
	СохранитьЗначенияПоЗапросу(мТекущаяСтрока);
	
	ФормаВыбораСтрокиДереваЗапросов = ПолучитьФорму("ФормаВыбораСтрокиДереваЗапросов", ЭтаФорма);
	ФормаВыбораСтрокиДереваЗапросов.Элементыформы.КнопкаНаВерхнийУровень.Заголовок = "Сравнить с текущим запросом...";
	ФормаВыбораСтрокиДереваЗапросов.ЗакрыватьПриВыборе = Истина;

	ФормаВыбораСтрокиДереваЗапросов.ДеревоЗапросов = ДеревоЗапросов;
	ФормаВыбораСтрокиДереваЗапросов.ТекущаяСтрокаВладельца = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	ФормаВыбораСтрокиДереваЗапросов.ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;

	РежимВыбораВеткиДерева = "СравнитьЗапросы";
	ФормаВыбораСтрокиДереваЗапросов.ОткрытьМодально();
КонецПроцедуры

Процедура ЗагрузитьВеткуЛокальноДействие()
	Родитель = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока.Родитель;
	ЗагрузитьВеткуИзФайла(?(Родитель = Неопределено, ДеревоЗапросов, Родитель), ДеревоЗапросов.Колонки);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПараметрыИзСтруктурыJSON(parameters, лЗаменяемыеИД = Неопределено)
	
	Для каждого лПараметр Из parameters Цикл
		
		лНоваяСтрока = ПараметрыЗапросов.Добавить();
		ЗаполнитьЗначенияСвойств(лНоваяСтрока, лПараметр);
		
		Если лЗаменяемыеИД <> Неопределено Тогда 
			лНовыйИд = лЗаменяемыеИД.Получить(лНоваяСтрока.ИдентификаторЗапроса);
			Если лНовыйИд <> Неопределено Тогда 
				лНоваяСтрока.ИдентификаторЗапроса = лНовыйИд;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(лНоваяСтрока.ИдентификаторСтроки) Тогда 
			лНоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор // #рефакторинг необходимо понять откуда приходит пустой Ид
		КонецЕсли;			
		
	КонецЦикла; 
КонецПроцедуры // ДобавитьПараметрыИзСтруктурыJSON()

&НаКлиенте
Процедура ДобавитьКодИзСтруктурыJSON(codes, лЗаменяемыеИД = Неопределено)
	Для каждого лСтрокаСкодом Из codes Цикл
		
		лНоваяСтрока = ИсполняемыйКод.Добавить();
		ЗаполнитьЗначенияСвойств(лНоваяСтрока, лСтрокаСкодом);
		
		Если лЗаменяемыеИД <> Неопределено Тогда 
			лНовыйИд = лЗаменяемыеИД.Получить(лНоваяСтрока.ИдентификаторЗапроса);
			Если лНовыйИд <> Неопределено Тогда 
				лНоваяСтрока.ИдентификаторЗапроса = лНовыйИд;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(лНоваяСтрока.ИдентификаторСтроки) Тогда 
			лНоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор // #рефакторинг необходимо понять откуда приходит пустой Ид
		КонецЕсли;			
		
	КонецЦикла; 
КонецПроцедуры // ДобавитьКодИзСтруктурыJSON()

Процедура ПодключенияКОблакуДействие()
	лФормаДиалога = ПолучитьФорму("ВнешняяОбработка.КонсольЗапросов.Форма.ФормаПодключениеКОблаку",, мЭтотОбъектФорма);
	лФормаДиалога.email = мИмяПользователяВОблаке;
	лФормаДиалога.Открыть();
КонецПроцедуры // ПодключенияКОблакуДействие()

&НаКлиенте
Функция НастройкиПроксиДействие()
	лФормаНастройкиПрокси = ПолучитьФорму("ВнешняяОбработка.КонсольЗапросов.Форма.ФормаНастройкиПрокси");
	Если лФормаНастройкиПрокси.Открыта() Тогда 
		лФормаНастройкиПрокси.Активизировать();
	Иначе
		Если мНастройкиПрокси <> Неопределено Тогда 
			ЗаполнитьЗначенияСвойств(лФормаНастройкиПрокси, мНастройкиПрокси);
		КонецЕсли;
		лФормаНастройкиПрокси.Открыть();
	КонецЕсли;
КонецФункции // НастройкиПроксиДействие()

// процедура ПолучитьСсылкуДействие()
//	
//	лЗаголовокДиалогов = "Получение ссылки в облаке";
//	
//	Если ЭлементыФормы.ДеревоЗапросов.ТекущиеДанные = Неопределено Тогда 
//		ПоказатьПредупреждение(,"Выберите запрос для получения ссылки.",, лЗаголовокДиалогов);
//		Возврат;
//	КонецЕсли;
//	
//	Если Не ЗначениеЗаполнено(мИдФайлаВОблаке) Тогда 
//		Сообщить("Для получения ссылки сохраните запрос в облаке, а после еще раз получите ссылку.", СтатусСообщения.Информация);
//		СохранитьЗапросыДействие(гОперацииСЗапросами().СохранитьКАК, Ложь);
//		Возврат;
//	КонецЕсли;
//	
//	ПоказатьВопрос(
//		Новый ОписаниеОповещения("ПослеЗакрытияВопросаВыгружатьПодчиненныеЗапросы", ЭтаФорма, Новый Структура),
//		"Выгружать подчиненные запросы?",
//		РежимДиалогаВопрос.ДаНетОтмена,,
//		КодВозвратаДиалога.Да,
//		лЗаголовокДиалогов);
//		
// конецПроцедуры // ПолучитьСсылкуДействие()

// процедура ВставитьСсылкуДействие()
//	
//	лСодержимоеБуфера = гПолучитьСодержимоеБуфера();
//	лПутьКСкрипту = "http://consquery.ru/getQuery.php?link=";
//	
//	Если Найти(лСодержимоеБуфера, лПутьКСкрипту) = 0 Тогда // #СтарыйКод Найти->СтрНайти 8.3.6
//		ПоказатьВводСтроки(Новый ОписаниеОповещения("ПослеВводаСтроки", ЭтаФорма, Новый Структура("ВставитьСсылку", Истина)), лПутьКСкрипту, "Ссылка на запрос в облаке",, Истина);
//	Иначе
//		ПоказатьВводСтроки(Новый ОписаниеОповещения("ПослеВводаСтроки", ЭтаФорма, Новый Структура("ВставитьСсылку", Истина)), лСодержимоеБуфера, "Ссылка на запрос в облаке",, Истина);
//	КонецЕсли;	
//	
// конецПроцедуры // ПолучитьСсылкуДействие()

Процедура УстановитьИмяПользователяВОблаке()
	
	лИмяПользователяВОблаке = мИмяПользователяВОблаке;
	лИдентификаторСессии = гВосстановитьИдентификаторСессииConsqueryCloud();
	Если ЗначениеЗаполнено(лИдентификаторСессии) Тогда 
		лРезультат = гПолучитьИмяПодключенногоПользователяВОблаке(лИдентификаторСессии);
		Если лРезультат.Статус = "OK" Тогда 
			мИмяПользователяВОблаке = лРезультат.ИмяПользователя;
		Иначе
			мИмяПользователяВОблаке = Неопределено;
		КонецЕсли;
	Иначе
		мИмяПользователяВОблаке = Неопределено;
	КонецЕсли;
	
	Если лИмяПользователяВОблаке <> мИмяПользователяВОблаке Тогда 
		ОбновитьЗаголовок();
	КонецЕсли;
	
КонецПроцедуры // УстановитьИмяПользователяВОблаке()

Процедура ИнициализацияДанных()
	
	лПлатформаАктуальна  = (гСравнитьВерсии(, "8.3.6.2421") >= 0);
	мВыполняетсяЗакрытие = Ложь;
	
	Если лПлатформаАктуальна Тогда 
		мЭтотОбъектФорма = Вычислить("ЭтотОбъект");
	Иначе
		мЭтотОбъектФорма = Вычислить("ЭтаФорма");
	КонецЕсли;
	
	мНастройкиПрокси = гВосстановитьНастройкиПрокси();
	
	// +++ восстановление имени файла
	мИмяФайла       = ВосстановитьЗначение("КонсольЗапросов_ИмяФайла");
	Если мИмяФайла = Неопределено Тогда
		мИмяФайла = "";
	КонецЕсли;
	// --- восстановление имени файла
	
	УстановитьИмяПользователяВОблаке(); // необходимо вызывать после гВосстановитьНастройкиПрокси
	
	// Создадим структуру дерева запросов
	ДеревоЗапросов.Колонки.Добавить("ТекстЗапроса");
	ДеревоЗапросов.Колонки.Добавить("СпособВыгрузки");
	ДеревоЗапросов.Колонки.Добавить("ПараметрыИБ");
	ДеревоЗапросов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

	ПараметрыЗапросов.Колонки.Добавить("ИдентификаторЗапроса", Новый ОписаниеТипов("Строка"));
	ПараметрыЗапросов.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка"));
	ПараметрыЗапросов.Колонки.Добавить("Значение");
	ПараметрыЗапросов.Колонки.Добавить("Имя");
	ПараметрыЗапросов.Колонки.Добавить("Тип");
	
	ИсполняемыйКод.Колонки.Добавить("ИдентификаторЗапроса", Новый ОписаниеТипов("Строка"));
	ИсполняемыйКод.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка"));
	ИсполняемыйКод.Колонки.Добавить("Текст");
	ИсполняемыйКод.Колонки.Добавить("Имя");
	
	ПараметрыИБ.Колонки.Добавить("ИдентификаторЗапроса", Новый ОписаниеТипов("Строка"));
	ПараметрыИБ.Колонки.Добавить("Использовать");
	ПараметрыИБ.Колонки.Добавить("Установить");
	ПараметрыИБ.Колонки.Добавить("Версия");
	ПараметрыИБ.Колонки.Добавить("КаталогБазы");
	ПараметрыИБ.Колонки.Добавить("SQL_Сервер");
	ПараметрыИБ.Колонки.Добавить("SQL_БазаДанных");
	ПараметрыИБ.Колонки.Добавить("ТипБазы");
	ПараметрыИБ.Колонки.Добавить("ИмяПользователя");
	ПараметрыИБ.Колонки.Добавить("Пароль");
	ПараметрыИБ.Колонки.Добавить("ВыводитьСообщение");
	
	мМассивИзмененныхСтрок = Новый Массив;
	
КонецПроцедуры // ИнициализацияДанных()
 
Функция ТаблицаНайденныхСсылок(КолонкаССылками)

	лРезультатЗапроса = РезультатЗапроса();
	
	Если лРезультатЗапроса.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Таблица с результатом запроса пуста.", 10);
		Возврат Новый ТаблицаЗначений
	КонецЕсли;
	
	КолонкаССылками = ВыбратьКолонкуРезультата();
	
	Если КолонкаССылками = Неопределено Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ВывестиСообщение("---------------------------------------------------------------------
		|Поиск ссылок на объекты (колонка """ + КолонкаССылками + """) начато в " + ТекущаяДата());
	
	лПараметры = Новый Структура;
	
	Для Каждого РегистрБухгалтерии ИЗ Метаданные.РегистрыБухгалтерии Цикл
		лПараметры.Вставить(РегистрБухгалтерии.Имя+"Субконто", РегистрБухгалтерии.ПланСчетов.МаксКоличествоСубконто);
		лПараметры.Вставить(РегистрБухгалтерии.Имя+"Корреспонденция", РегистрБухгалтерии.Корреспонденция);		
	КонецЦикла;
	
	лТаблицаНайденныхСсылок = НайтиПоСсылкам(лРезультатЗапроса.ВыгрузитьКолонку(КолонкаССылками)); // получаем таблицу с полями {Ссылка, Данные, Метаданные}
	лТаблицаНайденныхСсылок.Колонки.Добавить("ПутьКРасположениюСсылкиВОбъекте",, "Путь к расположению ссылки в объекте");
	
	Для каждого СтрокаТаблицы Из лТаблицаНайденныхСсылок Цикл
		
		Ссылка = СтрокаТаблицы.Ссылка;
		Объект = СтрокаТаблицы.Данные;
		СписокПутей = Новый СписокЗначений;
		
		Если Метаданные.Документы.Содержит(СтрокаТаблицы.Метаданные)
			 ИЛИ Метаданные.Справочники.Содержит(СтрокаТаблицы.Метаданные)
			 ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(СтрокаТаблицы.Метаданные)
			 ИЛИ Метаданные.ПланыСчетов.Содержит(СтрокаТаблицы.Метаданные)
			 ИЛИ Метаданные.ПланыВидовРасчета.Содержит(СтрокаТаблицы.Метаданные)
			 ИЛИ Метаданные.Задачи.Содержит(СтрокаТаблицы.Метаданные)
			 ИЛИ Метаданные.БизнесПроцессы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			 
			// справочники
			Если Метаданные.Справочники.Содержит(СтрокаТаблицы.Метаданные) Тогда
				Если СтрокаТаблицы.Метаданные.Владельцы.Содержит(Ссылка.Метаданные()) И Объект.Владелец = Ссылка Тогда
					СписокПутей.Добавить("Владелец");
				КонецЕсли;
				
				Если СтрокаТаблицы.Метаданные.Иерархический И Объект.Родитель = Ссылка Тогда
					СписокПутей.Добавить("Родитель");
				КонецЕсли;
				
				
			// документы
			ИначеЕсли Метаданные.Документы.Содержит(СтрокаТаблицы.Метаданные)  Тогда
				
				Для Каждого Движение ИЗ СтрокаТаблицы.Метаданные.Движения Цикл
					
					ЭтоДвижениеРегистраБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(Движение);
					ЕстьКорреспонденция = ЭтоДвижениеРегистраБухгалтерии и лПараметры[Движение.Имя + "Корреспонденция"];
					
					НаборЗаписей  = Объект.ПолучитьОбъект().Движения[Движение.Имя];
					НаборЗаписей.Прочитать();
					ТаблицаНабора = НаборЗаписей.Выгрузить();
					
					Если ТаблицаНабора.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					масИменКолонок = Новый Массив;
					
					// Получим имена измерений, которые могут содержать ссылку
					Для Каждого Измерение ИЗ Движение.Измерения Цикл
						Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							Если (Измерение.Имя = "Валюта") И ЕстьКорреспонденция Тогда
								масИменКолонок.Добавить("ВалютаДт");
								масИменКолонок.Добавить("ВалютаКт");
							Иначе
								масИменКолонок.Добавить(Измерение.Имя);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
							
					// Получим имена ресурсов, которые могут содержать ссылку
					Если Метаданные.РегистрыСведений.Содержит(Движение) Тогда
						Для Каждого Ресурс ИЗ Движение.Ресурсы Цикл
							Если Ресурс.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
								масИменКолонок.Добавить(Ресурс.Имя);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
							
					// Получим имена ресурсов, которые могут содержать ссылку
					Для Каждого Реквизит ИЗ Движение.Реквизиты Цикл
						Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							масИменКолонок.Добавить(Реквизит.Имя);
						КонецЕсли;
					КонецЦикла;
					
					// Произведем замены в таблице
					Для Каждого ИмяКолонки Из масИменКолонок Цикл
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, ИмяКолонки);
						Пока СтрокаТабЧасти <> Неопределено Цикл

							СтрокаТабЧасти[ИмяКолонки] = Неопределено;// затираем значение в строке, чтобы строка не попалась на следующей итерации поиска
							СписокПутей.Добавить("Движение_" + Движение.Имя + "_" + ИмяКолонки + "[" + СтрокаТабЧасти.НомерСтроки + "]");
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, ИмяКолонки);
							
						КонецЦикла;
					КонецЦикла;
					
					Если Метаданные.РегистрыБухгалтерии.Содержит(Движение) Тогда
						
						Для ИндексСубконто = 1 по лПараметры[Движение.Имя + "Субконто"] Цикл
							Если ЕстьКорреспонденция Тогда
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
								Пока СтрокаТабЧасти <> Неопределено Цикл
									СтрокаТабЧасти["СубконтоДт"+ИндексСубконто] = Неопределено;// затираем значение в строке, чтобы строка не попалась на следующей итерации поиска
									СписокПутей.Добавить("Движение_" + Движение.Имя + "_СубконтоДт"+ИндексСубконто + "[" + СтрокаТабЧасти.НомерСтроки + "]");
									СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
								КонецЦикла;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
								Пока СтрокаТабЧасти <> Неопределено Цикл
									СтрокаТабЧасти["СубконтоКт"+ИндексСубконто] = Неопределено;
									СписокПутей.Добавить("Движение_" + Движение.Имя + "_СубконтоКт"+ИндексСубконто + "[" + СтрокаТабЧасти.НомерСтроки + "]");
									СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
								КонецЦикла;								
							Иначе							
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
								Пока СтрокаТабЧасти <> Неопределено Цикл
									СтрокаТабЧасти["Субконто"+ИндексСубконто] = Неопределено;
									СписокПутей.Добавить("Движение_" + Движение.Имя + "_Субконто"+ИндексСубконто + "[" + СтрокаТабЧасти.НомерСтроки + "]");
									СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
								КонецЦикла;							
							КонецЕсли;						
						КонецЦикла;
						
						Если Ссылка.Метаданные() = Движение.ПланСчетов Тогда
							Для Каждого СтрокаТабЧасти Из ТаблицаНабора Цикл
								Если ЕстьКорреспонденция Тогда
									Если СтрокаТабЧасти.СчетДт = Ссылка Тогда
										СписокПутей.Добавить("Движение_" + Движение.Имя + "_СчетДт" + "[" + СтрокаТабЧасти.НомерСтроки + "]");
									КонецЕсли;
									Если СтрокаТабЧасти.СчетКт = Ссылка Тогда
										СписокПутей.Добавить("Движение_" + Движение.Имя + "_СчетКт" + "[" + СтрокаТабЧасти.НомерСтроки + "]");
									КонецЕсли;
								Иначе
									Если СтрокаТабЧасти.Счет = Ссылка Тогда
										СписокПутей.Добавить("Движение_" + Движение.Имя + "_Счет" + "[" + СтрокаТабЧасти.НомерСтроки + "]");
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
					Если Метаданные.РегистрыРасчета.Содержит(Движение) Тогда
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "ВидРасчета");
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти["ВидРасчета"] = Неопределено;
							СписокПутей.Добавить("Движение_" + Движение.Имя + "_ВидРасчета" + "[" + СтрокаТабЧасти.НомерСтроки + "]");
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "ВидРасчета");
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла;
				
				
				Для Каждого Последовательность ИЗ Метаданные.Последовательности Цикл
					Если Последовательность.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
						НадоЗаписывать = Ложь;
						НаборЗаписи = Последовательности[Последовательность.Имя].СоздатьНаборЗаписей();
						НаборЗаписи.Отбор.Регистратор.Установить(СтрокаТаблицы.Данные);
						НаборЗаписи.Прочитать();
						ТаблицаНабора = НаборЗаписей.Выгрузить();
						
						Если ТаблицаНабора.Количество() > 0 Тогда
							Для Каждого Измерение ИЗ Последовательность.Измерения Цикл
								Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) И ТаблицаНабора[0][Измерение.Имя]=Ссылка Тогда
									ТаблицаНабора[0][Измерение.Имя] = Неопределено;
									СписокПутей.Добавить("Последовательность_" + Последовательность.Имя + "_Измерение_" + Измерение.Имя);
								КонецЕсли;
							КонецЦикла;					
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Объект[Реквизит.Имя] = Ссылка Тогда
					СписокПутей.Добавить("Реквизит_" + Реквизит.Имя);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						ОбъектТЧ = Объект[ТЧ.Имя];
						СтрокаТабЧасти = ОбъектТЧ.Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = Неопределено;// затираем значение в строке, чтобы строка не попалась на следующей итерации поиска
							СписокПутей.Добавить("ТЧ_" + ТЧ.Имя + "_Реквизит_" + Реквизит.Имя + "[" + СтрокаТабЧасти.НомерСтроки + "]");
							СтрокаТабЧасти = ОбъектТЧ.Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(СтрокаТаблицы.Метаданные) Тогда	
			
			СтруктураИзмерений = Новый Структура;
			НаборЗаписей = РегистрыСведений[СтрокаТаблицы.Метаданные.Имя].СоздатьНаборЗаписей();
			Для Каждого Измерение ИЗ СтрокаТаблицы.Метаданные.Измерения Цикл
				НаборЗаписей.Отбор[Измерение.Имя].Установить(Объект[Измерение.Имя]);
				СтруктураИзмерений.Вставить(Измерение.Имя);
			КонецЦикла;
			Если СтрокаТаблицы.Метаданные.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				НаборЗаписей.Отбор["Период"].Установить(Объект.Период);
			КонецЕсли;
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаНабора = НаборЗаписей.Выгрузить();
			
			Попытка
				Для Каждого Колонка ИЗ ТаблицаНабора.Колонки Цикл
					Если ТаблицаНабора[0][Колонка.Имя] = Ссылка Тогда
						СписокПутей.Добавить(?(СтруктураИзмерений.Свойство(Колонка.Имя), "Измерение_", "") + Колонка.Имя);
					КонецЕсли;
				КонецЦикла;
			Исключение
			КонецПопытки;
			
		КонецЕсли;

		СтрокаТаблицы.ПутьКРасположениюСсылкиВОбъекте = СписокПутей;
		
	КонецЦикла; 
	
	ВывестиСообщение("Поиск ссылок на объекты (колонка """ + КолонкаССылками + """) окончание в " + ТекущаяДата() + "
		|---------------------------------------------------------------------");
	
	Возврат лТаблицаНайденныхСсылок

КонецФункции // ТаблицаНайденныхСсылок()
 
Процедура УстановитьШириныКолонокРезультатаЗапроса(СтруктураСРазмерами)
	
	лКолонкиРезультатаЗапроса = Вычислить("ЭлементыФормы." + гСвойстваРеквизитаРезультатЗапроса().ИмяРеквизита + ".Колонки");
	
	Для каждого Колонка Из лКолонкиРезультатаЗапроса Цикл
		Если СтруктураСРазмерами.Свойство(Колонка.Имя) Тогда
			Колонка.Ширина = СтруктураСРазмерами[Колонка.Имя]
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры // УстановитьШириныКолонокРезультатаЗапроса()

// Обработчик нажатия кнопки командной панели "Выполнить"
//
Процедура ВыполнитьЗапросИзФормы(ЭлементТаблицыРезультата, ВыполнитьПакет, Запрос = Неопределено)

	лПараметры = Новый Структура();
	лПараметры.Вставить("Операция"                , "ВыполнитьЗапрос");
	лПараметры.Вставить("ВыполнитьПакет"          , ВыполнитьПакет);
	лПараметры.Вставить("Запрос"                  , Запрос);
	лПараметры.Вставить("ЭлементТаблицыРезультата", ЭлементТаблицыРезультата);	
	
	Если СохранитьПередВыполнением И Модифицированность Тогда
		СохранитьЗапросыВФайлНачало(Ложь, Ложь, лПараметры);
	Иначе
		ВыполнитьЗапросИзФормыПродолжение(лПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗапросИзФормыПродолжение(Параметры)
	
	Перем лЗапрос, лВыполнитьПакет;
	
	Параметры.Свойство("Запрос"        , лЗапрос);
	Параметры.Свойство("ВыполнитьПакет", лВыполнитьПакет);
	
	Если Модифицированность Тогда 
		СохранитьЗначенияПоЗапросу(мТекущаяСтрока);
	КонецЕсли;
	
	Если лЗапрос = Неопределено Тогда 
		лЗапрос = Новый Запрос;
		лЗапрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	лЗапрос.Текст = СтрЗаменить(ПолучитьТекстЗапроса(Истина), "|", "");
	
	Если ПустаяСтрока(лЗапрос.Текст) Тогда
		ПоказатьПредупреждение(,"Не заполнен текст запроса!", 10);
		Возврат;
	КонецЕсли;
	
	СписокПараметров = лЗапрос.НайтиПараметры();
	
	Для каждого СтрокаПараметров Из мФормаПараметров.ПараметрыСписок Цикл
		
		Если СписокПараметров.Найти(СтрокаПараметров.Имя) = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтрокаПараметров.Тип = гТипыЗначенийПараметров().ТаблицаЗначений Тогда 
			лИдентификаторПараметра = гПреобразоватьВПравильноеНазвание(СтрокаПараметров.ИдентификаторСтроки);
			Если гДанныеВременныхТаблиц.Свойство(лИдентификаторПараметра) Тогда 
				лЗапрос.УстановитьПараметр(СтрокаПараметров.Имя, гДанныеВременныхТаблиц[лИдентификаторПараметра]);
			Иначе
				Сообщить("Параметр " + СтрокаПараметров.Имя + " не простого типа. 
				|Значение данного параметра берется из структуры гДанныеВременныхТаблиц с ключем """ + лИдентификаторПараметра + """.
				|Код для вставки значения параметра через форму выполнения произвольного кода:                              
				|	гДанныеВременныхТаблиц.Вставить(""" + лИдентификаторПараметра + """, %ПеременнаяСоЗначениемПараметра%)", СтатусСообщения.Важное);
			КонецЕсли;
		Иначе
			лЗапрос.УстановитьПараметр(СтрокаПараметров.Имя, СтрокаПараметров.Значение);
		КонецЕсли;
	КонецЦикла;
	
	мНачалоВыполненияЗапроса = ТекущаяДата();
	
	Если лВыполнитьПакет Тогда 
		мРезЗапроса = лЗапрос.ВыполнитьПакет();
	Иначе
		мРезЗапроса = лЗапрос.Выполнить();
	КонецЕсли;
	
	мОкончаниеВыполненияЗапроса = ТекущаяДата();
	
	мТаблицаЗагружена = Ложь;
	мСводнаяТаблицаЗагружена = Ложь;	
	
	// сформируем список временных таблиц
	Если ТипЗнч(лЗапрос) <> Тип("COMОбъект") Тогда 
		
		Если мПодменюВременныеТаблицыКнопки.ИспользоватьМенеджерВременныхТаблиц.Пометка Тогда 
			
			// Проанализируем использование временных таблиц
			Если гИнициализацияVBScript() тогда
				
				// паттерн, позволяющий получить строку с названием виртуальной таблицы
				RegExp.Pattern	= "^(//){0,}.*ПОМЕСТИТЬ(\s){0,}(//){0,}(.){0,}[^\s; ]{1,}";// ищем имена создаваемых таблиц
				Matches			= RegExp.Execute(лЗапрос.Текст);
				ЧислоВхождений	= Matches.Count();
				
				НекорректныеИменаТаблиц = Новый Массив;
				
				Если ЧислоВхождений>0 Тогда 
					
					Для Счетчик = 0 По ЧислоВхождений-1 Цикл
						
						Match = Matches.Item(Счетчик);
						Если Найти(Match.Value, "//") = 0 Тогда
							
							RegExp.Pattern = "ПОМЕСТИТЬ(\s){0,}[^\s; ]{1,}";
							SubMatches = RegExp.Execute(Match.Value);
							Если SubMatches.Count > 0 Тогда // в одной строке может быть вписано сразу несколько вхождений
								
								Для СубСчетчик = 0 По SubMatches.Count - 1 Цикл
									
									SubMatch = SubMatches.Item(СубСчетчик);
									ИмяТаблицы = СокрЛП(Сред(СокрЛП(SubMatch.Value), 10));
									
									Если мВременныеТаблицы.Найти(ИмяТаблицы,"Имя") = Неопределено Тогда
										
										мВременныеТаблицы.Добавить().Имя = ИмяТаблицы;
										
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;						
						КонецЕсли;					
					КонецЦикла;
				КонецЕсли;
				
				RegExp.Pattern	= "^(//){0,}.*УНИЧТОЖИТЬ(\s){0,}(//){0,}(.){0,}[^\s; ]{1,}";
				Matches			= RegExp.Execute(лЗапрос.Текст);
				ЧислоВхождений	= Matches.Count();
				
				НекорректныеИменаТаблиц.Очистить();
				
				Если ЧислоВхождений > 0 Тогда 
					Для Счетчик = 0 По ЧислоВхождений-1 Цикл
						
						Match = Matches.Item(Счетчик);
						Если Найти(Match.Value, "//") = 0 Тогда
							
							RegExp.Pattern = "УНИЧТОЖИТЬ(\s){0,}[^\s; ]{1,}";
							SubMatches = RegExp.Execute(Match.Value);
							Если SubMatches.Count > 0 Тогда // в одной строке может быть вписано сразу несколько вхождений
								Для СубСчетчик = 0 По SubMatches.Count-1 Цикл
									
									SubMatch	= SubMatches.Item(СубСчетчик);
									ИмяТаблицы	= СокрЛП(Сред(СокрЛП(SubMatch.Value), 11));
									
									стрВременнойТаблицы = мВременныеТаблицы.Найти(ИмяТаблицы,"Имя");
									Если стрВременнойТаблицы <> Неопределено Тогда
										мВременныеТаблицы.Удалить(стрВременнойТаблицы);
									Иначе
										НекорректныеИменаТаблиц.Добавить(ИмяТаблицы);
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Счетчик = 0;
				Пока Счетчик < мВременныеТаблицы.Количество() Цикл
					ИмяТаблицы = мВременныеТаблицы[Счетчик].Имя;
					ВременнаяТаблица = кзДобавитьВременнуюТаблицу(ИмяТаблицы, лЗапрос.МенеджерВременныхТаблиц);
					Если ВременнаяТаблица = Неопределено Тогда 
						мВременныеТаблицы.Удалить(Счетчик);
						Счетчик = Счетчик - 1;
					Иначе 
						гСоответствиеВременныеТаблицы.Вставить(ИмяТаблицы, ВременнаяТаблица);
					КонецЕсли;
					Счетчик = Счетчик + 1;
				КонецЦикла;
				
				Для каждого ВременнаяТаблица Из мВременныеТаблицы Цикл
					ИмяТаблицы = ВременнаяТаблица.Имя;
					гСоответствиеВременныеТаблицы.Вставить(ИмяТаблицы, кзДобавитьВременнуюТаблицу(ИмяТаблицы, лЗапрос.МенеджерВременныхТаблиц));
				КонецЦикла; 
				
				Если НекорректныеИменаТаблиц.Количество() > 0 Тогда
					ИменаТаблиц = "";
					Для Счетчик = 0 По Мин(НекорректныеИменаТаблиц.Количество() - 1, 9) Цикл
						ИменаТаблиц = ИменаТаблиц + НекорректныеИменаТаблиц[Счетчик] + Символы.ПС;
					КонецЦикла;
					Если НекорректныеИменаТаблиц.Количество() > 10 Тогда
						ИменаТаблиц = ИменаТаблиц + "..."+Символы.ПС;
					КонецЕсли;
					
					ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияВопросанеНайденыВременныеТаблицы", мЭтотОбъектФорма, Новый Структура), 
						"Некоторые временные таблицы не были найдены в менеджере:" + Символы.ПС+ ИменаТаблиц + "Выполнение запроса возможно приведет к ошибке. Продолжить выполнение?", РежимДиалогаВопрос.ДаНет);
					
					Возврат;
					
				КонецЕсли;
			КонецЕсли; // гИнициализацияVBScript()
		Иначе
			мВременныеТаблицы.Очистить();
		КонецЕсли; 
		
	КонецЕсли; //ТипЗнч(лЗапрос) <> Тип("COMОбъект")
	
	ЗагрузитьРезультат(Параметры.ЭлементТаблицыРезультата);
	
	УстановитьШириныКолонокРезультатаЗапроса(мСтруктураСРазмерами);
	ПерейтиНаСтраницуСРезультатомЗапроса();
	
КонецПроцедуры // ВыполнитьЗапросИзФормыПродолжение()

// Устанавливает текст запроса в текстовом поле
//
// Параметры:
//  Текст - устанавливаемый текст запроса.
//
Процедура ЗадатьТекстЗапроса(Текст)

	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(Текст);

КонецПроцедуры // ЗадатьТекстЗапроса()

// Устанавливает заголовок формы по имени файла запросов
//
// Параметры:
//  Нет.
//
Процедура ОбновитьЗаголовок()

	ЭтаФорма.Заголовок = гЗаголовокОбработки(мИмяПользователяВОблаке, мИмяФайла)
	
КонецПроцедуры // ОбновитьЗаголовок()

Процедура СохранитьЗначенияПоЗапросу(ТекущаяСтрока)

	Если мОтменаРедактирования = Истина Тогда 
		мОтменаРедактирования = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не Модифицированность Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДеревоЗапросов.Строки.Количество() <> 0 И ТекущаяСтрока <> Неопределено Тогда

		Если мМассивИзмененныхСтрок.Найти(ТекущаяСтрока.Идентификатор) = Неопределено Тогда мМассивИзмененныхСтрок.Добавить(ТекущаяСтрока.Идентификатор) КонецЕсли;
		
		Если ТекущаяСтрока.ТекстЗапроса <> ПолучитьТекстЗапроса(Ложь) Тогда
			Модифицированность = Истина;
		КонецЕсли;
		     
		ТекущаяСтрока.СпособВыгрузки = СпособВыгрузки;
		ТекущаяСтрока.ТекстЗапроса   = ПолучитьТекстЗапроса(Ложь);
		
		// #добавлениепараметразапроса 1
		лПараметрыЗапроса = ПараметрыЗапросов.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", ""));		
		Для каждого лПараметрЗапроса Из лПараметрыЗапроса Цикл
			ПараметрыЗапросов.Удалить(лПараметрЗапроса);
		КонецЦикла; 
		
		лПараметрыЗапроса = ПараметрыЗапросов.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", ТекущаяСтрока.Идентификатор));
		Для каждого лПараметрЗапроса Из лПараметрыЗапроса Цикл
			ПараметрыЗапросов.Удалить(лПараметрЗапроса);
		КонецЦикла; 
		
		Для каждого ПараметрЗапроса Из мФормаПараметров.ПараметрыСписок Цикл
			лНоваяСтрока = ПараметрыЗапросов.Добавить();
			ЗаполнитьЗначенияСвойств(лНоваяСтрока, ПараметрЗапроса);
			лНоваяСтрока.Значение = ЗначениеВСтрокуВнутр(ПараметрЗапроса.Значение);
			Если ПараметрЗапроса.ГлобальныйПараметр Тогда 
				лНоваяСтрока.ИдентификаторЗапроса = "";
			Иначе
				лНоваяСтрока.ИдентификаторЗапроса = ТекущаяСтрока.Идентификатор;
			КонецЕсли;
		КонецЦикла; 
		
		// сохраняем исполняемый код
		лИсполняемыйКодМассив = ИсполняемыйКод.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", ТекущаяСтрока.Идентификатор));
		Для каждого лИсполняемыйКод Из лИсполняемыйКодМассив Цикл
			ИсполняемыйКод.Удалить(лИсполняемыйКод);
		КонецЦикла; 
		
		Для каждого лИсполняемыйКод Из мФормаИсполняемыйКод.ИсполняемыйКодСписок Цикл
			лНоваяСтрока = ИсполняемыйКод.Добавить();
			ЗаполнитьЗначенияСвойств(лНоваяСтрока, лИсполняемыйКод);
			лНоваяСтрока.ИдентификаторЗапроса = ТекущаяСтрока.Идентификатор;
		КонецЦикла;
		
		ТекущаяСтрока.ПараметрыИБ = мФормаПараметрыИБ.ТаблицаПараметров.Скопировать();
		
	КонецЕсли;	

	СохранитьШаблоныВДополнительныеПараметры();

КонецПроцедуры // СохранитьЗначенияПоЗапросу()

// Очищает дерево запросов, текстовое поле, список параметров
//
// Параметры:
//  Нет.
//
Процедура ОчиститьДанныеПоЗапросам()

	ДеревоЗапросов.Строки.Очистить();
	
	ЗадатьТекстЗапроса("");
	
	мТекущаяСтрока = Неопределено;
	мФормаПараметров.ПараметрыСписок.Очистить();
	мФормаИсполняемыйКод.ИсполняемыйКодСписок.Очистить();
	мФормаПараметрыИБ.ТаблицаПараметров.Очистить();
	
	ПараметрыЗапросов.Очистить();
	ИсполняемыйКод.Очистить();
	
КонецПроцедуры // ОчиститьДанныеПоЗапросам()

Процедура СкопироватьСтрокуЗапроса(СтрокаДерева, НоваяСтрока, Параметры)

	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
	
	лЭтоСтарыйРелиз = (Параметры.Свойство("ЭтоСтарыйРелиз") И Параметры.ЭтоСтарыйРелиз);
	
	Если лЭтоСтарыйРелиз Тогда 
		НоваяСтрока.Имя = СтрокаДерева.Запрос;
	Иначе
		НоваяСтрока.Имя = СтрокаДерева.Имя;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.Идентификатор) ИЛИ (Параметры.Свойство("ОбновлятьИД") И Параметры.ОбновлятьИД) Тогда 
		НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	НоваяСтрока.ТекстЗапроса  = СтрокаДерева.ТекстЗапроса;
	
	Если лЭтоСтарыйРелиз Тогда 
		// #добавлениепараметразапроса 2
		Если Параметры.ЕстьПараметрыЗапроса И ЗначениеЗаполнено(СтрокаДерева.ПараметрыЗапроса) Тогда 
			Для каждого Строка Из СтрокаДерева.ПараметрыЗапроса Цикл
				лНовыйПараметр = ПараметрыЗапросов.Добавить();
				лНовыйПараметр.ИдентификаторЗапроса = НоваяСтрока.Идентификатор;
				лНовыйПараметр.ИдентификаторСтроки  = Новый УникальныйИдентификатор;
				лНовыйПараметр.Значение             = ЗначениеВСтрокуВнутр(Строка.ЗначениеПараметра);
				лНовыйПараметр.Имя                  = Строка.ИмяПараметра;
			КонецЦикла; 
		КонецЕсли;
		
		Если Параметры.ЕстьВариантыКода И ЗначениеЗаполнено(СтрокаДерева.ВариантыКода) Тогда 
			Для каждого Строка Из СтрокаДерева.ВариантыКода Цикл
				лНовыйКод = ИсполняемыйКод.Добавить();
				лНовыйКод.ИдентификаторЗапроса = НоваяСтрока.Идентификатор;
				лНовыйКод.ИдентификаторСтроки  = Новый УникальныйИдентификатор;
				лНовыйКод.Имя                  = Строка.ИмяВарианта;
				лНовыйКод.Текст                = Строка.ТекстКода;
			КонецЦикла; 
		КонецЕсли;
	Иначе
		
		лОбновлятьИДСтрокДанныхЗапроса = Параметры.Свойство("ОбновлятьИДСтрокДанныхЗапроса") И Параметры.ОбновлятьИДСтрокДанныхЗапроса;
		
		лПараметрыЗапроса = ПараметрыЗапросов.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", СтрокаДерева.Идентификатор));
		Для каждого лПараметрЗапроса Из лПараметрыЗапроса Цикл
			лНовыйПараметр = ПараметрыЗапросов.Добавить();
			ЗаполнитьЗначенияСвойств(лНовыйПараметр, лПараметрЗапроса);
			лНовыйПараметр.ИдентификаторЗапроса = НоваяСтрока.Идентификатор;
			Если лОбновлятьИДСтрокДанныхЗапроса Тогда 
				лНовыйПараметр.ИдентификаторСтроки  = Новый УникальныйИдентификатор;
			КонецЕсли;
		КонецЦикла; 
		
		лИсполняемыйКодМассив = ИсполняемыйКод.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", СтрокаДерева.Идентификатор));
		Для каждого лИсполняемыйКод Из лИсполняемыйКодМассив Цикл
			лНовыйКод = ИсполняемыйКод.Добавить();
			ЗаполнитьЗначенияСвойств(лНовыйКод, лИсполняемыйКод);
			лНовыйКод.ИдентификаторЗапроса = НоваяСтрока.Идентификатор;
			Если лОбновлятьИДСтрокДанныхЗапроса Тогда 
				лНовыйКод.ИдентификаторСтроки  = Новый УникальныйИдентификатор;
			КонецЕсли;
		КонецЦикла; 		
	КонецЕсли;

КонецПроцедуры // СкопироватьСтрокуЗапроса()
 
// Копирует дерево
//
// Параметры:
//  ИсходноеДерево
//	НовоеДерево.
//
Процедура СкопироватьДеревоЗапросовРекурсивно(ИсходноеДерево, НовоеДерево, ПараметрыВерсииОбработки)

	// #рефакторинг: только для совместимости со старым форматом
	Если Не ПараметрыВерсииОбработки.Свойство("ЕстьПараметрыЗапроса") Тогда 
		
		Если ПараметрыВерсииОбработки.ЭтоСтарыйРелиз = Истина Тогда 
			ПараметрыВерсииОбработки.Вставить("ЕстьПараметрыЗапроса", Истина);
			ПараметрыВерсииОбработки.Вставить("ЕстьВариантыКода", Истина);
			
			НазваниеСпециальнойСтроки = ДополнительныеПараметры.Найти("СлужебнаяСтрокаДереваЗапросов", "Параметр");
			
			Если НазваниеСпециальнойСтроки <> Неопределено тогда
				Специальнаястрока = ИсходноеДерево.Строки.Найти(НазваниеСпециальнойСтроки.Значение, "");
				Если СпециальнаяСтрока <> Неопределено тогда
					ЭтаФорма.Шаблоны = СпециальнаяСтрока.ПараметрыЗапроса.Скопировать();
					ИсходноеДерево.Строки.Удалить(СпециальнаяСтрока);
					СохранитьШаблоныВДополнительныеПараметры();
				КонецЕсли;
			КонецЕсли;		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(НовоеДерево) = Тип("СтрокаДереваЗначений") Тогда 
		СкопироватьСтрокуЗапроса(ИсходноеДерево, НовоеДерево, ПараметрыВерсииОбработки);
		Если мМассивИзмененныхСтрок.Найти(ИсходноеДерево.Идентификатор) = Неопределено Тогда мМассивИзмененныхСтрок.Добавить(ИсходноеДерево.Идентификатор) КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаДерева Из ИсходноеДерево.Строки Цикл
		СкопироватьДеревоЗапросовРекурсивно(СтрокаДерева, НовоеДерево.Строки.Добавить(), ПараметрыВерсииОбработки);
	КонецЦикла;

КонецПроцедуры // СкопироватьДеревоЗапросовРекурсивно()

// Подготовка к созданию нового файла запросов
//
// Параметры:
//  Нет.
//
Процедура НовыйФайлЗапросовДействие()

	мИмяФайла = "";
	ОбновитьЗаголовок();
	
	ОчиститьДанныеПоЗапросам();

	мТекущаяСтрока                = ДеревоЗапросов.Строки.Добавить();
	мТекущаяСтрока.Имя            = "Запросы";
	мТекущаяСтрока.Идентификатор  = Новый УникальныйИдентификатор;
	мТекущаяСтрока.СпособВыгрузки = 1; // СпособВыгрузки = 1;
	
	мМассивИзмененныхСтрок.Очистить();
	
	Модифицированность = Ложь;
	
КонецПроцедуры // НовыйФайлЗапросовДействие()

&НаКлиенте
Функция ПрочитатьJSONСОбработкойОшибки(ЧтениеJSON, ТекстОшибки) 
	Попытка
		Результат = ЧтениеJSON.Прочитать();
		Возврат Результат;		
	Исключение
		ТекстОшибки = ОписаниеОшибки();	
		Возврат Ложь;		
	КонецПопытки; 
КонецФункции // ПрочитатьJSONСОбработкойОшибки()

// ДУБЛЬ В УПРАВЛЯЕМОЙ ФОРМЕ 
&НаКлиенте
Функция ПолучитьТипыJSONБЕзЗначений() Экспорт
	
	// null (Null)
	// булево (Boolean)
	// имяСвойства (PropertyName)
	// комментарий (Comment)
	// конецМассива (ArrayEnd)
	// конецОбъекта (ОbjectEnd)
	// НачалоМассива (ArrayStart)
	// НачалоОбъекта (ObjectStart)
	// Ничего (None)
	// строка (String)
	// число (Number)
	
	лМассивТиповJSONБезЗначений = Новый Массив;
	лМассивТиповJSONБезЗначений.Добавить(ТипЗначенияJSON.НачалоМассива);
	лМассивТиповJSONБезЗначений.Добавить(ТипЗначенияJSON.КонецМассива);
	лМассивТиповJSONБезЗначений.Добавить(ТипЗначенияJSON.НачалоОбъекта);
	лМассивТиповJSONБезЗначений.Добавить(ТипЗначенияJSON.КонецОбъекта);
	
	Возврат лМассивТиповJSONБезЗначений;
КонецФункции // ПолучитьТипыJSONБЕзЗначений()

&НаКлиенте
// #дубль функции из управляемой формы
Функция ПрочитатьФайлСЗапросомJSON(локально, идФайла, веткаПриемника, текстОшибки, добавить)
	
	Перем лВерсияФайла, лДата, лНоваяСтрока;
	
	Если Не добавить Тогда 
		ОчиститьДанныеПоЗапросам();
	КонецЕсли;	
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Ошибка     = Ложь;
	
	Если Локально Тогда 
		Попытка
			ЧтениеJSON.ОткрытьФайл(идФайла);
		Исключение
			ТекстОшибки = "Ошибка открытия файла: " + ОписаниеОшибки();
			Возврат - 1;
		КонецПопытки; 
		
		Попытка
			лДанные = ПрочитатьJSON(ЧтениеJSON);
		Исключение 
			ТекстОшибки = "Ошибка формата файла: " + ОписаниеОшибки();
			Возврат 0;
		КонецПопытки;		
	Иначе		
		лИдентификаторСессии = гВосстановитьИдентификаторСессииConsqueryCloud();
		лРезультат = гПолучитьЗапросыИзОблака(лИдентификаторСессии, идФайла, null, null, Истина, мНастройкиПрокси);
		
		Если Не лРезультат.Статус = "OK" Тогда 
			Если лРезультат.НеобходимоПереподключиться Тогда 
				Оповестить("НеобходимоПереподключиться", , ЭтаФорма);
			КонецЕсли;
			Ошибка = Истина;
			ТекстОшибки = "Ошибка получения запросов в облаке: " + лРезультат.ТекстОшибки;
			Возврат - 1;
		Иначе
			лДанные = лРезультат.ДанныеИзОблака;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Ошибка Тогда 
		Попытка
			
			лЗаменяемыеИД = Новый Соответствие;
			
			ПрочитатьЗапросыИзФайлаJSONРекурсивно(лДанные.querys, веткаПриемника);
			
			ДобавитьПараметрыИзСтруктурыJSON(лДанные.parameters);
			ДобавитьКодИзСтруктурыJSON(лДанные.codes);
			
			Возврат 1;
		Исключение
			ЧтениеJSON.Закрыть();
			Если Не Локально Тогда 
				ТекстОшибки = ОписаниеОшибки();
				Возврат - 1;
			КонецЕсли;
		КонецПопытки; 
	КонецЕсли;
	
	//// #рефакторинг +++чтение промежуточного формата файла. В будущем необходимо удалить
	// чтениеJSON = Новый ЧтениеJSON;
	// попытка
	//	ЧтениеJSON.ОткрытьФайл(мИмяФайла);
	//	
	//	лТипыСНачальнымБлоком = Новый Массив;
	//	лТипыСНачальнымБлоком.Добавить(ТипЗначенияJSON.НачалоМассива);
	//	лТипыСНачальнымБлоком.Добавить(ТипЗначенияJSON.НачалоОбъекта);
	//	
	//	лСтэкБлоков = Новый Массив;
	//	
	//	лМассивТиповJSONБезЗначений = ПолучитьТипыJSONБЕзЗначений();

	//	Пока ПрочитатьJSONСОбработкойОшибки(ЧтениеJSON, ТекстОшибки) Цикл
	//		
	//		ТипJSON = ЧтениеJSON.ТипТекущегоЗначения;
	//		
	//		лЭлементСтэка = Новый Структура("ТекущаяПозиция,ТекущаяСтрока", ЧтениеJSON.ТекущаяПозиция, ЧтениеJSON.ТекущаяСтрока);
	//		
	//		Если лМассивТиповJSONБезЗначений.Найти(ЧтениеJSON.ТипТекущегоЗначения) = Неопределено Тогда 
	//			лЭлементСтэка.Вставить("ТекущееЗначение"    , ЧтениеJSON.ТекущееЗначение);
	//		КонецЕсли;
	//		лЭлементСтэка.Вставить("ТипТекущегоЗначения", ТипJSON);
	//		
	//		лСтэкБлоков.Вставить(0, лЭлементСтэка);
	//		Если лСтэкБлоков.Количество() = 2 Тогда 
	//			Если лСтэкБлоков[1].ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда 
	//				лОчищатьСтэк = Истина;
	//				Если лСтэкБлоков[1].ТекущееЗначение = "Версия" Тогда 
	//					лВерсияФайла = лСтэкБлоков[0].ТекущееЗначение;
	//				ИначеЕсли лСтэкБлоков[1].ТекущееЗначение = "Дата" Тогда 
	//					лДата = СериализаторXDTO.XMLЗначение(Тип("Дата"), лСтэкБлоков[0].ТекущееЗначение);
	//				Иначе
	//					лОчищатьСтэк = Ложь;
	//				КонецЕсли;
	//				Если лОчищатьСтэк Тогда 
	//					лСтэкБлоков.Удалить(0); // удаляем текущее значение
	//					лСтэкБлоков.Удалить(0); // удаляем имя свойства
	//				КонецЕсли;
	//			КонецЕсли;
	//		ИначеЕсли лСтэкБлоков.Количество() = 3 Тогда 
	//			Если лСтэкБлоков[0].ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда 
	//				Если лСтэкБлоков[2].ТекущееЗначение = "Параметры" Тогда 
	//					лНоваяСтрока = ПараметрыЗапросов.Добавить();// #добавлениепараметразапроса 3
	//				ИначеЕсли лСтэкБлоков[2].ТекущееЗначение = "ИсполняемыйКод" Тогда 
	//					лНоваяСтрока = ИсполняемыйКод.Добавить();			
	//				КонецЕсли;
	//			ИначеЕсли лСтэкБлоков[0].ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда 
	//				лСтэкБлоков.Удалить(0); // удаляем конец тэга
	//				лСтэкБлоков.Удалить(0); // удаляем начало тэга
	//				лСтэкБлоков.Удалить(0); // удаляем начало тэга табличного блока (в каждом блоке только один массив!)
	//			КонецЕсли;
	//		ИначеЕсли лСтэкБлоков.Количество() = 4 Тогда 
	//			Если лСтэкБлоков[0].ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда 
	//				лСтэкБлоков.Удалить(0); // удаляем конец тэга
	//				лСтэкБлоков.Удалить(0); // удаляем начало тэга
	//			КонецЕсли;
	//		ИначеЕсли лСтэкБлоков.Количество() = 5 Тогда 
	//			Если лСтэкБлоков[1].ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда 
	//				Если лСтэкБлоков[1].ТекущееЗначение = "ИдентификаторРодителя" Тогда 
	//					Если ЗначениеЗаполнено(лСтэкБлоков[0].ТекущееЗначение) Тогда 
	//						лНоваяСтрока = ДеревоЗапросов.Строки.НайтиСтроки(Новый Структура("Идентификатор", лСтэкБлоков[0].ТекущееЗначение), Истина)[0].Строки.Добавить();			
	//					Иначе
	//						мПрограммноеДобавлениеСтрокиЗапроса = Истина;
	//						лНоваяСтрока = ДеревоЗапросов.Строки.Добавить();			
	//					КонецЕсли;
	//				Иначе
	//					лНоваяСтрока[лСтэкБлоков[1].ТекущееЗначение] = лСтэкБлоков[0].ТекущееЗначение;
	//				КонецЕсли;
	//				
	//				лСтэкБлоков.Удалить(0); // удаляем текущее значение
	//				лСтэкБлоков.Удалить(0); // удаляем имя свойства
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	//
	// исключение
	//	ТекстОшибки = "Ошибка формата файла: " + ОписаниеОшибки();	
	//	Возврат -1
	// конецПопытки; 
	//// #рефакторинг ---чтение промежуточного формата файла. В будущем необходимо удалить
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
		Возврат 0
	Иначе
		Возврат 1
	КонецЕсли;
	
КонецФункции // ПрочитатьФайлСЗапросомJSON()

// Загружает дерево запросов Из файла
//
// Параметры:
//  Нет.
//
Функция ЗагрузитьЗапросыИзФайлаСтараяВерсия(имяФайла, ТекстОшибки) Экспорт

	Ошибка = Ложь;
	
	ОчиститьДанныеПоЗапросам();
	
	ФайлЗначения = Новый Файл(имяФайла);
	Если ФайлЗначения.Существует() Тогда 
		Попытка
			ДанныеИзФайла = ЗначениеИзФайла(имяФайла);
			Если ТипЗнч(ДанныеИзФайла) = Тип("ДеревоЗначений") Тогда 
				Если ДанныеИзФайла.Колонки.Найти("Идентификатор") = Неопределено Тогда 
					ДанныеИзФайла.Колонки.Добавить("Идентификатор");
				КонецЕсли;
			Иначе
				Ошибка = Истина;
				ТекстОшибки = "Тип загружаемых данных(" + ТипЗнч(ДанныеИзФайла) + ") отличается от ДереваЗначений. Обратитесь к разработчику";	
			КонецЕсли;
		Исключение
			Ошибка = Истина;
			ТекстОшибки = ОписаниеОшибки();	
		КонецПопытки; 
	Иначе
		Ошибка = Истина;
		ТекстОшибки = "Не найден файл: " + имяФайла;
	КонецЕсли;
	
	Если Не Ошибка Тогда 
		Попытка
			СкопироватьДеревоЗапросовРекурсивно(ДанныеИзФайла, ДеревоЗапросов, Новый Структура("ОбновлятьИД, ЭтоСтарыйРелиз", Истина, Истина));
		Исключение
			Ошибка = Истина;
			ТекстОшибки = ОписаниеОшибки();	
		КонецПопытки; 
	КонецЕсли;
	
	мИмяФайла = "";
	Модифицированность = Ложь;
	
	Возврат Не Ошибка
	
КонецФункции // ЗагрузитьЗапросыИзФайлаСтараяВерсия()

Процедура СохранитьЗапросыАвтосохранение()
	СохранитьЗапросыВФайлНачало(Ложь, Ложь, Неопределено);
КонецПроцедуры // СохранитьЗапросыАвтосохранение()
 
Процедура СохранитьЗапросыВОблакоДействие(Режим, СохранитьТекущийЗапрос = Ложь)
	
	Перем ТекущийЗапрос;
	
	Если СохранитьТекущийЗапрос И Не ВыбранЗапрос(ТекущийЗапрос) Тогда 
		Возврат;
	КонецЕсли;
	
	лИмяЭлементаИзОблака = мИмяФайла;
	
	СохранитьЗначенияПоЗапросу(мТекущаяСтрока);
	
	Если Не СохранитьТекущийЗапрос Тогда 
		Если ПустаяСтрока(лИмяЭлементаИзОблака) Тогда 
			лИмяЭлементаИзОблака = гСтроковыеКонтанты("ИмяНовогоФайлаЗапроса");
		Иначе
			лИмяЭлементаИзОблака = СтрЗаменить(лИмяЭлементаИзОблака, ".sel", "");
		КонецЕсли;
		лТипДиалога =  гТипыИсточниковДанных().Пакет;
	Иначе
		лИмяЭлементаИзОблака = ТекущийЗапрос.Имя;
		лТипДиалога          = гТипыИсточниковДанных().Запрос;
	КонецЕсли;
	
	лИдентификаторСессии = гВосстановитьИдентификаторСессииConsqueryCloud();
	Если Не ЗначениеЗаполнено(лИдентификаторСессии) Тогда 
		Оповестить("НеобходимоПереподключиться", , ЭтаФорма);
		Возврат;
	Иначе			
		лФормаДиалога = ПолучитьФорму("ФормаДиалогВыбораИсточникаДанныхИзОблака", ЭтаФорма);
		лФормаДиалога.Режим               = Режим;
		лФормаДиалога.Тип                 = лТипДиалога;
		лФормаДиалога.ИмяЭлементаИзОблака = лИмяЭлементаИзОблака;
		Длг = лФормаДиалога.ОткрытьМодально();
		
		Если Длг = Неопределено Или Не Длг.Выбран Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ЗаписьJSON = ПолучитьЗапросыВJSON(ДеревоЗапросов, ПараметрыЗапросов, ИсполняемыйКод, Длг.Имя, Ложь, Ложь, ТекущийЗапрос);
	
	лДанные = ЗаписьJSON.Закрыть();
	
	Если ТекущийЗапрос = Неопределено Тогда 
		лРезультат  = гСохранитьФайлСЗапросомВОблаке(лИдентификаторСессии, Длг.ИдПакета, Длг.Имя, истина, лДанные); // #рефакторинг добавить использование настройки режима обновления всех записей или только измененных
	Иначе
		лРезультат  = гСохранитьЗапросыВОблаке(лИдентификаторСессии, Длг.ИдПакета, Длг.ИдРодительскогоЗапроса, Длг.ИдЗапроса, Длг.Имя, Длг.ВключатьПодчиненныеЗапросы, лДанные);
	КонецЕсли;
	
	Если Не лРезультат.Статус = "OK" Тогда 
		Ошибка = Истина;
		Сообщить("Ошибка сохранения в облаке: " + лРезультат.ТекстОшибки);
	Иначе
		Ошибка = Ложь;
		ПоказатьПредупреждение(, ?(ТекущийЗапрос = Неопределено, "Запросы выгружены в облако.", "Текущий запрос выгружен в облако."), 3);
	КонецЕсли;

КонецПроцедуры // СохранитьЗапросыВОблакоДействие()

&НаКлиенте
Процедура СохранитьЗапросыВФайлНачало(ВызыватьДиалог, СохранитьТекущийЗапрос, ДополнительныеПараметры)

	Перем ТекущийЗапрос;
	
	Если СохранитьТекущийЗапрос И Не ВыбранЗапрос(ТекущийЗапрос) Тогда 
		Возврат;
	КонецЕсли;
	
	лПутьКФайлу              = "";
	лПолноеИмяФайла          = мИмяФайла;
	
	СохранитьЗначенияПоЗапросу(мТекущаяСтрока);
	
	Если Не СохранитьТекущийЗапрос Тогда 
		Если Не ПустаяСтрока(лПолноеИмяФайла) Тогда 
			лВремФайл = Новый Файл(лПолноеИмяФайла); 
			Если лВремФайл.Существует() Тогда 
				лПутьКФайлу = лВремФайл.Путь; 
				лИмяФайла   = лВремФайл.Имя;	
			Иначе
				лИмяФайла = СтрЗаменить(лПолноеИмяФайла, ".sel", "");
				ВызыватьДиалог = Истина;
			КонецЕсли;
		Иначе
			лИмяФайла = "Запросы от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ЧЧ_ММ_сс'");
			ВызыватьДиалог = Истина;
		КонецЕсли;
		
		лЗаголовок = "Укажите имя файла для сохранения запросов";
		лФильтр = "Файлы с запросами (*.sel)|*.sel";
		лРасширение = "sel";
	Иначе
		лИмяФайла = ТекущийЗапрос.Имя;
		лЗаголовок = "Укажите имя файла для сохранения текущего запроса";
		лФильтр = "Файлы веток (*.sl)|*.sl";
		лРасширение = "sl";
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда 
		ДополнительныеПараметры = Новый Структура
	КонецЕсли;
	
	Если СохранитьТекущийЗапрос Тогда 
		ДополнительныеПараметры.Вставить("ТекущийЗапрос", ТекущийЗапрос);
	КонецЕсли;
	
	лОповещение = Новый ОписаниеОповещения("СохранитьЗапросыВФайлПродолжение", ЭтаФорма, ДополнительныеПараметры);
	
	Если ВызыватьДиалог Тогда		
		
		лДиалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		
		лДиалог.ПолноеИмяФайла = лПутьКФайлу + лИмяФайла;
		лДиалог.Каталог        = лПутьКФайлу;
		лДиалог.Заголовок      = лЗаголовок;
		лДиалог.Фильтр         = лФильтр;
		лДиалог.Расширение     = лРасширение;
		
		лДиалог.Показать(лОповещение);
		
	Иначе
		
		лМассивыВыбранныхФайлов = Новый Массив;
		лМассивыВыбранныхФайлов.Добавить(лПолноеИмяФайла);
		
		ВыполнитьОбработкуОповещения(лОповещение, лМассивыВыбранныхФайлов);
		
	КонецЕсли;

КонецПроцедуры // СохранитьЗапросыВФайлНачало()

&НаКлиенте
Процедура ПоказатьДиалогВыбораФайла() // #Рефакторинг -> Унифицировать с аналогичной процедурой из управляемой формы

	лВремФайл = Новый Файл(мИмяФайла); лПутьКФайлу = лВремФайл.Путь; 
	
	лДиалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	лДиалог.ПолноеИмяФайла = мИмяФайла;
	лДиалог.Каталог        = лПутьКФайлу;
	лДиалог.Заголовок      = "Выберите файл со списком запросов";
	лДиалог.Фильтр         = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
	лДиалог.Расширение     = "sel";
	
	лДополнительныеПараметры = Новый Структура;
	лДополнительныеПараметры.Вставить("Локально"              , Истина);
	лДополнительныеПараметры.Вставить("ВеткаПриемника"        , Неопределено);
	лДополнительныеПараметры.Вставить("ТипЗагружаемогоОбъекта", Неопределено);
	
	лДиалог.Показать(Новый ОписаниеОповещения("ДиалогВыбораФайлаЗавершение", мЭтотОбъектФорма, лДополнительныеПараметры));
	
КонецПроцедуры // ПоказатьДиалогВыбораФайла()

&НаКлиенте
Процедура ДобавитьЗапросИзОблакаДействие()
	
	лИдентификаторСессии = гВосстановитьИдентификаторСессииConsqueryCloud();
	Если Не ЗначениеЗаполнено(лИдентификаторСессии) Тогда 
		Оповестить("НеобходимоПереподключиться", , ЭтаФорма);
		Возврат;
	Иначе					
		лФормаДиалога       = ПолучитьФорму("ФормаДиалогВыбораИсточникаДанныхИзОблака", ЭтаФорма);
		лФормаДиалога.Режим = гОперацииСЗапросами().ЗагрузитьИзОблака;
		
		Длг = лФормаДиалога.ОткрытьМодально();
		
		Если Длг = Неопределено Или Не Длг.Выбран Тогда
			Возврат;
		КонецЕсли;
		
		// #рефакторинг
		// Необходимо хранить параметры текущего выбранного элемента (пакет, запрос. код)
		// доработать алгоритм открытия этих элементов
		// привести все названия элементов к единым (файл -> пакет )
		
		мИмяФайла = "";
		
		СохранитьЗначенияПоЗапросу(мТекущаяСтрока);
		
		Если Длг.Тип = гТипыИсточниковДанных().Пакет Тогда 
			РодительТекущейСтроки = ?(мТекущаяСтрока.Родитель = Неопределено, ДеревоЗапросов, мТекущаяСтрока.Родитель);
			лВеткаПриемника = РодительТекущейСтроки.Строки.Добавить();
			лВеткаПриемника.Имя            = Длг.Имя;
			лВеткаПриемника.Идентификатор  = Новый УникальныйИдентификатор;
			лВеткаПриемника.СпособВыгрузки = 1;
		Иначе
			лВеткаПриемника = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока.Родитель;
		КонецЕсли;					
		
		ЗагрузитьЗапросыИзОблака(Длг.идПакета, Длг.идЗапроса, Длг.идКода, Длг.ВключатьПодчиненныеЗапросы, лВеткаПриемника)
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЗапросИзОблакаДействие()

// Загружает результат запроса в таблицу, дерево или сводную таблицу
//
Процедура ЗагрузитьРезультат(ЭлементФормыРеквизитаТаблицы = Неопределено)
	
	Если ЭлементФормыРеквизитаТаблицы = Неопределено Тогда 
		ЭлементФормыРеквизитаТаблицы = мЭлементФормыРеквизитаТаблицы;
	КонецЕсли;
	
	Если мРезЗапроса <> Неопределено Тогда
		
		Если ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Имя = "СводнаяТаблица" Тогда
			Если мСводнаяТаблицаЗагружена = Ложь Тогда
				Попытка
					ЭлементыФормы.РезультатТабДокСвод.ВстроенныеТаблицы.СводнаяТаблица.ИсточникДанных = мРезЗапроса;
				Исключение
					ВывестиСообщение(ОписаниеОшибки());
				КонецПопытки;
				мСводнаяТаблицаЗагружена = Истина;
			КонецЕсли;
		Иначе
			Если Не мТаблицаЗагружена Тогда
				
				Если ТипЗнч(мРезЗапроса) = Тип("ComОбъект") Тогда
					лДанныеЗапроса = СформироватьТаблицуПоВнешнейВыборке(мРезЗапроса.Выгрузить());
				ИначеЕсли СпособВыгрузкиДерево() Тогда
					лДанныеЗапроса = СформироватьДеревоСРезультатомЗапроса(ВыводитьВсеИтогиДляДерева);
				Иначе // Список
					Если ТипЗнч(мРезЗапроса) = Тип("Массив") Тогда // пакет запросов
						лДанныеЗапроса = Новый ТаблицаЗначений;
						лДанныеЗапроса.Колонки.Добавить("РезультатЗапроса");
						Для каждого текРезультат Из мРезЗапроса Цикл
							НоваяСтрока = лДанныеЗапроса.Добавить();
							НоваяСтрока.РезультатЗапроса = текРезультат.Выгрузить();
						КонецЦикла; 
					Иначе
						лДанныеЗапроса = мРезЗапроса.Выгрузить();
					КонецЕсли;
				КонецЕсли;
				
				ЭлементФормыРеквизитаТаблицы.Колонки.Очистить();
				УстановитьРезультатЗапроса(лДанныеЗапроса);
				ЭлементФормыРеквизитаТаблицы.СоздатьКолонки();
				мТаблицаЗагружена = Истина;								
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если мПодменюВременныеТаблицыКнопки.ИспользоватьМенеджерВременныхТаблиц.Пометка Тогда 
		ПерерисоватьСпискиВременныхТаблиц();
	КонецЕсли;
		
КонецПроцедуры // ЗагрузитьРезультат()

// Включает или отключает запуск автосохранения.
//
// Параметры:
//  Нет.
//
Процедура ОбработкаАвтосохранения()

	Если ИспользоватьАвтосохранение Тогда
		ПодключитьОбработчикОжидания("СохранитьЗапросыАвтосохранение", ИнтервалАвтосохранения);
	Иначе
		ОтключитьОбработчикОжидания("СохранитьЗапросыАвтосохранение");
	КонецЕсли;

КонецПроцедуры // ОбработкаАвтосохранения()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ

Функция КоннекторКВнешнейБазе(СтруктураПараметров) Экспорт
	
	Результат = Истина;
	
	Установить       = СтруктураПараметров.Установить;
	Версия		 	 = СтруктураПараметров.Версия;
	КаталогБазы		 = СтруктураПараметров.КаталогБазы;
	SQL_Сервер		 = СтруктураПараметров.SQL_Сервер;
	SQL_БазаДанных	 = СтруктураПараметров.SQL_БазаДанных;
	ТипБазы			 = СтруктураПараметров.ТипБазы;
	ИмяПользователя	 = СтруктураПараметров.ИмяПользователя;
	Пароль			 = СтруктураПараметров.Пароль;
	ВыводитьСообщение= СтруктураПараметров.ВыводитьСообщение;
	
	
	Если Установить Тогда					
		
		Если Лев(Версия, 3) = "8.3" Тогда 
			V8COMConnector = Новый COMОбъект("V83.COMConnector");
		ИначеЕсли Лев(Версия, 3) = "8.2" Тогда 
			V8COMConnector = Новый COMОбъект("V82.COMConnector");
		ИначеЕсли Лев(Версия, 3) = "8.1" Тогда 
			V8COMConnector = Новый COMОбъект("V81.COMConnector");
		Иначе
			V8COMConnector = Новый COMОбъект("V8.COMConnector");
		КонецЕсли;
		
		Если ТипБазы = Истина Тогда
			// файловый вариант
			СтрокаСоединения = "File = """ + СокрЛП(КаталогБазы) + """";	
		Иначе
			// серверный вариант
			СтрокаСоединения = "Srvr = " + СокрЛП(SQL_Сервер) + ";Ref = """ + СокрЛП(SQL_БазаДанных) + """";
		КонецЕсли;
		
		Состояние("Соединение с базой: " + СтрокаСоединения);
		
		// добавим имя пользователя и пароль
		СтрокаСоединения = СтрокаСоединения + "; Usr = """ + ИмяПользователя + """; Pwd = """ + Пароль + """;";
		
		Попытка
			Результат = V8COMConnector.Connect(СтрокаСоединения); 
		Исключение
			Если ВыводитьСообщение Тогда
				Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецЕсли;
			Результат = Неопределено;		
		КонецПопытки;
	Иначе
		Результат = Неопределено;		
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

Функция ПривестиСпецЗначение(ИсходноеЗначение, ИдентификаторЗначенияВСтруктуреВременныхТаблиц)
	// корректируем специальные значения
	Если ТипЗнч(ИсходноеЗначение) = Тип("Граница") Тогда 
		Возврат ИсходноеЗначение.Значение;
	ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("МоментВремени") Тогда 
		Возврат ИсходноеЗначение.Дата;
	ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Массив") Тогда 
		лТемпСписокЗначений = Новый СписокЗначений;
		лТемпСписокЗначений.ЗагрузитьЗначения(ИсходноеЗначение);
		Возврат лТемпСписокЗначений;
	ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("ТаблицаЗначений") Тогда 
		гДанныеВременныхТаблиц.Вставить(ИдентификаторЗначенияВСтруктуреВременныхТаблиц, ИсходноеЗначение.Скопировать());		
		Возврат "Таблица значений (Строк = " + ИсходноеЗначение.Количество() + "; Колонок = " + ИсходноеЗначение.Колонки.Количество() + ")"
	Иначе
		Возврат ИсходноеЗначение
	КонецЕсли;
КонецФункции // ПривестиСпецЗначение()

Процедура ДобавитьПараметрВСписокНаФорме(ПараметрыСписок, СтрокаИсходнойТаблицы, ЭтоГлобальныйПараметр = Ложь)
	
	НоваяСтрока = ПараметрыСписок.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсходнойТаблицы, "Тип, Имя, ИдентификаторСтроки");
	НоваяСтрока.ГлобальныйПараметр = ЭтоГлобальныйПараметр;
	
	Если СтрокаИсходнойТаблицы.Тип = гТипыЗначенийПараметров().ТаблицаЗначений Тогда 
		лИсходноеЗначениеПараметра = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(гДанныеВременныхТаблиц.Свойство(гПреобразоватьВПравильноеНазвание(СтрокаИсходнойТаблицы.ИдентификаторСтроки))));
	Иначе		
		лИсходноеЗначениеПараметра = ЗначениеИзСтрокиВнутр(СтрокаИсходнойТаблицы.Значение);
		Если Не ЗначениеЗаполнено(НоваяСтрока.Тип) Тогда 
			НоваяСтрока.Тип = ПолучитьТипПараметраПоЗначению(лИсходноеЗначениеПараметра);
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока.Значение = ПривестиСпецЗначение(лИсходноеЗначениеПараметра, гПреобразоватьВПравильноеНазвание(НоваяСтрока.ИдентификаторСтроки));
	
КонецПроцедуры // ДобавитьПараметрВСписокНаФорме()
 

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ПолучитьСтруктуруЗапросовДляJSONРекурсивно(Знач Корень, МассивИД, ВыгружатьТолькоИзмененные, КолонкиКВыгрузке, ЗаменяемыеИД, ИмяЗапроса) Экспорт
	
	Запросы       = Новый Массив;
	лСтрокиДерева = Корень.Строки;
	Для Каждого лСтрокаДерева Из лСтрокиДерева Цикл
		
		лСтруктураСтрокиЗапроса = Новый Структура("Идентификатор, Имя, ТекстЗапроса");
		Если КолонкиКВыгрузке = Неопределено Тогда 
			ЗаполнитьЗначенияСвойств(лСтруктураСтрокиЗапроса, лСтрокаДерева);
		Иначе
			ЗаполнитьЗначенияСвойств(лСтруктураСтрокиЗапроса, лСтрокаДерева, КолонкиКВыгрузке);
		КонецЕсли;
		
		Если ИмяЗапроса <> Неопределено Тогда 
			лСтруктураСтрокиЗапроса.Имя  = ИмяЗапроса; // добавляем имя корневого запроса, которое указал пользователь в диалоге сохранения запроса
		КонецЕсли;
		
		Если ЗаменяемыеИД <> Неопределено Тогда 
			лНовыйИД = Строка(Новый УникальныйИдентификатор);
			ЗаменяемыеИД.Вставить(лСтрокаДерева.Идентификатор, лНовыйИД);
			лСтруктураСтрокиЗапроса.Идентификатор = лНовыйИД;
		КонецЕсли;
		
		лСтруктураСтрокиЗапроса.Вставить("Строки", ПолучитьСтруктуруЗапросовДляJSONРекурсивно(лСтрокаДерева, МассивИД, ВыгружатьТолькоИзмененные, КолонкиКВыгрузке, ЗаменяемыеИД, Неопределено));
		
		Если лСтруктураСтрокиЗапроса.Строки.Количество() > 0 ИЛИ Не ВыгружатьТолькоИзмененные ИЛИ мМассивИзмененныхСтрок.Найти(лСтрокаДерева.Идентификатор) <> Неопределено  Тогда 
			МассивИД.Добавить(лСтрокаДерева.Идентификатор);
			Запросы.Добавить(лСтруктураСтрокиЗапроса);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Запросы;
	
КонецФункции // ПолучитьСтруктуруЗапросовДляJSONРекурсивно()

Функция ПолучитьИсполняемыйКодДляJSON(ИсполняемыйКод, МассивИдентификаторовЗапросов, ЗаменяемыеИД) Экспорт

	лМассивСтрокКода = Новый Массив;
	
	Для каждого ИдентификаторЗапроса Из МассивИдентификаторовЗапросов Цикл
		
		лКодТекущегоЗапроса = ИсполняемыйКод.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", ИдентификаторЗапроса));
		
		Для каждого СтрокаСКодом Из лКодТекущегоЗапроса Цикл
			Если ЗаменяемыеИД <> Неопределено Тогда 
				лИдентификаторЗапроса = ЗаменяемыеИД.Получить(ИдентификаторЗапроса);
				Если лИдентификаторЗапроса = Неопределено Тогда 
					лИдентификаторЗапроса = ИдентификаторЗапроса;
				КонецЕсли;
			Иначе
				лИдентификаторЗапроса = ИдентификаторЗапроса;
			КонецЕсли;
			
			СтруктураТекущейСтрокиКода = Новый Структура();
			СтруктураТекущейСтрокиКода.Вставить("ИдентификаторЗапроса", лИдентификаторЗапроса);
			СтруктураТекущейСтрокиКода.Вставить("ИдентификаторСтроки" , СтрокаСКодом.ИдентификаторСтроки);
			СтруктураТекущейСтрокиКода.Вставить("Имя"                 , СтрокаСКодом.Имя);
			СтруктураТекущейСтрокиКода.Вставить("Текст"               , СтрокаСКодом.Текст);
			
			лМассивСтрокКода.Добавить(СтруктураТекущейСтрокиКода);
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат лМассивСтрокКода

КонецФункции // ПолучитьИсполняемыйКодДляJSON()

Функция ПолучитьПараметрыЗапросовДляJSON(ПараметрыЗапросов, МассивИдентификаторовЗапросов, ЗаменяемыеИД) Экспорт

	лМассивПараметров = Новый Массив;
	
	Если МассивИдентификаторовЗапросов.Найти("") = Неопределено Тогда 
		// Добавляем пустой идентификатор - признак глобального параметра
		МассивИдентификаторовЗапросов.Добавить("");
	КонецЕсли;
	
	// добавляем локальные параметры
	Для Каждого ИдентификаторЗапроса Из МассивИдентификаторовЗапросов Цикл
		лПараметрыТекущегоЗапроса = ПараметрыЗапросов.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", ИдентификаторЗапроса));
		Для каждого ПараметрТекущегоЗапроса Из лПараметрыТекущегоЗапроса Цикл
			Если ЗаменяемыеИД <> Неопределено Тогда 
				лИдентификаторЗапроса = ЗаменяемыеИД.Получить(ИдентификаторЗапроса);
				Если лИдентификаторЗапроса = Неопределено Тогда 
					лИдентификаторЗапроса = ИдентификаторЗапроса;
				КонецЕсли;
			Иначе
				лИдентификаторЗапроса = ИдентификаторЗапроса;
			КонецЕсли;
			
			СтруктураТекущихПараметров = Новый Структура();
			СтруктураТекущихПараметров.Вставить("ИдентификаторЗапроса", лИдентификаторЗапроса);
			СтруктураТекущихПараметров.Вставить("ИдентификаторСтроки" , ПараметрТекущегоЗапроса.ИдентификаторСтроки);
			СтруктураТекущихПараметров.Вставить("Имя"                 , ПараметрТекущегоЗапроса.Имя);
			СтруктураТекущихПараметров.Вставить("Значение"            , ПараметрТекущегоЗапроса.Значение);			
			лМассивПараметров.Добавить(СтруктураТекущихПараметров);
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат лМассивПараметров
	
КонецФункции // получитьПараметрыЗапросовДляJSON()

Функция ПолучитьЗапросыВJSON(ДеревоЗапросов, ПараметрыЗапросов, ИсполняемыйКод, ИмяЗапроса, Локально, ВыгружатьТолькоИзмененные, Знач СтрокаСЗапросом)
	
	лПодменитьИмяКорневогоЗапроса = НЕ Локально И (СтрокаСЗапросом <> Неопределено);
	
	лМассивИДЗапросов = Новый Массив;              
	Если ВыгружатьТолькоИзмененные Тогда 
		лЗаменяемыеИД = Неопределено;
	Иначе
		лЗаменяемыеИД = Новый Соответствие;
	КонецЕсли;
	
	Если СтрокаСЗапросом = Неопределено Тогда 
		Корень = ДеревоЗапросов;
	Иначе
		лСтрокиДерева = Новый Массив;
		лСтрокиДерева.Добавить(СтрокаСЗапросом);
		Корень = Новый Структура("Строки", лСтрокиДерева);
	КонецЕсли;
	
	Данные = Новый Структура();
	Данные.Вставить("header"    , Новый Структура("version, date", гНазваниеОбработки(), ТекущаяДата()));
	Данные.Вставить("querys"    , ПолучитьСтруктуруЗапросовДляJSONРекурсивно(Корень, лМассивИДЗапросов, ВыгружатьТолькоИзмененные, Неопределено, лЗаменяемыеИД, ?(лПодменитьИмяКорневогоЗапроса, ИмяЗапроса, Неопределено)));
	Данные.Вставить("parameters", ПолучитьПараметрыЗапросовДляJSON(ПараметрыЗапросов, лМассивИДЗапросов, лЗаменяемыеИД));
	Данные.Вставить("codes"     , ПолучитьИсполняемыйКодДляJSON(ИсполняемыйКод, лМассивИДЗапросов, лЗаменяемыеИД));
	
	Если ВыгружатьТолькоИзмененные Тогда 
		Данные.Вставить("querysToDel", мМассивИзмененныхСтрок);
		Данные.Вставить("querysSort" , ПолучитьСтруктуруЗапросовДляJSONРекурсивно(Корень, лМассивИДЗапросов, Ложь, "Идентификатор", Неопределено, Неопределено));
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	Если Не Локально Тогда 
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(,,,,,,Истина)); // экранируем одинарные кавычки
	Иначе
		ЗаписьJSON.ОткрытьФайл(ИмяЗапроса);
	КонецЕсли;
	
	ЗаписатьJSON(ЗаписьJSON, Данные, Новый НастройкиСериализацииJSON);
	
	Возврат ЗаписьJSON;
	
КонецФункции // ПолучитьЗапросыВJSON()

Процедура МенюАгрегатныеФункции(Кнопка)
	Если СпособВыгрузки <> 2 Тогда
		мАгрегатнаяФункция = Кнопка.Текст;
		ЗаполнитьЗначениеАгрегатнойФункции();
	Иначе
		ПоказатьПредупреждение(, "Агрегатные функции работают только для способа выгрузки ""Список"".", 10);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьЗначениеАгрегатнойФункции();
	
	СтатусРезультатаТаблицыАгрФункции = "";
	
	ТекКолонка = мЭлементФормыРеквизитаТаблицы.ТекущаяКолонка;
	Если СпособВыгрузки <> 2 И мАгрегатнаяФункция<> "Нет" И ТекКолонка<> Неопределено Тогда
		// рассчитываем агрегатные функции	
		Если мЭлементФормыРеквизитаТаблицы.ВыделенныеСтроки.Количество() > 0 Тогда
			Результат = Неопределено;
			КоличествоЧисел = 0;
			КоличествоНеЧисел = 0;
			Для каждого ТекЯчейка Из мЭлементФормыРеквизитаТаблицы.ВыделенныеСтроки Цикл
				ТекЗначение = ТекЯчейка[ТекКолонка.Имя];
				Если ТипЗнч(ТекЗначение) = Тип("Число") Тогда
					КоличествоЧисел = КоличествоЧисел + 1;
					Если мАгрегатнаяФункция = "Среднее" Тогда					
						Результат = ?(Результат = Неопределено, 0, Результат) + ТекЗначение;
					ИначеЕсли мАгрегатнаяФункция = "Минимум" Тогда
						Если Результат = Неопределено ИЛИ Результат > ТекЗначение Тогда
							Результат = ТекЗначение;
						КонецЕсли;
					ИначеЕсли мАгрегатнаяФункция = "Максимум" Тогда
						Если Результат = Неопределено ИЛИ Результат<ТекЗначение Тогда
							Результат = ТекЗначение;
						КонецЕсли;
					ИначеЕсли мАгрегатнаяФункция = "Сумма" Тогда
						Результат = ?(Результат = Неопределено, 0, Результат) + ТекЗначение;
					КонецЕсли;
				Иначе
					КоличествоНеЧисел = КоличествоНеЧисел + 1;
				КонецЕсли;
			КонецЦикла; 
			Если мАгрегатнаяФункция = "Среднее" И КоличествоЧисел <> 0 Тогда					
				Результат = Результат / КоличествоЧисел;
			ИначеЕсли мАгрегатнаяФункция = "Количество значений" Тогда
				Результат = КоличествоЧисел + КоличествоНеЧисел;
			ИначеЕсли мАгрегатнаяФункция = "Количество чисел" Тогда
				Результат = КоличествоЧисел;
			КонецЕсли;
			Если Результат <> Неопределено Тогда
				СтатусРезультатаТаблицыАгрФункции = мАгрегатнаяФункция + " = " + Окр(Результат,4);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЗначениеАгрегатнойФункции()

/////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбработкаДействияКодЗапросПолучитьЗапрос(ПростаяОбработкаТекста)
	
	лЗапрос = гПолучитьЗапросИзТекста(гПолучитьСодержимоеБуфера(), ПростаяОбработкаТекста);
	
	лПолеТекстаЗапроса = ЭлементыФормы.ТекстЗапроса;
	Если лПолеТекстаЗапроса.ВыделенныйТекст = "" Тогда
		лПолеТекстаЗапроса.ДобавитьСтроку(лЗапрос.Текст); 
	Иначе
		лПолеТекстаЗапроса.ВыделенныйТекст = лЗапрос.Текст;
	КонецЕсли;
	
	Если лЗапрос.Параметры.Количество() > 0 Тогда
		гОбработкаДействийЗаполнитьПараметрыИзЗапроса(мФормаПараметров);
		Для каждого лПараметр Из лЗапрос.Параметры Цикл
			Попытка
				лСтрокаСПараметром = мФормаПараметров.ПараметрыСписок.Найти(лПараметр.Имя, "Имя");
				Если лСтрокаСПараметром = Неопределено Тогда
					Сообщить("Параметр " + лПараметр.Имя + "(" + лПараметр.Значение + ")" + " не используется в запросе. Не добавлен.");
				Иначе
					лСтрокаСПараметром.Значение = лПараметр.Значение;
				КонецЕсли;
			Исключение
				Сообщить("Неудачная попытка установки параметра " + лПараметр.Имя + "(" + лПараметр.Значение + ")");
			КонецПопытки; 
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры // ОбработкаДействияКодЗапросПолучитьЗапрос()

&НаКлиенте
Процедура ОбработкаДействияПолучитьКод1С(Режим)
	
	лПараметрыСтруктура = Новый Соответствие;
	Для каждого лПараметр Из мФормаПараметров.ПараметрыСписок Цикл
		лПараметрыСтруктура.Вставить(лПараметр.Имя, Новый Структура("Значение", лПараметр.Значение));
	КонецЦикла; 
	
	Результат = гСформироватьКодЗапросаДля1С(ПолучитьТекстЗапроса(Истина), лПараметрыСтруктура, Режим);
	
	Ответ = Вопрос("Скопировать в буфер?", РежимДиалогаВопрос.ДаНетОтмена);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		гСкопироватьТекстВБуфер(Результат)
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		ТД = Новый ТекстовыйДокумент();
		ТД.УстановитьТекст(Результат);
		ТД.Показать(,);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаДействияПолучитьКод1С()


Процедура ПроверитьМодифицированность(Операция)
	
	лОповещение = Новый ОписаниеОповещения("ПослеВопросаСохранитьИзмененияПродолжение", ЭтаФорма, Новый Структура("Операция", Операция));
	
	Если Модифицированность Тогда
		ПоказатьВопрос(лОповещение, НСтр("ru = 'Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	Иначе		
		ВыполнитьОбработкуОповещения(лОповещение, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьМодифицированность()

Функция ВыбратьКолонкуРезультата()
	
	лКолонкиТаблицыРезультата = мЭлементФормыРеквизитаТаблицы.Колонки;
	
	Если лКолонкиТаблицыРезультата.Количество() = 0 Тогда
		Рез = Неопределено
	ИначеЕсли лКолонкиТаблицыРезультата.Количество() = 1 Тогда
		Рез = лКолонкиТаблицыРезультата[0].Имя
	Иначе
		СписокКолонок = Новый СписокЗначений;
		Для каждого КолонкаРезультатаЗапроса Из лКолонкиТаблицыРезультата Цикл
			СписокКолонок.Добавить(КолонкаРезультатаЗапроса.Имя);
		КонецЦикла;
		Рез = СписокКолонок.ВыбратьЭлемент("Выберите колонку для указания источника данных");
		Рез = ?(Рез = Неопределено,Неопределено,Рез.Значение);
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ВыбратьКолонкуРезультата()     


Процедура ЗагрузитьВеткуИзФайла(Знач Ветка, Колонки) Экспорт
	
	Если Ветка = Неопределено Тогда
		ПоказатьПредупреждение(, "Не выбрана ветка для сохранения.", 10);
		Возврат;
	КонецЕсли;
	
	Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	мИмяФайлаВетки = ВосстановитьЗначение("КонсольЗапросов_ОтЛавелина_ФайлДляВосстановленияВеток");
	Если гЗначениеНеЗаполнено(мИмяФайлаВетки) Тогда
		мИмяФайлаВетки = "";
	КонецЕсли;

	лФайлСВеткой = Новый Файл(мИмяФайлаВетки);
	
	Длг.ПолноеИмяФайла = мИмяФайлаВетки;
	Длг.Каталог        = лФайлСВеткой.Путь;
	Длг.Заголовок      = "Укажите файл для загрузки ветки";
	Длг.Фильтр         = "Файлы веток (*.sl)|*.sl";
	Длг.Расширение     = "sl";
		
	Если Длг.Выбрать() Тогда
		СохранитьЗначение("КонсольЗапросов_ОтЛавелина_ФайлДляВосстановленияВеток", Длг.ПолноеИмяФайла);
	Иначе
		Возврат;
	КонецЕсли;

	ЗагрузитьЗапросы(Истина, Длг.ПолноеИмяФайла, Ветка);	
	
КонецПроцедуры // ЗагрузитьВеткуИзФайла()

Функция СформироватьДеревоСРезультатомЗапроса(ВыводитьВсеИтогиДляДерева)
	
	Если ВыводитьВсеИтогиДляДерева Тогда
		Построитель = Новый ПостроительЗапроса;
		Построитель.Текст = ПолучитьТекстЗапроса(Истина);
		Построитель.ЗаполнитьНастройки();
		
		СписокИзмерений = новый СписокЗначений;
		Для каждого ТекИзмерение Из Построитель.Измерения Цикл
			СписокИзмерений.Добавить(ТекИзмерение.Имя);
		КонецЦИкла;
		
		Если СписокИзмерений.Количество() = 1 Тогда
			Измерения = СписокИзмерений[0].Значение;
		ИначеЕсли СписокИзмерений.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			ВыбЭлемент = СписокИзмерений.ВыбратьЭлемент("Веберите группировку для обхода.");
			Если ВыбЭлемент = неопределено Тогда
				Возврат Неопределено;
			Иначе
				Измерения = ВыбЭлемент.Значение;
			КонецЕсли;
		КонецЕсли;
		
		лРезультатЗапроса = мРезЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой, Измерения, "Все");
						
		лНовоеДерево = Новый ДеревоЗначений;
		Для каждого Колонка Из мРезЗапроса.Колонки Цикл
			лНовоеДерево.Колонки.Добавить(Колонка.Имя);
		КонецЦикла;
						
		ТекУровень = 0;
		ТекРодитель = лНовоеДерево.Строки;
		Пока лРезультатЗапроса.Следующий() Цикл
			Если лРезультатЗапроса.Уровень() < ТекУровень Тогда
				ТекУровень = ТекУровень - 1;
				ТекРодитель = ТекРодитель.Родитель.Родитель;
				Если ТекРодитель = Неопределено Тогда
					ТекРодитель = лНовоеДерево.Строки;
				Иначе
					ТекРодитель = ТекРодитель.Строки;
				КонецЕсли;
			ИначеЕсли лРезультатЗапроса.Уровень() > ТекУровень Тогда
				ТекУровень = ТекУровень + 1;
				ТекРодитель = ТекРодитель[ТекРодитель.Количество() - 1].Строки;
			КонецЕсли;
			НоваяСтрока = ТекРодитель.Добавить();

			Для каждого Колонка Из лНовоеДерево.Колонки Цикл
				НоваяСтрока[Колонка.Имя] = лРезультатЗапроса[Колонка.Имя];
			КонецЦикла;
		КонецЦикла;
	Иначе
		лНовоеДерево = мРезЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	КонецЕсли;
	
	Возврат лНовоеДерево;
	
КонецФункции // СформироватьДеревоСРезультатомЗапроса()

Функция ЗагрузитьЗапросыИзОблака(идПакетаВОблаке, идЗапроса, идСтрокиКода, включатьПодчиненные, Родитель)
	лИдентификаторСессии = гВосстановитьИдентификаторСессииConsqueryCloud();
	лРезультат = гПолучитьЗапросыИзОблака(лИдентификаторСессии, идПакетаВОблаке, идЗапроса, идСтрокиКода, включатьПодчиненные);
	Если лРезультат.Статус = "OK" Тогда 
		ДобавитьВеткуДереваЗапросов(лРезультат.Данные, Родитель);
	Иначе
		Сообщить("Ошибка добавления запроса: " + лРезультат.ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;	
КонецФункции

Процедура ЗагрузитьЗапросы(локально, Знач идентификаторФайла, веткаПриемника = Неопределено, типЗагружаемогоОбъекта = Неопределено)
	
	лОшибка = Ложь;
	
	Если ЗначениеЗаполнено(идентификаторФайла) Тогда 
		
		лТекстОшибки = "";
		
		лРезультатЗагрузки = ПрочитатьФайлСЗапросомJSON(Локально, идентификаторФайла, веткаПриемника, лТекстОшибки, Не локально);

		Если Локально Тогда 
			Если лРезультатЗагрузки = 0 Тогда 
				лТекстОшибки = "Ошибка загрузки.  Текст ошибки: """ + лТекстОшибки + """
					|Попытка загрузки старого формата...";
				Сообщить(лТекстОшибки, СтатусСообщения.Важное);
				
				лОшибка = Не ЗагрузитьЗапросыИзФайлаСтараяВерсия(идентификаторФайла, лТекстОшибки);
				Если Не лОшибка Тогда 
					Сообщить("Файл загружен.", СтатусСообщения.Информация);
				Иначе
					лТекстОшибки = "Ошибка загрузки старого формата.  Текст ошибки: """ + лТекстОшибки + """";
					Сообщить(лТекстОшибки, СтатусСообщения.Важное);
				КонецЕсли;
			ИначеЕсли лРезультатЗагрузки = -1 Тогда 
				Сообщить(лТекстОшибки, СтатусСообщения.Важное);
				лОшибка = Истина;
			КонецЕсли;
		ИначеЕсли лРезультатЗагрузки = -1 Тогда 
			Сообщить(лТекстОшибки, СтатусСообщения.Важное);
			лОшибка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ДеревоЗапросов.Строки.Количество() = 0 Тогда 
		Если ЗначениеЗаполнено(идентификаторФайла) Тогда 
			Сообщить("Невозможно загрузить список запросов из указанного файла или файл пуст.
						   |Выберите другой файл.", СтатусСообщения.Важное);
		КонецЕсли;
		НовыйФайлЗапросовДействие();
	КонецЕсли;			
	
	Если веткаПриемника = Неопределено Тогда 
		ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = ДеревоЗапросов.Строки[0];
		мМассивИзмененныхСтрок.Очистить();
		Модифицированность = Ложь;	
	Иначе
		Модифицированность = Истина;	
	КонецЕсли;
	
	Если лОшибка Тогда 
		Сообщить("Файл не загружен. Обратитесь с проблемой к разработчику, возможно еще не все потеряно(меню: ""Информация > Отправить отзыв"").", СтатусСообщения.Информация);
	Иначе
		ОбновитьЗаголовок();			
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьЗапросы()

Функция ПолучитьТипПараметраПоЗначению(Значение)
	
	Если ТипЗнч(Значение) = Тип("СписокЗначений") ИЛИ ТипЗнч(Значение) = Тип("Массив") Тогда 
		Возврат 2
	ИначеЕсли ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда 
		Возврат 3
	Иначе
		Возврат 1
	КонецЕсли;

КонецФункции // ПолучитьТипПараметраПоЗначению()
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура МенюТаблицыРезультатаПолучитьТипЗначения(Кнопка)
	СтандартнаяОбработка = Ложь;
	Если мЭлементФормыРеквизитаТаблицы.ТекущиеДанные <> Неопределено Тогда 
		
		лОписаниеОповещения = Новый ОписаниеОповещения("ПослеВводаСтроки", мЭтотОбъектФорма, Новый Структура("Режим", "ПоказатьТипЗначения"));
		
		лСодержимоеЯчейки = мЭлементФормыРеквизитаТаблицы.ТекущиеДанные[мЭлементФормыРеквизитаТаблицы.ТекущаяКолонка.Имя];
		лСтрокаДляВывода  = гСтроковоеПредставлениеТипа(ТипЗнч(лСодержимоеЯчейки));
		
		ПоказатьВводСтроки(лОписаниеОповещения, лСтрокаДляВывода, "Тип значения", ,Истина);
	КонецЕсли;
КонецПроцедуры // МенюТаблицыРезультатаПолучитьТипЗначения()

// Меню для работы с временными таблицами

Функция кзДобавитьВременнуюТаблицу(ИмяВременнойТаблицы, МенеджерВременныхТаблиц)
	
	Результат = Новый ТаблицаЗначений;
	
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		Попытка
			ВремЗапрос = Новый Запрос;
			ВремЗапрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			ВремЗапрос.Текст = "Выбрать * из " + ИмяВременнойТаблицы;
			Результат = ВремЗапрос.Выполнить().Выгрузить();
		Исключение
			Результат = Неопределено;
			// сообщить("Не удалось показать временную таблицу " + ИмяВременнойТаблицы + " : " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ

Процедура ТабличноеПолеШаблоновПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если не Копирование и НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Использовать = True;
	Конецесли;
КонецПроцедуры

Процедура СоздатьНовыйФайлDBFПоСпискуКолонок(ФайлДБФ, ИмяФайлаВыгрузки, СписокКолонок)
	
	Для Каждого Колонка Из СписокКолонок Цикл
		
		ИмяПоля = Колонка.Имя;
		ТипПоля = Колонка.ЭлементУправления.ТипЗначения;
		Длина   = 0;
		ДлинаДЧ = 0;
		
		Если ТипПоля.СодержитТип(Тип("Строка")) Тогда
			ТипДБФ = "S";
			Длина = ТипПоля.КвалификаторыСтроки.Длина;
		ИначеЕсли ТипПоля.СодержитТип(Тип("Число")) Тогда
			ТипДБФ = "N";
			Длина = ТипПоля.КвалификаторыЧисла.Разрядность;
			ДлинаДЧ = ТипПоля.КвалификаторыЧисла.РазрядностьДробнойЧасти;
			Если Длина = 0 Тогда
				СтрокаЗапрсаСВыразить = ЭтаФорма.ПолучитьТекстЗапроса(Истина);
				ПоложениеПоляВЗапросе = Найти(СтрокаЗапрсаСВыразить, ИмяПоля);
				СтрокаЗапрсаСВыразить = Сред(СтрокаЗапрсаСВыразить,1, ПоложениеПоляВЗапросе - 1);
				КоличествоВыразить = СтрЧислоВхождений(СтрокаЗапрсаСВыразить, "ВЫРАЗИТЬ(");
				Для зю = 1 по КоличествоВыразить Цикл
					ПоложениеВыразитьВЗапросе = Найти(СтрокаЗапрсаСВыразить, "ВЫРАЗИТЬ(");
					СтрокаЗапрсаСВыразить = Прав(СтрокаЗапрсаСВыразить,СтрДлина(СтрокаЗапрсаСВыразить) - ПоложениеВыразитьВЗапросе - 8);
				КонецЦикла;
				ПоложениеЧИСЛОВЗапросе = Найти(СтрокаЗапрсаСВыразить, "ЧИСЛО(");
				СтрокаЗапрсаСВыразить = Прав(СтрокаЗапрсаСВыразить,СтрДлина(СтрокаЗапрсаСВыразить) - ПоложениеЧИСЛОВЗапросе - 5);
				ПоложениеЗапятушки = Найти(СтрокаЗапрсаСВыразить, ", ");
				Длина = Число(Лев(СтрокаЗапрсаСВыразить,ПоложениеЗапятушки - 1));
				СтрокаЗапрсаСВыразить = Прав(СтрокаЗапрсаСВыразить,СтрДлина(СтрокаЗапрсаСВыразить) - ПоложениеЗапятушки);
				ПоложениеЗапятушки = Найти(СтрокаЗапрсаСВыразить, ")");
				ДлинаДЧ = Число(Лев(СтрокаЗапрсаСВыразить,ПоложениеЗапятушки - 1));
			КонецЕсли;
		ИначеЕсли ТипПоля.СодержитТип(Тип("Булево")) Тогда
			ТипДБФ = "L";
		ИначеЕсли ТипПоля.СодержитТип(Тип("Дата")) Тогда
			ТипДБФ = "D";
		Иначе
			ТипДБФ = "S";
			Длина = 200;
		КонецЕсли;
		
		ФайлДБФ.Поля.Добавить(ИмяПоля, ТипДБФ, Длина, ДлинаДЧ);		
	КонецЦикла;
	
	ФайлДБФ.Кодировка = КодировкаXBase.OEM;
	ФайлДБФ.СоздатьФайл(ИмяФайлаВыгрузки);	

КонецПроцедуры //СоздатьНовыйФайлDBFПоСпискуКолонок()

Процедура СформироватьКодДляОтладки()
	
	// определяем путь к файлу
	ТекИмяФайла = ВосстановитьЗначение("КонсольЗапросов_ОтЛавелина_ПутьКСформироватьКодДляОтладки");
	Если гЗначениеНеЗаполнено(ТекИмяФайла) Тогда
		ТекИмяФайла = "";		
	КонецЕсли;
	
	Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Длг.Заголовок = "Выберите файл обработки Консоль запросов (consquery81.epf)";
	Если Длг.Выбрать() Тогда
		ТекИмяФайла = Длг.ПолноеИмяФайла;
		СохранитьЗначение("КонсольЗапросов_ОтЛавелина_ПутьКСформироватьКодДляОтладки",ТекИмяФайла);
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "Для отладки запроса необходимо:
		|1. Установить точку останова перед выполнение запроса (Например, перед строкой ""Запрос.Выполнить()"". 
		|2. Когда точка останова отработает, нажмите Shift + F9 (""Вычислить выражение"")).
		|3. В поле ввода ""Выражение"" ввести следующий текст: 
		|ВнешниеОбработки.Создать(""" + ТекИмяФайла + """).гОткрытьФормуДляОтладки(ЗАПРОС)
		|(Вместо слова ЗАПРОС подставляем имя переменной, которая содержит значение запроса, который предстоит отладить) и нажать кнопку ""Рассчитать"".
		|4. Продолжить отладку(F5).
		|5. В результате в режиме предприятия откроется консоль запросов с заполненными параметрами и текстом запроса.";
		
	Если Вопрос("Скопировать в буфер [Да] / Вывести код с инструкцией [Нет]?", РежимДиалогаВопрос.ДаНет,,, "Код для отладки запроса") = КодВозвратаДиалога.Да Тогда
		гСкопироватьТекстВБуфер("ВнешниеОбработки.Создать(""" + ТекИмяФайла + """).гОткрытьФормуДляОтладки(ЗАПРОС)");		
	Иначе
		ТД = Новый ТекстовыйДокумент(); 		
		ТД.УстановитьТекст(ТекстСообщения);
		ТД.Показать(,); 
	КонецЕсли;
	
КонецПроцедуры // СформироватьКодДляОтладки()

Процедура УдалитьСтраницыСВнешниимРезультатами()
	ТаблицыСРезультатами = Новый СписокЗначений;
	Для каждого ТекЭлемент Из ЭлементыФормы Цикл
		Если Найти(ТекЭлемент.Имя, "ТаблицаСРезультатом_") > 0 Тогда
			ТаблицыСРезультатами.Добавить(ТекЭлемент);
		КонецЕсли;			
	КонецЦикла; 
	Для каждого ТекЭлемент Из ТаблицыСРезультатами Цикл
		ЭлементыФормы.Удалить(ТекЭлемент.Значение);
	КонецЦикла; 
	
	СтраницыСРезультатами = Новый СписокЗначений;
	Для каждого ТекСтраница Из ЭлементыФормы.ПанельРезультата.Страницы Цикл
		Если Найти(ТекСтраница.Имя, "СтраницаСРезультатом_") > 0 Тогда
			СтраницыСРезультатами.Добавить(ТекСтраница);
		КонецЕсли;			
	КонецЦикла; 
	Для каждого ТекСтраница Из СтраницыСРезультатами Цикл
		ЭлементыФормы.ПанельРезультата.Страницы.Удалить(ТекСтраница.Значение);
	КонецЦикла; 
КонецПроцедуры
	
Процедура СпецМенюЗакрытьТекущуюстраницу(Кнопка)
	ТекСтраница = ЭлементыФормы.ПанельРезультата.ТекущаяСтраница;
	Если ТекСтраница <> Неопределено Тогда
		Если Найти(ТекСтраница.Имя, "СтраницаСРезультатом_") > 0 Тогда
			ЭлементыФормы.Удалить(ЭлементыФормы[СтрЗаменить(ТекСтраница.Имя, "СтраницаСРезультатом_", "ТаблицаСРезультатом_")]);
			ЭлементыФормы.ПанельРезультата.Страницы.Удалить(ТекСтраница);
			Если ЭлементыФормы.ПанельРезультата.Страницы.Количество() < 3 Тогда
				ПерейтиНаСтраницуСРезультатомЗапроса();
			Конецесли;
		Иначе
			ПоказатьПредупреждение(, "Данная страница не подлежит удалению", 10);
		Конецесли;
	Конецесли;
КонецПроцедуры

Процедура СпецМенюЗакрытьвсеВнешниеРезультаты(Кнопка)
	Если Вопрос("Закрыть все страницы с внешниим результатами?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		УдалитьСтраницыСВнешниимРезультатами();
		ПерейтиНаСтраницуСРезультатомЗапроса();
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьМеню(МассивМенюДляДобавления)
	Для каждого ТекущееМеню Из МассивМенюДляДобавления Цикл
		лДеревоМеню = гПолучитьМеню(ТекущееМеню.Имя, Ложь, Ложь);
		лКореньМеню = гЗаполнитьМенюПоДереву(ТекущееМеню.Контейнер, ТекущееМеню.Индекс, лДеревоМеню);
	КонецЦикла; 
КонецПроцедуры // СформироватьМеню()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мМассивУдаленныхСтрок = Новый Массив;
