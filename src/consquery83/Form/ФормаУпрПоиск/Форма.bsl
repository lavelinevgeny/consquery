
&НаКлиенте
Перем мМожноПродолжитьПоиск;

&НаКлиенте
Перем мНастройкиПрокси;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");  
	
	ТипОбработка = ЗначениеВСтрокуВнутр(ТипЗнч(ОбработкаОбъект));
	
	НастройкиПрокси = гВосстановитьНастройкиПрокси(ТипОбработка);
	
	ЗакрыватьПриЗакрытииВладельца = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИзменитьМестоПоискаДействие(Неопределено);
	УстановитьВидимостьДоступность();
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИскатьВАлгоритмахПриИзменении(Элемент)
	ИзменитьМестоПоискаДействие(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИскатьВЗапросахПриИзменении(Элемент)
	ИзменитьМестоПоискаДействие(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИскатьВНазванияхПриИзменении(Элемент)
	ИзменитьМестоПоискаДействие(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИскатьВТекстеПриИзменении(Элемент)
	ИзменитьМестоПоискаДействие(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИскатьВОблакеПриИзменении(Элемент)
	ИзменитьМестоПоискаДействие(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИскатьЛокальноПриИзменении(Элемент)
	ИзменитьМестоПоискаДействие(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИскатьВFastСodeПриИзменении(Элемент)
	ИзменитьМестоПоискаДействие(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультатПоиска

&НаКлиенте
Процедура РезультатПоискаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	лТекущаяСтрока = РезультатПоиска.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Закрыть(лТекущаяСтрока.СтрокаЗапроса);
	
	// владелецФормы.Элементы.ДеревоЗапросов.ТекущаяСтрока = ВладелецФормы.ДеревоЗапросов.НайтиПоИдентификатору(лТекущаяСтрока.СтрокаЗапроса).ПолучитьИдентификатор();
	// владелецФормы.Активизировать();
	// если лТекущаяСтрока.СтрокаКода <> "" Тогда 
	//	ВладелецФормы.ОбработкаДействияВыполнитьКод(лТекущаяСтрока.СтрокаКода);
	// конецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПоискаFastCodeВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	лТекущаяСтрока = РезультатПоискаFastCode.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	лФорма = ПолучитьФорму("ВнешняяОбработка.КонсольЗапросов.Форма.ФормаУпрПредпросмотрИзОблака",, ЭтаФорма);
	
	ТекстЗаголовка = СтрШаблон("Предпросмотр (FastCode | %1 | %2 | %3)", Лев(лТекущаяСтрока.Наименование, 10), лТекущаяСтрока.Автор, лТекущаяСтрока.Дата);
	
	лФорма.Заголовок        = ТекстЗаголовка;
	лФорма.КодДляВыполнения = лТекущаяСтрока.Текст;
	лФорма.Наименованиекода = лТекущаяСтрока.Наименование;
	
	лФорма.Элементы.ТекстЗапроса.Видимость = Ложь;
	
	лФорма.Открыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультатПоискаВОблаке

&НаКлиенте
Процедура РезультатПоискаВОблакеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	лТекущаяСтрока = РезультатПоискаВОблаке.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	лСоединение = гВосстановитьИдентификаторСессииConsqueryCloud(ТипОбработка);
	лРезультат  = гПолучитьДанныеДляПревьюИзОблака(ТипОбработка, лСоединение, лТекущаяСтрока.идФайла, лТекущаяСтрока.СтрокаЗапроса, лТекущаяСтрока.СтрокаКода);
	
	Если лРезультат.Статус = "OK" Тогда 
		лФорма = ПолучитьФорму("ВнешняяОбработка.КонсольЗапросов.Форма.ФормаУпрПредпросмотрИзОблака",, ЭтаФорма);
		лФорма.Заголовок        = "Предпросмотр (запрос " + ?(ЗначениеЗаполнено(лТекущаяСтрока.ИмяКода), " + алгоритм ", "") + "): " + лТекущаяСтрока.имяФайла + " / " + лТекущаяСтрока.ИмяЗапроса + ?(ЗначениеЗаполнено(лТекущаяСтрока.ИмяКода), " / " + лТекущаяСтрока.ИмяКода, "" );
		лФорма.идПакета         = лРезультат.ДанныеИзОблака.idPackage;
		лФорма.идЗапроса        = лРезультат.ДанныеИзОблака.idQuery;
		лФорма.идКода           = лРезультат.ДанныеИзОблака.idCode;
		лФорма.полноеИмяФайла   = лТекущаяСтрока.имяФайла;		
		лФорма.ТекстЗапроса     = лРезультат.ДанныеИзОблака.textQuery;
		лФорма.КодДляВыполнения = лРезультат.ДанныеИзОблака.textCode;
		лФорма.Открыть();
	Иначе
		Сообщить("Ошибка поиска в облаке: " + лРезультат.ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПродолжитьПоиск(Команда)
	ОбработкаДействияНайти(Истина)
КонецПроцедуры

&НаКлиенте
Процедура КомандаНайти(Команда)
	ОбработкаДействияНайти()
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция гПоискВОблаке(ТипОбработка, соединение, строкаПоиска, искатьВЗапросах, искатьВАлгоритмах, искатьВНазвании, искатьВТексте, началоПоиска, НастройкиПрокси) Экспорт 
	
	Возврат ОбъектОбработки(ТипОбработка).гПоискВОблаке(соединение, строкаПоиска, искатьВЗапросах, искатьВАлгоритмах, искатьВНазвании, искатьВТексте, началоПоиска, НастройкиПрокси);
	
КонецФункции // гПоискВОблаке()

&НаСервереБезКонтекста
Функция гПоискВFastСode(ТипОбработка, СтрокаПоиска, НастройкиПоиска, НастройкиПрокси) Экспорт 
	
	Возврат ОбъектОбработки(ТипОбработка).гПоискВFastСode(СтрокаПоиска, НастройкиПоиска, НастройкиПрокси);
	
КонецФункции // гПоискВОблаке()

&НаКлиенте
// рекурсивная процедура поиска текста
Функция НайтиЗапросыПоСтруктуреПоискаРекурсивно(СтруктураДляПоиска, Дерево, СоответствиеИмяИдентификатор)
	
	Для каждого ТекСтрока Из Дерево.ПолучитьЭлементы() Цикл
		
		СоответствиеИмяИдентификатор.Вставить(ТекСтрока.Идентификатор, ТекСтрока.Имя);
		
		Если СтруктураДляПоиска.ИскатьВТексте тогда
			Если СтруктураДляПоиска.ИскатьВТексте И Найти(НРег(ТекСтрока.ТекстЗапроса), НРег(СтруктураДляПоиска.СтрокаПоиска)) > 0 
				ИЛИ СтруктураДляПоиска.ИскатьВНазваниях И Найти(НРег(ТекСтрока.Имя), НРег(СтруктураДляПоиска.СтрокаПоиска)) > 0 тогда
				НоваяСтрока               = РезультатПоиска.Добавить();
				НоваяСтрока.Тип           = 0;
				НоваяСтрока.СтрокаЗапроса = ТекСтрока.Идентификатор;
				НоваяСтрока.ИмяЗапроса    = ТекСтрока.Имя;
			КонецЕсли;
		КонецЕсли;
		НайтиЗапросыПоСтруктуреПоискаРекурсивно(СтруктураДляПоиска, ТекСтрока, СоответствиеИмяИдентификатор);
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции // НайтиЗапросыПоСтруктуреПоискаРекурсивно()

&НаСервереБезКонтекста
Функция гПолучитьДанныеДляПревьюИзОблака(ТипОбработка, соединение, идПакетаВОблаке, идЗапроса, идСтрокиКода, НастройкиПрокси = Неопределено) Экспорт 
	
	Возврат ОбъектОбработки(ТипОбработка).гПолучитьДанныеДляПревьюИзОблака(соединение, идПакетаВОблаке, идЗапроса, идСтрокиКода, НастройкиПрокси);
	
КонецФункции // гПолучитьДанныеДляПревьюИзОблака()

&НаСервереБезКонтекста
Функция гВосстановитьИдентификаторСессииConsqueryCloud(ТипОбработка) Экспорт 
	
	Возврат ОбъектОбработки(ТипОбработка).гВосстановитьИдентификаторСессииConsqueryCloud();
	
КонецФункции // ВосстановитьИдентификаторСессииConsqueryCloud()

&НаСервереБезКонтекста
Функция ОбъектОбработки(ТипОбработка)
	
	Результат = Новый (ЗначениеИзСтрокиВнутр(ТипОбработка));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьМестоПоискаДействие(Элемент)
	
	// запросы / алгоритмы
	Если Не ИскатьВFastСode Тогда 
		Если Не ИскатьВЗапросах И Не ИскатьВАлгоритмах Тогда 
			Если Элемент = Неопределено Тогда 
				ИскатьВЗапросах = Истина;
				ИскатьВАлгоритмах = Истина;
			ИначеЕсли Элемент.Имя = "ИскатьВАлгоритмах" Тогда 
				ИскатьВЗапросах = Истина;
			Иначе 
				ИскатьВАлгоритмах = Истина;
			КонецЕсли;
		КонецЕсли;
	
		// название / текст
		Если Не ИскатьВНазваниях И Не ИскатьВТексте Тогда 
			Если Элемент = Неопределено Тогда 
				ИскатьВНазваниях = Истина;
				ИскатьВТексте = Истина;
			ИначеЕсли Элемент.Имя = "ИскатьВНазваниях" Тогда 
				ИскатьВТексте = Истина;
			Иначе 
				ИскатьВНазваниях = Истина;
			КонецЕсли;
		КонецЕсли;		
		
		// локально / в облаке
		лСоединение = гВосстановитьИдентификаторСессииConsqueryCloud(ТипОбработка);
		
		Если Элемент <> Неопределено И Элемент.Имя = "ИскатьВОблаке" И ИскатьВОблаке И Не ЗначениеЗаполнено(лСоединение) Тогда 
			ПоказатьПредупреждение(, "Для поиска в облаке необходимо к нему подключиться.");
			ИскатьВОблаке = Ложь;
			ИскатьЛокально = Истина;
		Иначе
			Если Не ИскатьВОблаке И Не ИскатьЛокально Тогда 
				Если Элемент = Неопределено Тогда 
					ИскатьЛокально = Истина;
					Если ЗначениеЗаполнено(лСоединение) Тогда 
						ИскатьВОблаке = Истина;
					КонецЕсли;
				ИначеЕсли Элемент.Имя = "ИскатьВОблаке" Тогда 
					ИскатьЛокально = Истина;
				ИначеЕсли ЗначениеЗаполнено(лСоединение) Тогда 
					ИскатьВОблаке = Истина;
				Иначе
					ПоказатьПредупреждение(, "Должна быть указана хотя бы одна область поиска.");
					ИскатьЛокально = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // изменитьМестоПоискаДействие()

&НаСервереБезКонтекста
Функция гВосстановитьНастройкиПрокси(ТипОбработка)
	Возврат ОбъектОбработки(ТипОбработка).гВосстановитьНастройкиПрокси();
КонецФункции // гДобавитьНовыйПакетЗапросовВОблако()

&НаКлиенте
Функция УстановитьВидимостьДоступность()
	
	Элементы.ПанельРезультатыПоискаОблако.Видимость   = ИскатьВОблаке;
	Элементы.ПанельРезультатыПоискаЛокально.Видимость = ИскатьЛокально;
	Элементы.ПанельРезультатыПоискаFastCode.Видимость = ИскатьВFastСode;
	
КонецФункции // УстановитьВидимостьДоступность()

//&НаКлиенте
// процедура НайтиРекурсивно(Дерево)
//	
//	Для каждого лСтрокасЗапросом Из Дерево.ПолучитьЭлементы() Цикл
//		Если ИскатьВНазваниях И Найти(НРег(лСтрокасЗапросом.Имя), НРег(СтрокаПоиска)) > 0 ИЛИ ИскатьВТексте И Найти(НРег(лСтрокасЗапросом.ТекстЗапроса), НРег(СтрокаПоиска)) > 0 Тогда 
//			лНоваяСтрока = РезультатПоиска.Добавить();
//			лНоваяСтрока.Тип    = 0;
//			лНоваяСтрока.ИмяЗапроса    = лСтрокасЗапросом.Имя;
//			лНоваяСтрока.ИмяКода       = Неопределено;
//			лНоваяСтрока.СтрокаЗапроса = лСтрокасЗапросом.ПолучитьИдентификатор();
//			лНоваяСтрока.СтрокаКода    = Неопределено;
//		КонецЕсли;
//		
//		Если ИскатьВНазваниях ИЛИ ИскатьВКоде Тогда 
//			лТекущийИсполняемыйКодМассив = ВладелецФормы.ИсполняемыйКод.НайтиСтроки(Новый Структура("ИдентификаторЗапроса", лСтрокасЗапросом.Идентификатор));			
//			Для каждого лТекущийИсполняемыйКод Из лТекущийИсполняемыйКодМассив Цикл
//				Если ИскатьВНазваниях И Найти(НРег(лТекущийИсполняемыйКод.Имя), НРег(СтрокаПоиска)) > 0 ИЛИ ИскатьВКоде И Найти(НРег(лТекущийИсполняемыйКод.Текст), НРег(СтрокаПоиска)) > 0 Тогда 
//					лНоваяСтрока = РезультатПоиска.Добавить();
//					лНоваяСтрока.Тип    = 1;
//					лНоваяСтрока.ИмяЗапроса    = лСтрокасЗапросом.Имя;
//					лНоваяСтрока.ИмяКода       = лТекущийИсполняемыйКод.Имя;
//					лНоваяСтрока.СтрокаЗапроса = лСтрокасЗапросом.ПолучитьИдентификатор();
//					лНоваяСтрока.СтрокаКода    = лТекущийИсполняемыйКод.ИдентификаторСтроки;
//				КонецЕсли;
//			КонецЦикла; 
//			НайтиРекурсивно(лСтрокасЗапросом)
//		КонецЕсли; 
//	КонецЦикла; 
// конецПроцедуры // НайтиРекурсивно()

&НаКлиенте
Процедура ОбработкаДействияНайти(Продолжение = Ложь)
	
	СоответствиеИмяИдентификатор = Новый Соответствие;
	
	Если ИскатьЛокально Тогда 		
		РезультатПоиска.Очистить();
		
		лСтруктураПоиска = Новый Структура();
		лСтруктураПоиска.Вставить("ИскатьВНазваниях", ИскатьВНазваниях);
		лСтруктураПоиска.Вставить("ИскатьВТексте"   , ИскатьВТексте);
		лСтруктураПоиска.Вставить("ИскатьВОблаке"   , ИскатьВОблаке);
		лСтруктураПоиска.Вставить("ИскатьЛокально"  , ИскатьЛокально);
		лСтруктураПоиска.Вставить("СтрокаПоиска"    , СтрокаПоиска);

		НайтиЗапросыПоСтруктуреПоискаРекурсивно(лСтруктураПоиска, ВладелецФормы.ДеревоЗапросов, СоответствиеИмяИдентификатор);		
			
		Если ИскатьВАлгоритмах Тогда
			Для каждого СтрокаСКодом Из ВладелецФормы.ИсполняемыйКод Цикл
				Если ИскатьВТексте И Найти(НРег(СтрокаСКодом.Текст), НРег(СтрокаПоиска)) > 0 ИЛИ 
					ИскатьВНазваниях И Найти(НРег(СтрокаСКодом.Имя), НРег(СтрокаПоиска)) тогда
					НоваяСтрока               = РезультатПоиска.Добавить();
					НоваяСтрока.Тип           = 1;
					НоваяСтрока.СтрокаКода    = СтрокаСКодом.ИдентификаторСтроки;
					НоваяСтрока.ИмяКода       = СтрокаСКодом.Имя;
					
					НоваяСтрока.СтрокаЗапроса = СтрокаСКодом.ИдентификаторЗапроса;
					НоваяСтрока.ИмяЗапроса    = СоответствиеИмяИдентификатор[СтрокаСКодом.ИдентификаторЗапроса];
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
		
	Если ИскатьВОблаке Тогда 
		
		Если Продолжение И мМожноПродолжитьПоиск Тогда 
			лНачальнаяПозицияПоиска = РезультатПоискаВОблаке.Количество();
		Иначе
			лНачальнаяПозицияПоиска = 0;
			РезультатПоискаВОблаке.Очистить();
		КонецЕсли;
		
		Элементы.РезультатПоискаВОблакеПродолжитьПоиск.Доступность = Ложь;
		
		лСоединение = гВосстановитьИдентификаторСессииConsqueryCloud(ТипОбработка);
		лРезультатПоискаВОблаке = гПоискВОблаке(ТипОбработка, лСоединение, СтрокаПоиска, ИскатьВЗапросах, ИскатьВАлгоритмах, ИскатьВНазваниях, ИскатьВТексте, лНачальнаяПозицияПоиска, мНастройкиПрокси);
		
		Если лРезультатПоискаВОблаке.Статус = "OK" Тогда 
			мМожноПродолжитьПоиск = лРезультатПоискаВОблаке.МожноПродолжитьПоиск;
			Элементы.РезультатПоискаВОблакеПродолжитьПоиск.Доступность = мМожноПродолжитьПоиск;
			Для каждого СтрокаСЗапросом Из лРезультатПоискаВОблаке.ДанныеИзОблака Цикл
				НоваяСтрока = РезультатПоискаВОблаке.Добавить();
				НоваяСтрока.Тип           = СтрокаСЗапросом.type;
				НоваяСтрока.СтрокаЗапроса = СтрокаСЗапросом.idFromApp;
				НоваяСтрока.ИмяЗапроса    = СтрокаСЗапросом.nameQuery;
				Если ЗначениеЗаполнено(СтрокаСЗапросом.nameCode) Тогда 
					НоваяСтрока.ИмяКода    = СтрокаСЗапросом.nameCode;
					НоваяСтрока.СтрокаКода = СтрокаСЗапросом.idRowFromApp;
				КонецЕсли;
				
				НоваяСтрока.имяФайла = СтрокаСЗапросом.fileName;
				НоваяСтрока.идФайла  = СтрокаСЗапросом.idPackage;				
			КонецЦикла; 
		Иначе
			Сообщить("Ошибка поиска в облаке: " + лРезультатПоискаВОблаке.ТекстОшибки);
		КонецЕсли;
	Иначе
		лРезультатПоискаВОблаке = Неопределено
	КонецЕсли;	
	
	Если ИскатьВFastСode Тогда 
		
		РезультатПоискаFastCode.Очистить();
		
		НастройкиПоиска = Новый Структура("Bsp", ИскатьFastCodeБСП);
		
		лРезультатПоискаВFastСode = гПоискВFastСode(ТипОбработка, СтрокаПоиска, НастройкиПоиска, мНастройкиПрокси);
		
		Если лРезультатПоискаВFastСode.Статус = 200 Тогда 
			Для Каждого СтрокаСЗапросом Из лРезультатПоискаВFastСode.Данные Цикл
				НоваяСтрока = РезультатПоискаFastCode.Добавить();
				НоваяСтрока.Наименование = СтрокаСЗапросом.Title;
				НоваяСтрока.Текст        = СтрокаСЗапросом.Text;
				
				Если ЗначениеЗаполнено(СтрокаСЗапросом.SourcePath) Тогда 
					НоваяСтрока.Текст = СтрШаблон("Источник: %1%2%3", СтрокаСЗапросом.SourcePath, Символы.ПС, НоваяСтрока.Текст);
				КонецЕсли;
				
				НоваяСтрока.Описание     = СтрокаСЗапросом.Description;
				НоваяСтрока.Автор        = СтрокаСЗапросом.UserName;
				НоваяСтрока.Дата         = СтрокаСЗапросом.PostDate;
			КонецЦикла; 
		Иначе
			Сообщить("Ошибка поиска в FastСode: " + лРезультатПоискаВОблаке.ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
		
	Если Не Продолжение Тогда 
		Если РезультатПоиска.Количество() > 0 тогда
			ТекущийЭлемент = Элементы.РезультатПоиска;
		ИначеЕсли РезультатПоискаВОблаке.Количество() > 0 тогда
			ТекущийЭлемент = Элементы.РезультатПоискаВОблаке;
		ИначеЕсли РезультатПоискаFastCode.Количество() > 0 тогда
			ТекущийЭлемент = Элементы.РезультатПоискаFastCode;
		Иначе
			ПоказатьПредупреждение(, "Совпадений не найдено.", 2);
		КонецЕсли;		
	КонецЕсли;
	
	Элементы.ПанельРезультатыПоиска.Заголовок         = СтрШаблон("Локально (%1)", РезультатПоиска.Количество());
	Элементы.ПанельРезультатыПоискаОблако.Заголовок   = СтрШаблон("В облаке (%1)", РезультатПоискаВОблаке.Количество());
	Элементы.ПанельРезультатыПоискаFastCode.Заголовок = СтрШаблон("FastCode (%1)", РезультатПоискаFastCode.Количество());
	
	// НайтиРекурсивно(ВладелецФормы.ДеревоЗапросов);
	
КонецПроцедуры // ОбработкаДействияНайти()

#КонецОбласти
