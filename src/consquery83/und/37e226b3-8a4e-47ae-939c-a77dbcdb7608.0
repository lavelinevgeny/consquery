{4,
{49,0,0,90,0,1,0,0,00000000-0000-0000-0000-000000000000,0,
{1,0},0,0,1,1,1,0,1,0,
{5,3699f6a3-9a2a-4c82-a775-6ff4824a08ca,"ОбработкаОповещения",3ccc650e-f631-4cae-8e33-3eaac610b5f9,"ПриОткрытии",52dbb775-1631-4fd5-8c55-1615b5881dac,"ПередЗакрытием",9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,"ПриСозданииНаСервере",ca21cd18-35b2-4281-b5c8-016ecc8da8ac,"",1,0,3699f6a3-9a2a-4c82-a775-6ff4824a08ca,0,1,3ccc650e-f631-4cae-8e33-3eaac610b5f9,0,1,52dbb775-1631-4fd5-8c55-1615b5881dac,0,1,9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,0,1,ca21cd18-35b2-4281-b5c8-016ecc8da8ac,0,1},
{12,06ee6a21-061e-47f8-81c5-92ae8b8f3b5d,198ea630-fda2-4cda-8a23-f999f4c67ee6,239f0103-8de9-4fdf-b485-eb5531da7e51,3772996b-41f4-4c47-a5a8-ea397db424ae,39bb0fe9-771d-4dd5-8a6e-2d16984523af,3f01ed62-97f8-465b-b4f7-6517ac2bc994,5174ad3f-0569-42fd-8adf-011d8206db6c,5d41082e-9619-42ec-b96f-98b082b3a2f0,679b62d9-ff72-4329-bf3a-c0c32b311dd2,71e0226e-ebb2-4e33-8745-0a94a01bbf15,d7e9e72c-8fa7-430c-a3e9-aeadfd57dfc7,f3613d5c-20c6-46e5-b4d5-7d712ece1296},1,
{22,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},8,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{481,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"МенюФайл",
{1,1,
{"ru","&Файл"}
},
{1,1,
{"ru","Операции с файлами"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,0,
{0},"",-1,-1,1,0,""},
{0},2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{504,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"Локально",
{1,1,
{"ru","Локально"}
},
{1,1,
{"ru","Локально"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,1,
{0,ed0bec43-4633-416c-8c08-0384ca444e32},"",-1,-1,1,0,""},
{0},2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{516,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаОткрытьФайлСЗапросами1",
{1,0},1,
{10,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{517,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаОткрытьФайлСЗапросами1РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{522,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаСохранитьЗапросыВФайл1",
{1,0},1,
{7,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{523,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаСохранитьЗапросыВФайл1РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{487,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаСохранитьЗапросыВНовыйФайл",
{1,0},1,
{8,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{488,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаСохранитьЗапросыВНовыйФайлРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},1,0,1,
{12,
{505,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЛокальноРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{506,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"Облако",
{1,1,
{"ru","Облако"}
},
{1,1,
{"ru","Облако"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,1,
{0,1970a480-9b38-405e-9d9e-8209f3fad5f1},"",-1,-1,1,0,""},
{0},2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{518,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаДобавитьЗапросИзОблака1",
{1,0},1,
{18,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,2,
{110}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{519,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаДобавитьЗапросИзОблака1РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{520,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ФормаГруппаВыгрузитьвОблако",
{1,1,
{"ru","Форма группа выгрузитьв облако"}
},
{1,1,
{"ru","Форма группа выгрузитьв облако"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{512,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаВыгрузитьВсеЗапросыВОблако",
{1,0},1,
{26,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{513,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаВыгрузитьВсеЗапросыВОблакоРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{514,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаВыгрузитьТекущийЗапросВОблако",
{1,0},1,
{27,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{515,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаВыгрузитьТекущийЗапросВОблакоРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},1,0,1,
{12,
{521,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаГруппаВыгрузитьвОблакоРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},0,3,3,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{508,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаПараметрыПодключенияКОблаку",
{1,0},1,
{13,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{509,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаПараметрыПодключенияКОблакуРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},1,0,1,
{12,
{507,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ОблакоРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},0,3,3,0},1,0,1,
{12,
{482,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"МенюФайлРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},0,3,3,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{409,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"НовыйФайлЗапросов",
{1,0},1,
{14,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{445,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"НовыйФайлЗапросовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{491,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаОткрытьФайлСЗапросами",
{1,0},1,
{10,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{492,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаОткрытьФайлСЗапросамиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{493,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаСохранитьЗапросыВФайл",
{1,0},1,
{7,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{494,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаСохранитьЗапросыВФайлРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{510,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаДобавитьЗапросИзОблака",
{1,0},1,
{18,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,2,
{110}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{511,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаДобавитьЗапросИзОблакаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{479,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"МенюОперации",
{1,1,
{"ru","Оп&ерации"}
},
{1,1,
{"ru","Меню операции"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,0,
{0},"",-1,-1,1,0,""},
{0},2,2,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},3,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{483,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"МенюОперацииКомментарии",
{1,1,
{"ru","Меню операции комментарии"}
},
{1,1,
{"ru","Меню операции комментарии"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{313,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"УдалитьКомментарий",
{1,0},1,
{22,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA
AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3
YXJlAHBhaW50Lm5ldCA0LjAuNWWFMmUAAAF9SURBVDhPpZG7S0JRHMf9OyLCIXLo
JRWYgyKUIRUWkWOD0FbQnGtNLbUERS/sMRg9IBwqSjRqKDITHz20qK4Rcc00q/Xb
OUfOyZt3qYaPfD+/F9yjBsC/UC3+BtUiZS+2gOXjERLVnaOQYgbWWuGLu0lUd45C
OMHbLfStNCGfuyZa6sUohOPyOuA5HSNR3YspKSQeD+BYrEU6EyVKPYBed43wn5QU
xn2DmD4cxns2gXz6AqGUH2cP+6SlnOMoRH4Jo2teh9TzCVFoUj0WSFY9nuQQc4pk
rcers0O44gD9m0Z3nCQW/MVuxF23Gee2ZlZL2k3MpZY6MSOWc9kr9q3R+23WzJEX
f/2UEbMZQBeTDhM75Lc0sD5HBG94EkMb7SR+e0KO4OPthi1xeJ8jQr/HjMDlEokF
l8gjRiQfdo16rOp1DHpgs6FazFDYTyYTx8yRSzSoB8nLL1dqxTKtz1ZpQZkoLxOz
4pIa651tmNJWkPhdo0fnDI2iJhp/A5ovQBvqNJujYkoAAAAASUVORK5CYII=}
},0,""},1,
{"Pattern"},"",2,0,1,
{12,
{421,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"УдалитьКомментарийРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{303,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДобавитьКомментарий",
{1,0},1,
{21,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA
AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3
YXJlAHBhaW50Lm5ldCA0LjAuNWWFMmUAAADgSURBVDhPpdG/C0FRGMZx/43FaDaZ
LBZGg7JRVt2VyWIySJEwKBlkoKSIgRgU8qOUYhBu5A94vFed2z33vIoMn3q+b53h
dh0A/sIef8Eehe6yiMo4SZNvgzk40boXvVWJJt8Gc9jN9k2Eqm48H1tKtQXpkZXW
CqI2TdPkW5BC2J0GCJRcuOoLSrWtpBAyvRhywwRNvq2Uw+U2h7/gxPE8oVTbTjkY
vynVCdPk206Kx33z/tbFoU2pNkeK1jyLeMNHk2+OFJGaB/11mSbfHHPo+gr5kUaT
70/Y4y/Y4/fgeAFzxPvPuWqBWgAAAABJRU5ErkJggg==}
},0,""},1,
{"Pattern"},"",2,0,1,
{12,
{420,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДобавитьКомментарийРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},1,0,1,
{12,
{484,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"МенюОперацииКомментарииРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},0,3,3,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{524,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаОткрытьНастройкиОбработки",
{1,0},1,
{28,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{525,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаОткрытьНастройкиОбработкиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{295,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"Intellisense",
{1,1,
{"ru","Автоподстановка (Intellisense)"}
},1,
{20,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},1,0,0,0,2,1,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,1,
{0,3bdc16c8-6a96-4467-9442-a8e4804b3fa2},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{419,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"IntellisenseРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,3,1,0},1,0,1,
{12,
{480,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"МенюОперацииРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{404,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ГруппаКнопокОтображениеБлоков",
{1,1,
{"ru","Группа кнопок отображение блоков"}
},
{1,1,
{"ru","Группа кнопок отображение блоков"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{347,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ПоказатьРезультат",
{1,1,
{"ru","Результат"}
},1,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},2,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,3,
{-22}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA
AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3
YXJlAHBhaW50Lm5ldCA0LjAuNWWFMmUAAAE/SURBVDhPpZMxS8NgEIbvt1Sd7OIg
uoggVQdpFxGjg1YwaWqQdgiR0AzZ/DFVQcHJwS5OTi4FwUUKGQJJaEJKKSmvuW8q
JUKTBh7u5S4PR76PkG3b1RSlIFWyLKuBgg+7ZJpmo9PpKEVgl3RdV6fTKZIkEXA2
DEOZ7WXBc3ap3W43J5MJxuOxgHOr1VJme1nwnF3SNK3JjTiOBZxVVVVme1nwnF2S
ZflmNBohDEMB53q9nvnN87BL6ctaFEUIgkDAWZIkhbdw/g+es0vyvYcL28HJ3Q+O
br+we/WBzdM3lGvPWDt8QKnSxcr+U5pfsV59x8bxJ7bO+ti5/MXetQvaPv/GcDiE
7/u5K7tUrr3A8zw4jpO7skurB92FN85XdqlUeVx443xlV5yB67oYDAa5qziD9BZ6
S9xCj9KfaglAf1E5EqFtaGXCAAAAAElFTkSuQmCC}
},0,""},1,
{"Pattern"},"",2,0,1,
{12,
{415,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПоказатьРезультатРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{349,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ПоказатьСекциюСЗапросами",
{1,1,
{"ru","Запросы"}
},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},2,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA
AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3
YXJlAHBhaW50Lm5ldCA0LjAuNWWFMmUAAAFkSURBVDhPpdNBS4MAFAfw9wXGvsOq
W5cOQTC6BNkhbAcPbR5qh+latvIgxHAHT/VhiqDDiNhlEQUjCjp2lIFjmoqO2Rgb
rz1PCgphwg8f7//+4EXQNI1dEjNiod1u1zHjQ11otVp1VVXFqNrVN/4VKIpyslgs
cD6fh2iuqDo+ffxg7z1IRTndgSzLjdlshtPpNETzKnOD3b6Hj69uKsrpDiRJalBx
MpmEaN7iv/DhxcHOs5WKcroDQRBOgyBA3/dDNAvXdu9IM3C/+Ymbh11cP7jHtb1b
XNm9W747uMG94faxjjs1swfValUaj8foum6I5nK5LNLX0JyGcuoCz/NnpVJJzIK6
wHFc0/M8dBwnJmkXRTl1gWXZc9u20TCMmKRdFOXUBYZhLkzTxMFgEJO0i6KculAs
FuXRaIS6rsck7aIopy4UCgXFsiwcDocxSbsoyqkL+Xy+ksvlLrOgLix/qn9A+AWH
rOFaqiFMjgAAAABJRU5ErkJggg==}
},0,""},1,
{"Pattern"},"",2,0,1,
{12,
{416,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПоказатьСекциюСЗапросамиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{351,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ПоказатьПараметры",
{1,1,
{"ru","Параметры"}
},1,
{6,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},2,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA
AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3
YXJlAHBhaW50Lm5ldCA0LjAuNWWFMmUAAAE4SURBVDhPpZMxS4RgGMefLyD3HYy2
loamoyXIhrDFIVpqKc9D7nSQCzkHt75MBEG1tFw0NvURRPBQU3AQjuPkyf9Nr/Ae
hAk/fPj//T2+IFIYhnqL2ROdgiAYcc8LLvm+P5rP52Yf4JLneVbTNLzZbLZgns1m
ppjJQA+XXNcdr9drXq1WWzA7jmOKmQz0cKUnsCzLxEN1Xe8EvW3bY+kJ7h4Kvg4T
Pp9889HlOx9cPPP+2SPvnT6191c+NL74+Cbik9uMCVvEt2HGgrfPH375yHaCfrtA
9hXaBYs/nmBBhmFMqqrisiw7yDIR9HBJ1/VpURScJEkHWSaCHi5pmuZkWcZxHHeQ
ZSLo4dJwOHTTNOUoijrIMhH0cElVVS/Pc14ulx1kmQh6uDQYDK4URbnvA1xqf6p/
wPQLQ1bsE+jxn/0AAAAASUVORK5CYII=}
},0,""},1,
{"Pattern"},"",2,0,1,
{12,
{417,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПоказатьПараметрыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},1,0,1,
{12,
{414,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаКнопокОтображениеБлоковРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{500,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ФормаГруппаПозицияКурсора",
{1,1,
{"ru","Форма группа позиция курсора"}
},
{1,1,
{"ru","Форма группа позиция курсора"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{498,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаКнопкаПозицияКурсора",
{1,1,
{"ru","Строка:  Кол:"}
},1,
{11,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,0,
{16711680}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{499,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаКнопкаПозицияКурсораРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},1,0,1,
{12,
{501,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаГруппаПозицияКурсораРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},0,3,3,0},1,0,0,0,3,3,0},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{143,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаДанныеЗапроса",
{1,1,
{"ru","Скрыть секцию с запросами"}
},
{1,1,
{"ru","Скрыть данные запроса"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1,
{3,4,
{0}
},0,2,0,1},3,143c00f7-a42d-4cd7-9189-88e4467dc768,
{55,
{159,02023637-7868-4a5f-8576-835a76e0c9ba},0,2,1,
{0,
{0,
{"B",1},0}
},"ДеревоЗапросов",0,0,1,
{1,0},
{1,0},
{1,
{10}
},0,1,0,0,0,1,1,0,0,0,0,0,1,0,1,1,0,1,2,2,1,1,0,0,0,0,2,0,0,1,1,
{0},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,1,1,19,
{"S",""},
{12,01d80ddd-dce5-4db3-beb5-f63c97cb05b9,"ДеревоЗапросовПриОкончанииРедактирования",0d644ff6-443b-4390-86fa-7f9105e42711,"",1282f000-23b6-4887-87f4-9e8e79db3d32,"ДеревоЗапросовВыбор",2391e7b8-7235-45d7-ab7e-6ff3dc086396,"ДеревоЗапросовПередНачаломДобавления",2ccfdec5-583d-4eca-8319-e55de492665a,"ДеревоЗапросовПередУдалением",60edb81d-887b-478e-94ee-7fef2b13393d,"ДеревоЗапросовПриАктивизацииСтроки",6d4d6747-a823-4f61-ab31-a426572f2c6c,"",8ad48496-8d0b-4f6c-ae48-99d95227884b,"ДеревоЗапросовПеретаскивание",ab930362-ff94-4dcb-ad16-188805d23e3c,"",b3c10170-c5ff-4cba-b537-679e1c872b45,"ДеревоЗапросовПриНачалеРедактирования",cb286ab3-3a1c-40d2-a232-6e64f624ccec,"ДеревоЗапросовОкончаниеПеретаскивания",de65638d-a806-4a76-bc10-f62bbc86e0e7,"",1,0,01d80ddd-dce5-4db3-beb5-f63c97cb05b9,0,1,0d644ff6-443b-4390-86fa-7f9105e42711,0,1,1282f000-23b6-4887-87f4-9e8e79db3d32,0,1,2391e7b8-7235-45d7-ab7e-6ff3dc086396,0,1,2ccfdec5-583d-4eca-8319-e55de492665a,0,1,60edb81d-887b-478e-94ee-7fef2b13393d,0,1,6d4d6747-a823-4f61-ab31-a426572f2c6c,0,1,8ad48496-8d0b-4f6c-ae48-99d95227884b,0,1,ab930362-ff94-4dcb-ad16-188805d23e3c,0,1,b3c10170-c5ff-4cba-b537-679e1c872b45,0,1,cb286ab3-3a1c-40d2-a232-6e64f624ccec,0,1,de65638d-a806-4a76-bc10-f62bbc86e0e7,0,1},
{0},1,
{22,
{160,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоЗапросовКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{526,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаВыгрузитьТекущийЗапросВОблако1",
{1,0},1,
{27,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{527,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаВыгрузитьТекущийЗапросВОблако1РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{502,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоЗапросовКонтекстноеМенюНоваяСтрокаНаТомЖеУровне",
{1,0},1,
{12,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{503,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоЗапросовКонтекстноеМенюНоваяСтрокаНаТомЖеУровнеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{528,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ДеревоЗапросовКонтекстноеМенюСгруппироватьЗапросы",
{1,0},1,
{29,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{529,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоЗапросовКонтекстноеМенюСгруппироватьЗапросыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},1,0,0,0,3,3,0},1,
{22,
{161,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ДеревоЗапросовКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},0,1,0,0,0,3,3,0},1,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{35,
{203,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДеревоЗапросовИмя",1,0,
{1,0},
{1,0},
{2,
{10},
{6}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5006,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{204,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоЗапросовИмяКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{12,
{438,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоЗапросовИмяРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},3,3,0,0},2,2,1,0,
{"Pattern"},"","",2,2,0,1,
{12,
{428,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоЗапросовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},1,1,1,1,
{5,
{429,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоЗапросовСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0},1,
{22,
{430,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоЗапросовСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{12,
{431,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоЗапросовСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},2,
{159,0},0,3,3,0},1,
{5,
{432,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ДеревоЗапросовСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,1,0},1,0,0},1,
{22,
{433,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоЗапросовСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{12,
{434,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоЗапросовСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},2,
{159,1},0,3,3,0},1,
{5,
{435,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДеревоЗапросовУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0,2},1,
{22,
{436,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоЗапросовУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{12,
{437,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоЗапросовУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},2,
{159,2},0,3,3,0},0,1,0,0,1,0,3,3,0,1,0,0,0,0,0,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{233,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаКнопокОбщая",
{1,1,
{"ru","Группа кнопок общая"}
},
{1,1,
{"ru","Группа кнопок общая"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},0,2,0,0},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{145,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"ПоказатьДеревоЗапросов",
{1,0},1,
{19,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},1,0,0,0,2,2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAABHNCSVQICAgIfAhk
iAAAAAlwSFlzAAAMUgAADFIB7RQTngAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3Nj
YXBlLm9yZ5vuPBoAAADTSURBVDiN5ZRdSkNBDIW/nIn4gxQFd9AduJmuZO4a3JuL
cAsiYivem/ggVVsd5yJ90u9tcpIzgYRYrXUECh8kcE+fCXhoaOmA9oIGXM4wBrhq
ferAasfV7AQ47TlGxJmk45Y8s7H/gNVaryPCAMzsxd0fe0URsZG0/inHgVtJ75sx
TdOsjjp5Kb6u2yEIL6Ust69xHM8z86hXVUpZRERp6ZLyUB3+AWwYhkpjgBHxLOlp
hs86MzefA56ZNy1jMyPzV3MIB+54u2jfsWD3pLa42PPIV39kQLJK8QjRAAAAAElF
TkSuQmCC}
},0,""},1,
{"Pattern"},"",2,0,1,
{12,
{440,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПоказатьДеревоЗапросовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{279,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаКнопокОсновная",
{1,1,
{"ru","Группа кнопок основная"}
},
{1,1,
{"ru","Группа кнопок основная"}
},0,1,0,0,0,0,0,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},0,2,0,0},11,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{26,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"ФормаВыполнитьЗапрос",
{1,0},1,
{5,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},1,1,0,0,2,2,3,1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{442,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаВыполнитьЗапросРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{530,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"ВыполнитьЗапросУдаленно",
{1,0},1,
{30,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},1,0,0,0,2,2,0,0,0,
{3,2,
{55}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,1,
{0,0ce78048-0196-4f80-a781-9829cdb7f43e},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{531,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыполнитьЗапросУдаленноРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1,0},3d3cb80c-508b-41fa-8a18-680cdf5f1712,
{12,
{368,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ДекорацияПоказатьДеревоЗапросов",
{1,1,
{"ru","Декорация показать дерево запросов"}
},
{1,0},1,3,1,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{4,
{4,1,
{-8},"",-1,-1,1,0,""},0,0,0,
{1,0},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},0,0,
{0,1,0},0,100},1,
{22,
{369,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДекорацияПоказатьДеревоЗапросовКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},0,2,
{1,
{1,1,
{"ru","Декорация показать дерево запросов"}
},0},0,1,
{12,
{444,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДекорацияПоказатьДеревоЗапросовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},1,0,0,1,0,3,3,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{216,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"СкопироватьОбработкуДляОтладки",
{1,0},1,
{24,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{449,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СкопироватьОбработкуДляОтладкиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{220,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"ЗагрузитьЗапросыДляОтладки",
{1,0},1,
{25,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},1,0,0,0,2,2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{450,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗагрузитьЗапросыДляОтладкиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{540,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"ЗагрузитьСохраненныеПечатныеФормы",
{1,0},1,
{32,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{541,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗагрузитьСохраненныеПечатныеФормыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{542,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"ЗагрузитьСохраненныеСхемыСКД",
{1,0},1,
{33,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{543,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗагрузитьСохраненныеСхемыСКДРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{544,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"ЗагрузитьСериализованныеОбъекты",
{1,0},1,
{34,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{545,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗагрузитьСериализованныеОбъектыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{239,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"ВыполнитьКод",
{1,0},1,
{17,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{448,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыполнитьКодРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{411,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"МенюДополнительно",
{1,0},0,
{16,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},1,0,0,0,2,2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA
AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAYdEVYdFNvZnR3
YXJlAHBhaW50Lm5ldCA0LjAuNWWFMmUAAADwSURBVDhPrZMtDsJAEIUbQECC5DD8
mBocl6FBIEnwIPAcANMjIDgEEtFjQLK8r5kl01IEFJIvnZ19fTO7TJMQQiveEtPj
YyjWIheFQUxuWNdXFhKk4ibCB9hL/Tv1l6PwImZiYBCfBXt3Ma4YKEHbsfJedMRc
HAxicluB5ir63oDzxcpdkdnakyX66Rk7WXkDLonkQkwsboI9NMS5N+CmSY7EzuIm
TgINcUFHfzNofYR4iVxQTyxt7TlRUM94iWtv4P/GrQmpRsswsdxGoEFbTmVpYCZ+
kKhCq5wXiP0gvabxZeBMfhvliAS/f0zfE5In9aeZPqQt/uMAAAAASUVORK5CYII=
}
},0,""},1,
{"Pattern"},"",2,0,1,
{12,
{443,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"МенюДополнительноРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{373,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"МенюИнформация",
{1,0},1,
{15,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},1,0,0,0,2,2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,1,
{0,b7c81c62-d6ad-4eae-9cea-0e203182db67},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{451,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"МенюИнформацияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0,0,0,1,0},1,0,1,
{12,
{441,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаКнопокОсновнаяРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{151,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаКнопокНеИспользуемые",
{1,1,
{"ru","Запросы"}
},
{1,1,
{"ru","Группа кнопок не используемые"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,0,
{0}
},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{25,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаНастроитьДополнительно",
{1,0},1,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},1,0,0,0,2,0,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{453,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаНастроитьДополнительноРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,1,1,0},0,0,1,
{12,
{452,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаКнопокНеИспользуемыеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},0,3,3,0},1,0,1,
{12,
{439,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаКнопокОбщаяРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{263,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаЗапрос",
{1,1,
{"ru","Текст запроса"}
},
{1,1,
{"ru","Группа запрос"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},0,2,0,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{35,
{286,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},7,"ТекстТекущегоЗапроса",0,0,
{1,1,
{"ru","Текст запроса"}
},
{1,1,
{"ru","Текст запроса"}
},
{1,
{21}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,100,10,1,1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,0,0,1,0,
{0,1,0}
},
{0,1,0},1,
{22,
{287,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ТекстТекущегоЗапросаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{291,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ТекстЗапросаДляСкрытогоДереваКонтекстноеМенюКонструкторЗапроса",
{1,0},1,
{23,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{455,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТекстЗапросаДляСкрытогоДереваКонтекстноеМенюКонструкторЗапросаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{12,
{456,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТекстТекущегоЗапросаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},3,3,0,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{265,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаПараметрыЗапросов",
{1,1,
{"ru","Скрыть параметры запроса"}
},
{1,1,
{"ru","Группа параметры запроса"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,2,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},0,2,0,0},1,143c00f7-a42d-4cd7-9189-88e4467dc768,
{55,
{375,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},"ПараметрыТекущегоЗапроса",0,0,1,
{1,0},
{1,0},
{1,
{24}
},0,1,0,0,0,1,1,0,0,0,0,0,1,0,1,1,0,1,2,2,1,1,0,0,0,1,2,0,0,1,1,
{0},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,1,2,13,
{"U"},19,
{"S",""},
{2,01d80ddd-dce5-4db3-beb5-f63c97cb05b9,"ПараметрыТекущегоЗапросаПриОкончанииРедактирования",fe115cc8-9e33-4684-a166-bd5136fe7a9f,"",1,0,01d80ddd-dce5-4db3-beb5-f63c97cb05b9,0,1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},
{0},1,
{22,
{376,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ПараметрыТекущегоЗапросаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{22,
{377,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ПараметрыТекущегоЗапросаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},3,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{534,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ПараметрыТекущегоЗапросаГруппа1",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{397,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ПараметрыЗапросовЗаполнитьПараметрыИзЗапроса",
{1,1,
{"ru","Загрузить параметры из запроса"}
},1,
{3,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{460,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыЗапросовЗаполнитьПараметрыИзЗапросаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},1,0,1,
{12,
{535,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыТекущегоЗапросаГруппа1РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{536,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ПараметрыТекущегоЗапросаГруппа2",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{532,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ПараметрыТекущегоЗапросаНастройкиПодключенияКВнешнейБазеВПараметры",
{1,0},1,
{31,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{12,
{533,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыТекущегоЗапросаНастройкиПодключенияКВнешнейБазеВПараметрыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},1,0,1,
{12,
{537,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыТекущегоЗапросаГруппа2РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{538,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ПараметрыТекущегоЗапросаГруппа3",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{31,
{489,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ПараметрыТекущегоЗапросаДобавитьПараметрИзБуфера",
{1,0},1,
{9,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA
AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3
YXJlAHBhaW50Lm5ldCA0LjAuMTM0A1t6AAABU0lEQVQ4T6WSwUrDQBCG8yAeBR9B
0EdQPIroTY8+gIcehF6Ugog3W+jBmx600FJtBEVokBqtErTCEhFBRa16EYVWCuP+
m8x2Y1oiePgyyZ/ZbydhLSL6F7HgoJinzMJYBGS/+xhr3/NoYrFAU0tbqmJBp+12
+dxV2cD4Gg3OrtLQXJ7K9XO5NhTMLO9R67ujyWZGZJ6WZEPSSuA4x7pneDol8z4C
cenq0RlkgHtGJ+e7AoxuCvrx+NzU938SNG5eYtREIEmt5JIFp9d+LLNPGioHiQI0
98qweNOuxQXNjzY9vLVU5WZU37/V0xSqnspB6VAoiRLwYvwoVFPAQlQGz7ltOyoQ
968aU1A9u6LykUsVp67gaSIC8fRFF3fvGhYosXynCTdAvrFTCQTmQeLxAI44Pgci
/DQGz8jXi6VAgBAHwwR25CxjzA30J+DSC+yQBBFZP9FuUJMQI5hcAAAAAElFTkSu
QmCC}
},0,""},1,
{"Pattern"},"",2,0,1,
{12,
{490,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыТекущегоЗапросаДобавитьПараметрИзБуфераРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0,0,1,0},1,0,1,
{12,
{539,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыТекущегоЗапросаГруппа3РасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},0,3,3,0},1,0,0,0,3,3,0},5,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{35,
{388,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ПараметрыЗапросовИмя",1,0,
{1,0},
{1,0},
{2,
{24},
{1}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5006,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{389,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ПараметрыЗапросовИмяКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{12,
{471,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыЗапросовИмяРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},3,3,0,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{402,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ПараметрыЗапросовГруппаТипКартинка",
{1,1,
{"ru","Параметры запроса группа тип картинка"}
},
{1,1,
{"ru","Параметры запроса группа тип картинка"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,2,1,0,3,
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{0},
{"Pattern"},"",
{1,0},0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{35,
{399,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},4,"ПараметрыЗапросовКартинкаТипа",0,0,
{1,0},
{1,0},
{2,
{24},
{6}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,0,1,1,
{4,0,
{0},"",-1,-1,1,0,""},0,0,0,
{1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,0,
{0},1,1,0,48312c09-257f-4b29-b280-284dd89efc1e},0,0,
{0,1,0},1,0,0,1,0,0,100},
{0,1,0},1,
{22,
{400,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ПараметрыЗапросовКартинкаТипаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{12,
{473,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыЗапросовКартинкаТипаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},3,3,0,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{35,
{391,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ПараметрыЗапросовТип",1,0,
{1,1,
{"ru","Тип"}
},
{1,0},
{2,
{24},
{4}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5006,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"ПараметрыЗапросовТипНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{392,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ПараметрыЗапросовТипКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{12,
{474,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыЗапросовТипРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},3,3,0,0},1,0,1,
{12,
{472,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыЗапросовГруппаТипКартинкаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},0,3,3,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{35,
{394,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ПараметрыЗапросовЗначение",1,0,
{1,0},
{1,0},
{2,
{24},
{5}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,1,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,2,00000000-0000-0000-0000-000000000000,
{5006,0},
{0,0},2,
{1,0},
{1,0},2,0,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"ПараметрыЗапросовЗначениеНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ПараметрыЗапросовЗначениеПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{22,
{395,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ПараметрыЗапросовЗначениеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{12,
{475,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыЗапросовЗначениеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},3,3,0,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{35,
{406,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"ПараметрыЗапросовГлобальныйПараметр",1,0,
{1,0},
{1,0},
{2,
{24},
{8}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,0,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{407,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ПараметрыЗапросовГлобальныйПараметрКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{12,
{476,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыЗапросовГлобальныйПараметрРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},3,3,0,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{35,
{495,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"ПараметрыТекущегоЗапросаДобавлятьВоВременнуюТвблицу",1,0,
{1,0},
{1,0},
{2,
{24},
{9}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2,0},
{0,1,0},1,
{22,
{496,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПараметрыТекущегоЗапросаДобавлятьВоВременнуюТвблицуКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{12,
{497,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыТекущегоЗапросаДобавлятьВоВременнуюТвблицуРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},3,3,0,0},2,2,1,0,
{"Pattern"},"","",2,2,0,1,
{12,
{461,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыТекущегоЗапросаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},1,1,1,1,
{5,
{462,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыТекущегоЗапросаСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0},1,
{22,
{463,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПараметрыТекущегоЗапросаСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{12,
{464,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыТекущегоЗапросаСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},2,
{375,0},0,3,3,0},1,
{5,
{465,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ПараметрыТекущегоЗапросаСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,1,0},1,0,0},1,
{22,
{466,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПараметрыТекущегоЗапросаСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{12,
{467,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыТекущегоЗапросаСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},2,
{375,1},0,3,3,0},1,
{5,
{468,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ПараметрыТекущегоЗапросаУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0,2},1,
{22,
{469,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПараметрыТекущегоЗапросаУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{12,
{470,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПараметрыТекущегоЗапросаУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},2,
{375,2},0,3,3,0},0,1,0,0,1,0,3,3,0,1,0,0,0,0,0,0},1,0,1,
{12,
{459,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаПараметрыЗапросовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},0,3,3,0},1,0,1,
{12,
{454,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаЗапросРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},0,3,3,0},1,0,1,
{12,
{426,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаДанныеЗапросаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},0,3,3,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{147,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаРезультатЗапроса",
{1,1,
{"ru","Скрыть результат запроса"}
},
{1,1,
{"ru","Группа результат запроса"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{28,0,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,0,
{3,4,
{0}
},0,2,0,0},1,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{22,
{58,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"КоманднаяПанельРезультатЗапроса",
{1,1,
{"ru","Командная панель результат запроса"}
},
{1,1,
{"ru","Командная панель результат запроса"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,2,
{0}
},0,1,0,1,
{12,
{478,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КоманднаяПанельРезультатЗапросаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},0,3,3,0},1,0,1,
{12,
{477,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаРезультатЗапросаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},0,3,3,0},"","",1,
{22,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{12,
{0},0,0,0,0,"NavigatorРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0,0},0,3,3,0},1,"",2,0,0,0,0,0,3,3,0,0,2,100,1,1,0,0,0,
{49,0}
},"// Консоль запросов 1С от Евгения Лавелина
// e-mail:support@consquery.ru
// http: www.consquery.ru

#Область ОписаниеПеременных

&НаКлиенте
Перем мВыполняетсяЗакрытие, мКэшЗначений, мДлительнаяОперацияЗапущена;

&НаКлиенте
Перем мДеревоЗапросовВидимость;

&НаКлиенте
Перем мОперацииСЗапросами, мТипыИсточниковДанных, мОперацияПослеСохраненияИзменений;

&НаКлиенте
Перем RegExp, мЦветСтиляЦветРамки, мТекущаяСтрокаДереваЗапросов;

&НаКлиенте
Перем мРежимДобавленияСтрокиСЗапросом; // Принимаемые значения: 0 - добавление, 1- копирование, Неопределено - событие добавления строки не было инициировано

&НаКлиенте
Перем мВыполняетсяУдалениеСтроки, мВыполняетсяПеретаскиваниеСтроки Экспорт;

&НаКлиенте
Перем ПредыдущаяСтрока;

#КонецОбласти

#Область ОбработчикиСобытийФормы

Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработкаОбъект = РеквизитФормыВЗначение(""Объект"");  
	
     // установим внутреннее строковое представление типа значения объекта обработки
	//ТипОбработка = ЗначениеВСтрокуВнутр(ТипЗнч(ОбработкаОбъект));
	//ТипОбработка = ""ВнешняяОбработкаОбъект."" + ОбъектОбработки.Метаданные().Имя;
	
	СвойстваРеквизитаРезультатЗапроса = ОбработкаОбъект.гСвойстваРеквизитаРезультатЗапроса();
	
	лПлатформаАктуальна  = (ОбработкаОбъект.гСравнитьВерсии(, ""8.3.6.2421"") >= 0);	
	
	ОбработкаОбъект.гИнициализацироватьСеансовыеДанные(СеансовыеДанные);
	
	Если лПлатформаАктуальна Тогда 
		ЭтотОбъектФорма = ""ЭтотОбъект""
	Иначе
		ЭтотОбъектФорма = ""ЭтаФорма""
	КонецЕсли;
	
	Попытка
		ЭтотОбъектДоступен = Вычислить(""ЭтотОбъект <> Неопределено"");
	Исключение
		ЭтотОбъектДоступен = Ложь;
	КонецПопытки; 
	
	Объект.ПутьКФормам    = ОбработкаОбъект.Метаданные().ПолноеИмя() + "".Форма"";
	ПутьКФайлуСОбработкой = ОбработкаОбъект.ИспользуемоеИмяФайла;
	СписокТипов           = ОбработкаОбъект.гСформироватьСписокТипов();
	
	// +++ создаем пустую таблицу для отображения при открытии
	лРезультат = Новый ТаблицаЗначений;
	лРезультат.Колонки.Добавить(""Поле1"");
	//лРезультат.Добавить();
	
	АдресРезультата = ПоместитьВоВременноеХранилище(лРезультат, УникальныйИдентификатор);
	// --- создаем пустую таблицу для отображения при открытии
	
	СоздатьРеквизитCРезультатомЗапроса(АдресРезультата);
	
	лИмяЭлементаРезультатЗапроса      = СвойстваРеквизитаРезультатЗапроса.ИмяРеквизита;
	лКоманднаяПанельРезультатаЗапроса = Вычислить(""Элементы."" + лИмяЭлементаРезультатЗапроса + "".КоманднаяПанель"");
	
	////////////////////////////////////////////////////////////
	// ФОРМИРУЕМ ОСНОВНОЕ МЕНЮ
	МассивМенюДляДобавления = Новый Массив;
	
	//лПунктМеню = Новый Структура();
	//лПунктМеню.Вставить(""Имя""      , ""Информация"");
	//лПунктМеню.Вставить(""Контейнер"", КоманднаяПанель);
	//лПунктМеню.Вставить(""Картинка"" , ОбработкаОбъект.ПолучитьКартинку(""Информация""));	
	//МассивМенюДляДобавления.Добавить(лПунктМеню);
	
	лПунктМеню = Новый Структура();
	лПунктМеню.Вставить(""Имя""              , ""Дополнительно"");
	лПунктМеню.Вставить(""Контейнер""        , Элементы.МенюОперации);
	лПунктМеню.Вставить(""КореньЭтоПодменю"" , Ложь);	
	лПунктМеню.Вставить(""СкрытьПоУмолчанию"", Ложь);	
	//лПунктМеню.Вставить(""Картинка""        , ОбработкаОбъект.ПолучитьКартинку(""НастроитьСписок""));
	МассивМенюДляДобавления.Добавить(лПунктМеню);
	
	лПунктМеню = Новый Структура();
	лПунктМеню.Вставить(""Имя""              , ""ПреобразованияКодаВЗапросИОбратно"");
	лПунктМеню.Вставить(""Контейнер""        , Элементы.МенюОперации);
	лПунктМеню.Вставить(""КореньЭтоПодменю"" , Ложь);
	лПунктМеню.Вставить(""СкрытьПоУмолчанию"", Ложь);	
	//лПунктМеню.Вставить(""Картинка""        , );
	МассивМенюДляДобавления.Добавить(лПунктМеню);
	
	лПунктМеню = Новый Структура();
	лПунктМеню.Вставить(""Имя""              , ""Сервис"");
	лПунктМеню.Вставить(""Контейнер""        , лКоманднаяПанельРезультатаЗапроса);
	лПунктМеню.Вставить(""КореньЭтоПодменю"" , Истина);
	лПунктМеню.Вставить(""СкрытьПоУмолчанию"", Ложь);	
	//лПунктМеню.Вставить(""Картинка""        , ОбработкаОбъект.ПолучитьКартинку(""НастроитьСписок""));
	МассивМенюДляДобавления.Добавить(лПунктМеню);
	
	лПунктМеню = Новый Структура();
	лПунктМеню.Вставить(""Имя""              , ""Запросы"");
	лПунктМеню.Вставить(""Контейнер""        , лКоманднаяПанельРезультатаЗапроса);
	лПунктМеню.Вставить(""КореньЭтоПодменю"" , );	
	лПунктМеню.Вставить(""СкрытьПоУмолчанию"", Ложь);	
	//лПунктМеню.Вставить(""Картинка""        , Новый Картинка);
	МассивМенюДляДобавления.Добавить(лПунктМеню);

	лПунктМеню = Новый Структура();
	лПунктМеню.Вставить(""Имя""              , ""ПодменюВременныеТаблицы"");
	лПунктМеню.Вставить(""Контейнер""        , лКоманднаяПанельРезультатаЗапроса);
	лПунктМеню.Вставить(""КореньЭтоПодменю"" , Истина);	
	лПунктМеню.Вставить(""СкрытьПоУмолчанию"", Истина);	
	//лПунктМеню.Вставить(""Картинка""        , ОбработкаОбъект.ПолучитьКартинку(""НастроитьСписок""));
	МассивМенюДляДобавления.Добавить(лПунктМеню);

	лПунктМеню = Новый Структура();
	лПунктМеню.Вставить(""Имя""              , ""ПодменюТаблицыПакета"");
	лПунктМеню.Вставить(""Контейнер""        , лКоманднаяПанельРезультатаЗапроса);
	лПунктМеню.Вставить(""КореньЭтоПодменю"" , Истина);	
	лПунктМеню.Вставить(""СкрытьПоУмолчанию"", Истина);	
	//лПунктМеню.Вставить(""Картинка""        , ОбработкаОбъект.ПолучитьКартинку(""НастроитьСписок""));
	МассивМенюДляДобавления.Добавить(лПунктМеню);
	
	лПутькКартинке = гЗначениеИзСеансовыхДанных(""ПутькКартинкам"", СеансовыеДанные);
	
	Для каждого ТекущееМеню Из МассивМенюДляДобавления Цикл
		лДеревоМеню = ОбработкаОбъект.гПолучитьМеню(ТекущееМеню.Имя, Истина, Ложь, лПутькКартинке);
		ЗаполнитьМенюПоДеревуНаСервереРекурсивно(ТекущееМеню.Контейнер, лДеревоМеню, ТекущееМеню.КореньЭтоПодменю, ТекущееМеню.СкрытьПоУмолчанию);
	КонецЦикла; 
	
	////////////////////////////////////////////////////////////
	// ФОРМИРУЕМ КОНТЕКСТНОЕ МЕНЮ И КНОПКИ ТАБЛИЦЫ С РЕЗУЛЬТАТОМ
	
	лИмяКоманды  = ""РезультатЗапросаПолучитьТипЗначения"";
	КомандаФормы = Команды.Добавить(лИмяКоманды);
	КомандаФормы.Действие = лИмяКоманды;
	
	Кнопка = Элементы.Добавить(""МенюТаблицыРезультатаПолучитьТипЗначения"", Тип(""КнопкаФормы""), Вычислить(""Элементы."" + лИмяЭлементаРезультатЗапроса).КонтекстноеМеню);
	Кнопка.ИмяКоманды = лИмяКоманды;
	Кнопка.Заголовок  = ""Получить тип значения"";		
	
	// добавляем строку состояния к элементу с результатом запроса
	лИмяКоманды  = ""ОчиститьТаблицуСРезультатом"";
	КомандаФормы = Команды.Добавить(лИмяКоманды);
	КомандаФормы.Действие = лИмяКоманды;
	
	Кнопка = Элементы.Добавить(""КнопкаКоличествоСтрокРезультатаЗапроса"", Тип(""КнопкаФормы""), лКоманднаяПанельРезультатаЗапроса);
	Кнопка.ИмяКоманды  = лИмяКоманды;
	Кнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
	Кнопка.ЦветТекста  = ЦветаОбработки().Синий;

	////////////////////////////////////////////////////////////
	// ПРОЧИЕ ДЕЙСТВИЯ
	
	// восстанавливаем настройки по умолчанию
	ЗначенияПоУмолчанию	= ВосстановитьНастройкиНаСервере();
	
	ИнициироватьПараметрыЗапросов();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Перем СтрокаЗапросаПриОткрытии;
	
	мОперацииСЗапросами   = гОперацииСЗапросами();
	мТипыИсточниковДанных = гТипыИсточниковДанных();
	
	мЦветСтиляЦветРамки = ПолучитьЦветСтиляНаСервере(""ЦветРамки"");
	
	мДлительнаяОперацияЗапущена = Истина;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(""ВыполнитьДействиеЗавершение"", Вычислить(ЭтотОбъектФорма));
	
	ПараметрыФормыДлительнойОперации = ПараметрыОжидания(Неопределено);
	
	ОткрытьФорму(""ВнешняяОбработка.КонсольЗапросов.Форма.ДлительнаяОперация"", ПараметрыФормыДлительнойОперации, Вычислить(ЭтотОбъектФорма),,,, ОповещениеОЗавершении);

	ВосстановитьНастрокиОбработки(СтрокаЗапросаПриОткрытии);
	
	ОформитьКнопкуПоказатьСекциюСЗапросами(Элементы.ГруппаДанныеЗапроса.Видимость);
	ОформитьКнопкуПоказатьРезультат(Элементы[СвойстваРеквизитаРезультатЗапроса.ИмяЭлементаРодителя].Видимость);
	ОформитьКнопкуПоказатьПараметры(Элементы.ГруппаПараметрыЗапросов.Видимость);
	
	ЗагрузитьЗапросы(ИмяФайлаСЗапросом, мОперацииСЗапросами.Открыть);
	
	мДеревоЗапросовВидимость = Элементы.ДеревоЗапросов.Видимость;
	
	Если ЗначениеЗаполнено(СтрокаЗапросаПриОткрытии) Тогда 
		Элементы.ДеревоЗапросов.ТекущаяСтрока = СтрокаЗапросаПриОткрытии;
	КонецЕсли;
	
	ОтобразитьДеревоЗапросов(мДеревоЗапросовВидимость);
	
	Модифицированность          = Ложь;
	мДлительнаяОперацияЗапущена = Ложь;
	
	ПоместитьВоВременноеХранилище(Новый Структура(""Статус"", ""Выполнено""), ПараметрыФормыДлительнойОперации.ИдентификаторЗадания);
	
	ИдентификаторСессии = гВосстановитьИдентификаторСессииConsqueryCloud();
	УстановитьИмяПользователяВОблаке();
	
	ОбновитьСостояниеРезультатаЗапроса();
	ОбновитьЗаголовок();

	ВывестиПозициюКурсора();
	
КонецПроцедуры // ПриОткрытии()

// #ОрганичениеПлатформы с 8.3.8 другой набор параметров при закрытии 
// Ранее было ПередЗакрытием(Отказ, СтандартнаяОбработка)
//(Подробности: https://its.1c.ru/db/metod8dev/content/5907/hdoc, 
//https://xn----1-bedvffifm4g.xn--p1ai/news/2017-03-21-how2-correctly-close-forms-and-applications/)
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) 
	
	Если ЗавершениеРаботы Тогда 
		Отказ = Истина;
		ТекстПредупреждения = СтрШаблон(""Работа в данном окне не завершена. 
			|Возможно какие-то данные были не сохранены. 
			|Нажмите """"Продолжить работу"""" и закройте обработку."");
		Возврат;
	КонецЕсли;
	
	Если Не мВыполняетсяЗакрытие Тогда 
	    СтандартнаяОбработка = Ложь;
		Отказ                = Истина;
		ПроверитьМодифицированность(ОперацияПроверкиМодифицированности().ЗакрытьФорму);
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

&НаСервереБезКонтекста
Процедура УдалитьФайлыНаСервере(УдаляемыеФайлы)
	
	Если ТипЗнч(УдаляемыеФайлы) = Тип(""Строка"") Тогда 
		лФайл = Новый Файл(УдаляемыеФайлы);
		Если лФайл.Существует() Тогда 
			УдалитьФайлы(УдаляемыеФайлы);
		КонецЕсли;
	ИначеЕсли ТипЗнч(УдаляемыеФайлы) = Тип(""Массив"") Тогда 
		Для Каждого ФайлКУдалению Из УдаляемыеФайлы Цикл
			Если ТипЗнч(ФайлКУдалению) = Тип(""Строка"") Тогда 
				УдалитьФайлыНаСервере(ФайлКУдалению);
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // УдалитьФайлыНаСервере()
	
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = ""ОбновитьПараметрСТаблицейЗначений"" ИЛИ 
		ИмяСобытия = ""ОбновитьПараметрСГраницей"" Тогда	
		ОбновитьПараметрПослеРедактированияВоВнешнейФорме(Параметр);
	ИначеЕсли ИмяСобытия = ""НеобходимоПереподключиться"" Тогда 
		ПодключенияКОблакуДействие();
	ИначеЕсли ИмяСобытия = ""ОбновитьНастройкиПрокси"" Тогда 
		// добавить сохранение настроек прокси
	ИначеЕсли ИмяСобытия = ""ОбработатьИзменениеДанныхОПодключении"" Тогда 
		ОбработатьИзменениеДанныхОПодключении(Параметр);
	ИначеЕсли ИмяСобытия = ""СохранитьПередВыполнениемПриИзменении"" Тогда 
		СохранитьПередВыполнением = Параметр;
	ИначеЕсли ИмяСобытия = ""ПоказыватьВременныеТаблицыПриИзменении"" Тогда 
		ПоказыватьВременныеТаблицы = Параметр;		
	ИначеЕсли ИмяСобытия = ""ПоказыватьЗапросыПакетаПриИзменении"" Тогда 
		ПоказыватьЗапросыПакета = Параметр;				
	ИначеЕсли ИмяСобытия = ""РежимТестированияВыполненияЗапросаПриИзменении"" Тогда 
		РежимТестированияВыполненияЗапроса = Параметр;				
	ИначеЕсли ИмяСобытия = ""РезультатЗапросаВДеревоПриИзменении"" Тогда 
		РезультатЗапросаВДерево = Параметр;
		ОбновитьСостояниеРезультатаЗапроса();
	ИначеЕсли ИмяСобытия = ""ДобавитьЗапросКодИзПредпросмотра"" Тогда 
		Если ЗначениеЗаполнено(Параметр.идПакета) Тогда 
			ЗагрузитьЗапросыИзОблака(Параметр.идПакета, Параметр.идЗапроса, Параметр.идКода, Ложь, РодительСтрокиСЗапросом(мТекущаяСтрокаДереваЗапросов));
		Иначе
			ЗагрузитьКодИзПредпросмотра(Параметр.НаименованиеКода, Параметр.КодДляВыполнения, РодительСтрокиСЗапросом(мТекущаяСтрокаДереваЗапросов));
		КонецЕсли;
		Активизировать();
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоЗапросов

&НаКлиенте
Процедура ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	мРежимДобавленияСтрокиСЗапросом = Копирование;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)
	
	Если мРежимДобавленияСтрокиСЗапросом = Неопределено Тогда 
		
		Если Элементы.ДеревоЗапросов.ТекущаяСтрока = ПредыдущаяСтрока Тогда
	        Возврат;
	    КонецЕсли;	
		
		ПредыдущаяСтрока = Элементы.ДеревоЗапросов.ТекущаяСтрока;		
		ПодключитьОбработчикОжидания(""ДеревоЗапросовПриАктивизацииСтрокиДействие"", 0.1, Истина);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПриАктивизацииСтрокиДействие()

	Если мВыполняетсяУдалениеСтроки <> Истина И мВыполняетсяПеретаскиваниеСтроки <> Истина  Тогда 
		// сохраняем текст и параметры текущего запроса
		СохранитьЗначенияПоЗапросу(мТекущаяСтрокаДереваЗапросов);
		
	Иначе 
		
		мВыполняетсяУдалениеСтроки       = Неопределено;
		мВыполняетсяПеретаскиваниеСтроки = Неопределено;
		
	КонецЕсли;
	
	мТекущаяСтрокаДереваЗапросов = Элементы.ДеревоЗапросов.ТекущаяСтрока;
	
	// заполняем поля с текущим запросом и параметрами соответствующими значениями
	ОбновитьЭлементыФормыДляТекущегоЗапроса(мТекущаяСтрокаДереваЗапросов)

КонецПроцедуры // ДеревоЗапросовПриАктивизацииСтрокиДействие()
 		
&НаКлиенте
Процедура ДеревоЗапросовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если мРежимДобавленияСтрокиСЗапросом <> Неопределено Тогда 
		
		Если Не ОтменаРедактирования Тогда 
			// сохраняем текст и параметры текущего запроса
			СохранитьЗначенияПоЗапросу(мТекущаяСтрокаДереваЗапросов);
			
			мСтараяСтрокаДереваЗапросов  = мТекущаяСтрокаДереваЗапросов;
			мТекущаяСтрокаДереваЗапросов = Элементы.ДеревоЗапросов.ТекущаяСтрока;
			
			мТекущиеДанныеДереваЗапросов = Элементы.ДеревоЗапросов.ТекущиеДанные;
			мТекущиеДанныеДереваЗапросов.Идентификатор = Новый УникальныйИдентификатор;
			
			Если мРежимДобавленияСтрокиСЗапросом = Истина Тогда    // строку скопировали
				
				// копируем код выполнения предыдущего запроса
				мИдентификаторСтарогоЗапроса = ИдентификаторЗапроса(мСтараяСтрокаДереваЗапросов);
				СкопироватьИсполняемыйКод(мИдентификаторСтарогоЗапроса, мТекущиеДанныеДереваЗапросов.Идентификатор);
				
			ИначеЕсли мРежимДобавленияСтрокиСЗапросом = Ложь Тогда // строку не копировали
				// заполняем поля с текущим запросом и параметрами соответствующими значениями
				ОбновитьЭлементыФормыДляТекущегоЗапроса(Неопределено)
			КонецЕсли;
			
			ПредыдущаяСтрока = Элементы.ДеревоЗапросов.ТекущаяСтрока;		
			
		КонецЕсли;
		
		мРежимДобавленияСтрокиСЗапросом = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры // ДеревоЗапросовПриОкончанииРедактирования()

&НаКлиенте
Процедура ДеревоЗапросовПередУдалением(Элемент, Отказ)
	
	Если ДеревоЗапросов.ПолучитьЭлементы().Количество() = 1 И Элементы.ДеревоЗапросов.ТекущаяСтрока = ДеревоЗапросов.ПолучитьЭлементы()[0].ПолучитьИдентификатор() Тогда   
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения(""ПослеЗакрытияВопросаСоздатьНовыйФайл"", ЭтаФорма, Новый Структура(""Режим"", ""СоздатьНовыйФайл"")), 
			""Список запросов должен содержать хотя бы одну строку. Создать новый файл?"",
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	мВыполняетсяУдалениеСтроки = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	// без данной процедуры не успевает отрабатывает процедура, вызываемая с задержкой из ПриАктивацииСтроки
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	//// #рефакторинг: обработать перенос нескольких строк и перенос в строку на том же уровне(типовой механизм это пока не обрабатывает)
	//// Источник: https://partners.v8.1c.ru/forum/message/1647998#m_1647998
	// если ПараметрыПеретаскивания.Значение.Количество() = 1 Тогда // пока для простоты отработаем вариант перетаскивания по одной строке
	//	лИсточник = ДеревоЗапросов.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
	//	лПриемник   = ДеревоЗапросов.НайтиПоИдентификатору(Строка);
	//	Если лПриемник.ПолучитьРодителя() = лИсточник.ПолучитьРодителя() Тогда
	//		лНоваяСтрока = лПриемник.ПолучитьЭлементы().Добавить();
	//		ЗаполнитьЗначенияСвойств(лНоваяСтрока, лИсточник);
	//		// если ""лИсточник"" это группа здесь нужно ещё предусмотреть перенос всех вложенных строк (рекурсией)
	//		лИсточник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(лИсточник);
	//		Элементы.Дерево.Развернуть(лПриемник.ПолучитьИдентификатор());
	//		мТекущаяСтрокаДереваЗапросов = лНоваяСтрока;
	//	КонецЕсли;
	// конецЕсли;	
	
	мВыполняетсяПеретаскиваниеСтроки = Истина;
	СохранитьЗначенияПоЗапросу(мТекущаяСтрокаДереваЗапросов);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если СохранитьПередВыполнением Тогда 
		ПроверитьМодифицированность(мОперацииСЗапросами.Выполнить);
	Иначе
		ПроверитьКоличествоСтрокВРезультатеИЗапуститьВыполнениеЗапроса();
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультатЗапроса

&НаКлиенте
Процедура РезультатЗапросаВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(АдресСпискаСпецПолей) Тогда 
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ИмяТекущегоПоля = Сред(Элемент.ТекущийЭлемент.Имя, СтрДлина(СвойстваРеквизитаРезультатЗапроса.ИмяРеквизита) + 1);
		ИмяТекущегоПоляБезСпецПрефикса = ПолучитьИмяСпецПоля(ИмяТекущегоПоля);
		лСпецПоля = ПолучитьИзВременногоХранилища(АдресСпискаСпецПолей);
		Если лСпецПоля.Свойство(ИмяТекущегоПоляБезСпецПрефикса) Тогда 
			РасшифроватьСпецПоле(ИмяТекущегоПоля, ТекущиеДанные.ПолучитьИдентификатор(), лСпецПоля[ИмяТекущегоПоляБезСпецПрефикса]);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РезультатЗапросаПриИзменении(Элемент)
	ОбновитьСостояниеРезультатаЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура РезультатЗапросаПередНачаломИзменения(Элемент, Отказ)
	// #рефакторинг: удалить или добавить алгоритм события
КонецПроцедуры

&НаКлиенте
Процедура РезультатЗапросаПолучитьТипЗначения(Команда)
	лТекущиеДанные = Элементы[СвойстваРеквизитаРезультатЗапроса.ИмяРеквизита].ТекущиеДанные;
	Если лТекущиеДанные <> Неопределено Тогда 
		СодержимоеЯчейки = лТекущиеДанные[СтрЗаменить(Элементы[СвойстваРеквизитаРезультатЗапроса.ИмяРеквизита].ТекущийЭлемент.Имя, СвойстваРеквизитаРезультатЗапроса.ИмяРеквизита + ""_"", """")];
		ПоказатьВводСтроки(Новый ОписаниеОповещения(""ПоказатьВводСтрокиЗавершение"", ЭтаФорма), гПредставлениеТипа(ТипЗнч(СодержимоеЯчейки)), ""Тип значения"", ,Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыТекущегоЗапроса

&НаКлиенте
Процедура ПараметрыЗапросовТипНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущийПараметр = Элементы.ПараметрыТекущегоЗапроса.ТекущиеДанные;
	
	ЗаголовокЭлемента = НСтр(""ru = 'Выбрать тип'"");
	ОписаниеОповещения = Новый ОписаниеОповещения(""ЗавершениеВыбораТипаПараметра"", Вычислить(ЭтотОбъектФорма));
	СписокТипов.ПоказатьВыборЭлемента(ОписаниеОповещения, ЗаголовокЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросовЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	лТекущиеДанные = Элементы.ПараметрыТекущегоЗапроса.ТекущиеДанные;
	лТипПараметра  = лТекущиеДанные.ТипВФорме;
	
	Если лТипПараметра= НСтр(""ru = 'Таблица значений'"") Тогда 
		Путь = Объект.ПутьКФормам + ""."" + ""ТаблицаЗначений"";
	ИначеЕсли лТипПараметра = НСтр(""ru = 'Момент времени'"") Тогда 
		Путь = Объект.ПутьКФормам + ""."" + ""МоментВремени"";
	ИначеЕсли лТипПараметра = НСтр(""ru = 'Граница'"") Тогда
		Путь = Объект.ПутьКФормам + ""."" + ""Граница"";
	ИначеЕсли лТипПараметра = НСтр(""ru = 'Уникальный идентификатор'"") Тогда
		лПараметры = Новый Структура;
		лПараметры.Вставить(""Действие""     , Константы().УстановитьПараметрУИ);
		лПараметры.Вставить(""ТекущиеДанные"", лТекущиеДанные);
		лОписаниеОповещения = Новый ОписаниеОповещения(""ПоказатьВводСтрокиЗавершение"", Вычислить(ЭтотОбъектФорма), лПараметры);
		ПоказатьВводСтроки(лОписаниеОповещения, Строка(лТекущиеДанные.ЗначениеВФорме), ""Введите уникальный идентификатор"");
		Возврат;
	ИначеЕсли лТипПараметра = НСтр(""ru = 'Строка'"") Тогда
		лПараметры = Новый Структура;
		лПараметры.Вставить(""Действие""     , Константы().УстановитьПараметрСтрока);
		лПараметры.Вставить(""ТекущиеДанные"", лТекущиеДанные);
		лОписаниеОповещения = Новый ОписаниеОповещения(""ПоказатьВводСтрокиЗавершение"", Вычислить(ЭтотОбъектФорма), лПараметры);
		ПоказатьВводСтроки(лОписаниеОповещения, Строка(лТекущиеДанные.ЗначениеВФорме), ""Введите значение параметра"",, Истина);
		Возврат;
	Иначе
		Возврат;
	КонецЕсли;
	
	лПараметрыформы = Новый Структура();
	лПараметрыформы.Вставить(""Значение""           , лТекущиеДанные.Значение);
	лПараметрыформы.Вставить(""ДоступныеТипыДанных"", ПоместитьВоВременноеХранилище(гЗначениеИзСеансовыхДанных(""ДоступныеТипыДанных"", СеансовыеДанные)));
	
	ОткрытьФорму(Путь, лПараметрыформы, Вычислить(ЭтотОбъектФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросовЗначениеПриИзменении(Элемент)

	ТекущийПараметр = Элементы.ПараметрыТекущегоЗапроса.ТекущиеДанные;
	Значение        = ТекущийПараметр.ЗначениеВФорме;
	ТекущийТип		= ТекущийПараметр.Тип;
	
	Если ТекущийТип <> ""ТаблицаЗначений"" И ТекущийТип <> ""МоментВремени"" И ТекущийТип <> ""Граница"" Тогда
		// #рефакторинг непрозрачный код
		ТекущийПараметр.Значение	= ЗначениеВСтрокуСервер(Значение);		
		Модифицированность 			= Истина;
	КонецЕсли;
	
КонецПроцедуры // ПараметрыЗапросовЗначениеПриИзменении()

&НаКлиенте
Процедура ПараметрыТекущегоЗапросаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если Элемент.ТекущиеДанные.Тип = """" Тогда 
		лВыбранныйЭлемент = СписокТипов.НайтиПоЗначению(""Строка"");
		//ИнициализацияТипаИЗначенияПараметраПоИдентиифкатору(Элементы.ПараметрыТекущегоЗапроса.ТекущаяСтрока, ЭлементСпискаВСтруктуру(лВыбранныйЭлемент));
		ИнициализацияТипаИЗначенияПараметра(Элементы.ПараметрыТекущегоЗапроса, ЭлементСпискаВСтруктуру(лВыбранныйЭлемент), Ложь);
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры // ПараметрыТекущегоЗапросаПриОкончанииРедактирования()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	Если СохранитьПередВыполнением Тогда 
		ПроверитьМодифицированность(мОперацииСЗапросами.Выполнить);
	Иначе
		ПроверитьКоличествоСтрокВРезультатеИЗапуститьВыполнениеЗапроса();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросУдаленно(Команда)
	Если СохранитьПередВыполнением Тогда 
		ПроверитьМодифицированность(мОперацииСЗапросами.ВыполнитьУдаленно);
	Иначе
		ПроверитьКоличествоСтрокВРезультатеИЗапуститьВыполнениеЗапроса(Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКод(Команда)
	ОбработкаДействияВыполнитьКод();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДеревоЗапросов(Команда)
	
	ОтобразитьДеревоЗапросов(Не мДеревоЗапросовВидимость);

КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьЗапросыВФайл(Команда)
	СохранитьЗапросыВФайлНачало(Ложь, Ложь, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьНастройкиОбработки(Команда)
	
	лПараметрыДляОткрытияФормы = Новый Структура;
	лПараметрыДляОткрытияФормы.Вставить(""СохранитьПередВыполнением""         , СохранитьПередВыполнением);
	лПараметрыДляОткрытияФормы.Вставить(""РезультатЗапросаВДерево""           , РезультатЗапросаВДерево);
	лПараметрыДляОткрытияФормы.Вставить(""ПоказыватьВременныеТаблицы""        , ПоказыватьВременныеТаблицы);
	лПараметрыДляОткрытияФормы.Вставить(""ПоказыватьЗапросыПакета""           , ПоказыватьЗапросыПакета);
	лПараметрыДляОткрытияФормы.Вставить(""РежимТестированияВыполненияЗапроса"", РежимТестированияВыполненияЗапроса);
	
	
	ОткрытьФорму(""ВнешняяОбработка.КонсольЗапросов.Форма.ФормаУпрНастройки"", лПараметрыДляОткрытияФормы, 
		Вычислить(ЭтотОбъектФорма));

КонецПроцедуры // КомандаОткрытьНастройкиОбработки()

&НаКлиенте
Процедура ОткрытьФайлСЗапросами(Команда)
	
	ПроверитьМодифицированность(мОперацииСЗапросами.Открыть);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйФайлЗапросов(Команда)
	
	ПроверитьМодифицированность(мОперацииСЗапросами.Новый);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыИзЗапроса(Команда)
	
	Перем ТекстОшибки;
	
	Если Не ПустаяСтрока(ТекстТекущегоЗапроса) Тогда
		
		Если Не ДобавитьПараметрыТекущегоЗапросаПоТекстуЗапроса(ТекстТекущегоЗапроса, ТекстОшибки) Тогда 
			ПоказатьСообщениеПользователю(ТекстОшибки, Объект, УникальныйИдентификатор, ""Объект"");
		Иначе
			Модифицированность = Истина;
		КонецЕсли;
	Иначе
		лТекстПредупреждения = НСтр(""ru = 'Текст запроса пустой.'"");
		ПоказатьПредупреждение(Новый ОписаниеОповещения(""ПоказатьПредупреждениеЗавершение"", ЭтаФорма), лТекстПредупреждения);
	КонецЕсли;                                                                                       
	
КонецПроцедуры // ЗаполнитьПараметрыИзЗапроса()

&НаКлиенте
Процедура НастройкиПодключенияКВнешнейБазеВПараметры(Команда)
	ОбработкаДействийНастройкиПодключенияКВнешнейБазеВПараметры();	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПараметрИзБуфера(Команда)
	ОбработкаДействияДобавитьПараметрИзБуфера();
КонецПроцедуры

&НаКлиенте
Процедура КонструкторЗапроса(Команда)

	Перем НачалоСтрока,КолонкаНач,СтрокаКон,КолонкаКон;
	
	лВыделенныйТекстТекущегоЗапроса = ВыделенныйТекстТекущегоЗапроса();
	
	Если лВыделенныйТекстТекущегоЗапроса = """" Тогда
		лТекстДляКонструктора = ТекстТекущегоЗапроса;
	Иначе
		лТекстДляКонструктора = лВыделенныйТекстТекущегоЗапроса;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура(""СтруктураГраницВыделения, Модифицированность"");
	ПараметрыОповещения.Модифицированность = Модифицированность;
	Если лВыделенныйТекстТекущегоЗапроса <> """" Тогда 
		
		ТекущийЭлемент.ПолучитьГраницыВыделения(НачалоСтрока,КолонкаНач,СтрокаКон,КолонкаКон);
		
		лСтруктураГраницВыделения = Новый Структура();
		лСтруктураГраницВыделения.Вставить(""НачалоСтрока"", НачалоСтрока);
		лСтруктураГраницВыделения.Вставить(""КолонкаНач""  , КолонкаНач);
		лСтруктураГраницВыделения.Вставить(""СтрокаКон""   , СтрокаКон);
		лСтруктураГраницВыделения.Вставить(""КолонкаКон""  , КолонкаКон);		
		
		ПараметрыОповещения.СтруктураГраницВыделения = лСтруктураГраницВыделения;
	КонецЕсли;
	
	Конструктор = Новый КонструкторЗапроса; 
	Если ЗначениеЗаполнено(лТекстДляКонструктора) Тогда 
		Попытка
			Конструктор.Текст = СокрЛП(лТекстДляКонструктора); 
		Исключение
			лТекстОшибки = ОписаниеОшибки();
			лКоординатыОшибки = ПолучитьКоординатыОшибкиНаСервере(лТекстОшибки);
			
			Если лКоординатыОшибки <> Неопределено Тогда 
				лСтрока = лКоординатыОшибки.Строка;
				лКолонка = лКоординатыОшибки.Колонка;				
				ЭлементТекстТекущегоЗапроса().УстановитьГраницыВыделения(лСтрока, лКолонка, лСтрока, лКолонка);
			КонецЕсли;
			Сообщить(лТекстОшибки, СтатусСообщения.Важное);
			Возврат;
		КонецПопытки; 
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(""ОткрытьКонструкторЗапросаЗавершение"", Вычислить(ЭтотОбъектФорма), ПараметрыОповещения); 
	Конструктор.Показать(Оповещение);
	
КонецПроцедуры

// Копия процедуры обычной формы КнопкаМенюДополнительноСкопироватьОбработкуДляОтладки
&НаКлиенте
Процедура СкопироватьОбработкуДляОтладки(Команда)
	
	Попытка
		Данные = Новый ДвоичныеДанные(ПутьКФайлуСОбработкой);
		Адрес  = ПоместитьВоВременноеХранилище(Данные);
		ПутьКФайлуСОбработкойНаСервере = СкопироватьОбработкуДляОтладкиНаСервере(Адрес, ПутьКФайлуСОбработкой);	
	Исключение
		мПоказатьОшибкуНаСервере(ОписаниеОшибки());
	КонецПопытки; 
	
	Если ПутьКФайлуСОбработкойНаСервере <> Неопределено Тогда 
		ТД = Новый ТекстовыйДокумент(); 		
		ТД.УстановитьТекст(ПомощьПоОтладке(ПутьКФайлуСОбработкойНаСервере));
		ТД.Показать(""Инструкция по отладке запросов.""); 
	КонецЕсли;
	
КонецПроцедуры // СкопироватьОбработкуДляОтладки()

&НаКлиенте
Процедура ЗагрузитьЗапросыДляОтладки(Команда)
	
	Если РазмерРезультатаЗапроса() < МногоДанныхВРезультатеЗапроса() Тогда 
		ЗагрузитьЗапросыДляОтладкиПродолжение()
	Иначе 
		лПараметрыВопроса = Новый Структура;
		лПараметрыВопроса.Вставить(""Операция"", мОперацииСЗапросами.ЗагрузитьЗапросыДляОтладки);
		СпроситьОчиститьРезультатЗапросаЕслиМногоДанных(лПараметрыВопроса)
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьЗапросыДляОтладки()

&НаКлиенте
Процедура ЗагрузитьЗапросыДляОтладкиПродолжение()
	
	лРезультатЗагрузки = ЗагрузитьЗапросыДляОтладкиНаСервере();
	
	мТекущаяСтрокаДереваЗапросов = Неопределено;
	Элементы.ДеревоЗапросов.ТекущаяСтрока = ДеревоЗапросов.ПолучитьЭлементы()[ДеревоЗапросов.ПолучитьЭлементы().Количество()-1].ПолучитьИдентификатор();	
	
	Если лРезультатЗагрузки = 0 Тогда 
		ПоказатьПредупреждение(Новый ОписаниеОповещения(""ПоказатьПредупреждениеЗавершение"", Вычислить(ЭтотОбъектФорма)), ""Не найдено данных для отладки."", 10, ""Информация"");
	Иначе
		ОтобразитьДеревоЗапросов(Истина);
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьЗапросыДляОтладкиПродолжение()
	


&НаКлиенте
Процедура ЗагрузитьСохраненныеПечатныеФормы(Команда)
	
	Перем КаталогВременныхФайлов, ИмяСервера;
	
	СписокПечатныхФорм = гСписокФайловНаСервереПоПрефиксу(КаталогВременныхФайлов, ИмяСервера, ""ПрефиксФайлаСПечатнойФормой"");
	
	Если СписокПечатныхФорм.Количество() = 0 Тогда 
		лТекстСообщения = ""Не найдено сохраненных печатных форм (%КаталогВременныхФайлов%, %ИмяСервера%)."";
		лТекстСообщения = СтрЗаменить(лТекстСообщения, ""%ИмяСервера%""            , ИмяСервера);
		лТекстСообщения = СтрЗаменить(лТекстСообщения, ""%КаталогВременныхФайлов%"", КаталогВременныхФайлов);
		ПоказатьСообщениеПользователю(лТекстСообщения, Объект, УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.Заголовок = ""Выберите каталог для загрузки печатных форм"";
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(""ВыполнитьПослеПолученияФайлов"", Вычислить(ЭтотОбъектФорма), Новый Структура(""КаталогВременныхФайлов"", КаталогВременныхФайлов));
	
	НачатьПолучениеФайлов(ОповещениеОЗавершении, СписокПечатныхФорм, ДиалогВыбораКаталога, Истина);
	
КонецПроцедуры // ЗагрузитьСохраненныеПечатныеФормы()

&НаКлиенте
Процедура ЗагрузитьСохраненныеСхемыСКД(Команда)
	ЗагрузитьФайлыНаКлиент(""ЗагрузитьСохраненныеСхемыСКД"");
КонецПроцедуры // ЗагрузитьСохраненныеСхемыСКД()

&НаКлиенте
Процедура ЗагрузитьСериализованныеОбъекты(Команда)
	ЗагрузитьФайлыНаКлиент(""ЗагрузитьСериализованныеОбъекты"");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	КомментированиеВыделенногоТекста(Истина);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКомментарий(Команда)
	КомментированиеВыделенногоТекста(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДействияКнопкаМенюIntellisense(Команда)
	ОткрытьМенюАвтоподстановки(ЭлементТекстТекущегоЗапроса());
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуСРезультатом(Команда)
	
	Если РазмерРезультатаЗапроса() > 0 Тогда 
		лОписаниеОповещения = Новый ОписаниеОповещения(""ВопросЗавершение"", Вычислить(ЭтотОбъектФорма), Новый Структура(""ИдВопроса"", ""ОчиститьТаблицуСРезультатом""));
		ПоказатьВопрос(лОписаниеОповещения, 
			НСтр(""ru = 'Очистить результат запроса?'""), 
			РежимДиалогаВопрос.ОКОтмена, 
			10, 
			КодВозвратаДиалога.Отмена, 
			""Вопрос"", 
			КодВозвратаДиалога.Нет);
	Иначе
		ПоказатьПредупреждение(Новый ОписаниеОповещения(""ПоказатьПредупреждениеЗавершение"", Вычислить(ЭтотОбъектФорма)), ""Таблица с результатом пуста."", 10);
	КонецЕсли;	
КонецПроцедуры // ОчиститьТаблицуСРезультатом()

&НаКлиенте
Процедура НоваяСтрокаНаТомЖеУровне(Команда)
	лРодительТекущейСтроки = РодительСтрокиСЗапросом(мТекущаяСтрокаДереваЗапросов);
	лНоваяСтрока = ?(лРодительТекущейСтроки = Неопределено, ДеревоЗапросов, лРодительТекущейСтроки).ПолучитьЭлементы().Добавить();
	лНоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
	Элементы.ДеревоЗапросов.ТекущаяСтрока = лНоваяСтрока.ПолучитьИдентификатор();
КонецПроцедуры // НоваяСтрокаНаТомЖеУровне()

&НаКлиенте
Процедура СгруппироватьЗапросы(Команда)
	
	лОписаниеОповещения = Новый ОписаниеОповещения(""ПоказатьВводСтрокиСгруппироватьЗапросыПродолжение"", ЭтаФорма);
	
	ПоказатьВводСтроки(лОписаниеОповещения, ""Сгруппирована "" + ТекущаяДата(), ""Введите название группы"", 200);
	
КонецПроцедуры // СгруппироватьЗапросы()

&НаКлиенте
Процедура ВыгрузитьТекущийЗапросВОблако(Команда)
	СохранитьЗапросыВОблако(мОперацииСЗапросами.СохранитьКАК, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеЗапросыВОблако(Команда)
	СохранитьЗапросыВОблако(мОперацииСЗапросами.СохранитьКАК);
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПодключенияКОблаку(Команда)
	ПодключенияКОблакуДействие();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗапросИзОблака(Команда)
	ДобавитьЗапросИзОблакаДействие();
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьЗапросыВНовыйФайл(Команда)
	СохранитьЗапросыВФайлНачало(Истина, Ложь, Неопределено);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Константы

&НаКлиентеНаСервереБезКонтекста
Функция ОперацияПроверкиМодифицированности()
	
	Операции = Новый Структура;
	Операции.Вставить(""ЗакрытьФорму"", ""Закрыть форму"");
	
	Возврат Операции;
	
КонецФункции // ОперацияПроверкиМодифицированности()

&НаКлиентеНаСервереБезКонтекста
Функция Константы()
	
	Результат = Новый Структура;
	Результат.Вставить(""ВсеКолонки""                         , ""Все колонки"");
	Результат.Вставить(""ИмяПараметраСоединенияСИБ""          , ""СтрокаСоединенияВнешнейБазы"");
	Результат.Вставить(""ВерсияВнешнейБазы""                  , ""ВерсияВнешнейБазы"");
	Результат.Вставить(""УстановитьПометкуУдаления""          , ""УстановитьПометкуУдаления"");	
	Результат.Вставить(""Провести""                           , ""Провести"");	
	Результат.Вставить(""ДобавитьПараметрИзБуфера""           , ""ДобавитьПараметрИзБуфера"");
	Результат.Вставить(""ВыгрузитьТаблицуРезультатаВПараметр"", ""ВыгрузитьТаблицуРезультатаВПараметр"");
	Результат.Вставить(""ДействияСРезультатомЗапроса""        , ""ДействияСРезультатомЗапроса"");
	Результат.Вставить(""УстановитьПараметрУИ""               , ""УстановитьПараметрСТипомУникальныйИдентификатор"");	
	Результат.Вставить(""УстановитьПараметрСтрока""           , ""УстановитьПараметрСТипомСтрока"");	
	Результат.Вставить(""ВыполнитьЗапрос""                    , ""УстановитьПараметрСТипомСтрока"");	
	
	Возврат Результат;
	
КонецФункции // Константы()

&НаКлиентеНаСервереБезКонтекста
Функция МногоДанныхВРезультатеЗапроса()
	Возврат 1000
КонецФункции

&НаСервереБезКонтекста
Функция гМетодыПоискаВСтроке()
	Возврат ОбъектОбработки().гМетодыПоискаВСтроке();
КонецФункции

&НаСервереБезКонтекста
Функция гОперацииСЗапросами()
	Возврат ОбъектОбработки().гОперацииСЗапросами();
КонецФункции

&НаСервереБезКонтекста
Функция гТипыИсточниковДанных()
	Возврат ОбъектОбработки().гТипыИсточниковДанных();
КонецФункции

&НаСервереБезКонтекста
Функция гРежимыЗакрытияФормыВводаПроизвольногоКода(Режим)
	Возврат ОбъектОбработки().гРежимыЗакрытияФормыВводаПроизвольногоКода()[Режим];
КонецФункции

&НаСервереБезКонтекста
Функция гСтроковыеКонстанты(ИмяКонстанты)
	Возврат ОбъектОбработки().гСтроковыеКонстанты(ИмяКонстанты);
КонецФункции // гСтроковыеКонстанты()

&НаСервереБезКонтекста
Функция гРежимыОткрытияФормы()
	Возврат ОбъектОбработки().гРежимыОткрытияФормы();
КонецФункции

&НаСервереБезКонтекста
Функция гЗаголовокОбработки(ИмяПользователяВОблаке, ИмяФайлаСЗапросом)

	Возврат ОбъектОбработки().гЗаголовокОбработки(ИмяПользователяВОблаке, ИмяФайлаСЗапросом);

КонецФункции // гЗаголовокОбработки()

&НаСервереБезКонтекста
Функция гНазваниеОбработки(ВернутьПолноеНазвание = Истина)

	Возврат ОбъектОбработки().гНазваниеОбработки(ВернутьПолноеНазвание);

КонецФункции // гНазваниеОбработки()

#Область ПрефиксСпецПоля

&НаСервереБезКонтекста
Функция гПрефиксСпецПоляНаСервере()
	
	Возврат ОбъектОбработки().гПрефиксСпецПоля()
	
КонецФункции

&НаКлиенте
Функция гПрефиксСпецПоля()
	
	КлючКэшаЗначений = ""гПрефиксСпецПоляНаСервере"";
	Если Не мКэшЗначений.Свойство(КлючКэшаЗначений) Тогда 
		мКэшЗначений.Вставить(КлючКэшаЗначений, гПрефиксСпецПоляНаСервере());
	КонецЕсли;
	
	Возврат мКэшЗначений[КлючКэшаЗначений];
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область УниверсальныеПроцедурыИФункции

#Область РаботаСБуферомОбмена

&НаКлиенте
Функция ПолучитьТекстИзБуфера()
	
	htmlfile = Новый COMОбъект(""htmlfile""); 	
	Возврат htmlfile.parentWindow.clipboardData.getData(""text"");
	
КонецФункции // ПолучитьТекстИзБуфера()

&НаКлиенте
Процедура ПоместитьТекстВБуфер(Текст)
	
	htmlfile = Новый COMОбъект(""htmlfile""); 
	
	htmlfile.parentWindow.clipboardData.setData(""text"", Текст);
	
КонецПроцедуры // ПоместитьТекстВБуфер()

#КонецОбласти

#Область РаботаСХранилищемНастроек

// Процедура - Восстанавливает настройки из хранилища общих настроек
&НаСервереБезКонтекста
Функция ВосстановитьНастройкиНаСервере()

	ключОбъекта      = ""Обработка.ИмяОбработки"";
	ключНастроек     = ""Обработка.ИмяОбработки.ЗначенияПоУмолчанию"";
	описаниеНастроек = ""Описание настройки"";
	имяПользователя  = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	
	Результат = ХранилищеОбщихНастроек.Загрузить(ключОбъекта, ключНастроек, описаниеНастроек, имяПользователя);
	Если ТипЗнч(Результат) = Тип(""Структура"") Тогда 
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ВосстановитьНастройкиНаСервере()

// Процедура - Сохраняет настройки в хранилище общих настроек
&НаСервереБезКонтекста
Процедура СохранитьНастройки(Настройки)
	
	ключОбъекта      = ""Обработка.ИмяОбработки"";
	ключНастроек     = ""Обработка.ИмяОбработки.ЗначенияПоУмолчанию"";
	описаниеНастроек = ""Описание настройки"";
	имяПользователя  = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	
	ХранилищеОбщихНастроек.Сохранить(ключОбъекта, ключНастроек, настройки, описаниеНастроек, имяПользователя);
	
КонецПроцедуры // СохранитьНастройки()



Функция ИмяНовогоПараметраСтруктуры(ИмяПараметра, Массив)
	
	НовоеИмяПараметра = ИмяПараметра;
	
	Сч = 1;
	Пока Массив.Найти(НовоеИмяПараметра) <> Неопределено Цикл
		НовоеИмяПараметра = ИмяПараметра + Формат(Сч, ""ЧГ=0"");
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат НовоеИмяПараметра;
	
КонецФункции // ИмяНовогоПараметраСтруктуры()

#КонецОбласти

#Область Добавление_во_внешние_обработки

&НаКлиенте
Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
	ЭтаФорма.Открыть();	
КонецПроцедуры

#КонецОбласти

#Область ФункцииСоСтроками

&НаКлиентеНаСервереБезКонтекста
// Преобразует исходную строку в число без вызова исключений.
//
// Параметры:
//   Значение - Строка - Строка, которую необходимо привести к числу.
//                       Например, ""10"", ""+10"", ""010"", вернет 10;
//                                 ""(10)"", ""-10"",вернет -10;
//                                 ""10,2"", ""10.2"",вернет 10.2;
//                                 ""000"", "" "", """",вернет 0;
//                                 ""10текст"", вернет Неопределено.
//
// Возвращаемое значение:
//   Число, Неопределено - Полученное число, либо Неопределено, если строка не является числом.
//
Функция СтрокаВЧисло(Знач Значение) Экспорт
	
	Значение  = СтрЗаменить(Значение, "" "", """");
	Если СтрНачинаетсяС(Значение, ""("") Тогда
		Значение = СтрЗаменить(Значение, ""("", ""-"");
		Значение = СтрЗаменить(Значение, "")"", """");
	КонецЕсли;
	
	Если ПустаяСтрока(Значение) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаБезНулей = СтрЗаменить(Значение, ""0"", """");
	Если ПустаяСтрока(СтрокаБезНулей) Или СтрокаБезНулей = ""-"" Тогда
		Возврат 0;
	КонецЕсли;
	
	ТипЧисло  = Новый ОписаниеТипов(""Число"");
	Результат = ТипЧисло.ПривестиЗначение(Значение);
	
	Возврат ?(Результат <> 0 И Не ПустаяСтрока(СтрокаБезНулей), Результат, Неопределено);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Преобразует исходную строку в дату.
//
// Параметры:
//  Значение - Строка - Строка, которую необходимо привести к дате.
//                      Формат даты должен быть в виде ""ДД.ММ.ГГГГ"" или ""ДД/ММ/ГГ"" или ""ДД-ММ-ГГ"",
//                      Например, ""23.02.1980"" или ""23/02/80"".
// 
// Возвращаемое значение:
//  Дата - полученная дата.
//
Функция СтрокаВДату(Знач Значение) Экспорт
	
	Если Лев(Прав(Значение, 8), 1) = "" "" И Лев(Прав(Значение, 6), 1) = "":"" И СтрокаВЧисло(Лев(Прав(Значение, 7), 1)) <> Неопределено Тогда 
		Значение = Лев(Значение, СтрДлина(Значение) - 8) + ""0"" + Сред(Значение, СтрДлина(Значение) - 6);
	КонецЕсли;
	Значение = СтрЗаменить(Значение, "" 0:"", ""00:"");
	Значение = СокрЛП(СтрЗаменить(Значение, ""."", """"));
	Значение = СокрЛП(СтрЗаменить(Значение, ""/"", """"));
	Значение = СокрЛП(СтрЗаменить(Значение, ""-"", """"));
	Значение = СокрЛП(СтрЗаменить(Значение, "":"", """"));
	Значение = Сред(Значение, 5, 4) + Сред(Значение, 3, 2) + Лев(Значение, 2) + Прав(Значение, 6);
	Если СтрДлина(Значение) = 6 Тогда
		Год = СтрокаВЧисло(Лев(Значение, 2));
		Если Год = Неопределено Тогда 
			Возврат Дата('0001.01.01');
		КонецЕсли;
		Значение = ?(Год > 29, ""19"", ""20"") + Значение;
	КонецЕсли;
	
	ОписаниеТипа = Новый ОписаниеТипов(""Дата"");
	Результат    = ОписаниеТипа.ПривестиЗначение(Значение);
	
	Возврат Результат;
	
КонецФункции 

&НаСервереБезКонтекста
Функция гРазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = "","", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	Возврат ОбъектОбработки().гРазложитьСтрокуВМассивПодстрок(Строка, Разделитель, ПропускатьПустыеСтроки, СокращатьНепечатаемыеСимволы);
КонецФункции // гРазложитьСтрокуВМассивПодстрок()

#КонецОбласти

#Область ФункцииСКоллекциями

&НаСервереБезКонтекста
Функция гПолучитьСледующееУникальноеИмя(Знач ИсходноеИмя, Коллекция, ИмяПоля = Неопределено) Экспорт
	
	Возврат ОбъектОбработки().гПолучитьСледующееУникальноеИмя(ИсходноеИмя, Коллекция, ИмяПоля);

КонецФункции // гПолучитьСледующееУникальноеИмя()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКоллекциюДляПередачиНаСервер(ИсходнаяКоллекция, Колонки)
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ТекСтрока Из ИсходнаяКоллекция Цикл 
		
		СтруктураСтроки = Новый Структура(Колонки);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
		
		МассивСтрок.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции // ПолучитьКоллекциюДляПередачиНаСервер()

&НаСервереБезКонтекста
Функция СтрокаСКолонкамиКоллекции(Коллекция)
	
	ИменаКолонок = """";
	
	Для Каждого Колонка Из Коллекция.Колонки Цикл
		ИменаКолонок = ИменаКолонок + ?(ИменаКолонок = """", """", "","") + Колонка.Имя;
	КонецЦикла;
	
	Возврат ИменаКолонок;
	
КонецФункции // СтрокаСКолонкамиКоллекции()

&НаСервереБезКонтекста
Функция ТаблицаЗначенийВМассивСтруктур(ИсходнаяТаблицаЗначений) Экспорт
	
	Массив = Новый Массив();
	
	ИменаКолонок = СтрокаСКолонкамиКоллекции(ИсходнаяТаблицаЗначений);
	
	Для Каждого Строка Из ИсходнаяТаблицаЗначений Цикл
		
		НоваяСтрока = Новый Структура(ИменаКолонок);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		Массив.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Возврат Массив;

КонецФункции // ТаблицаЗначенийВМассивСтруктур()

&НаКлиентеНаСервереБезКонтекста
Функция ЭлементСпискаВСтруктуру(ЭлементСписка)
	
	Результат = Новый Структура(""Значение, Представление, Картинка"");
	ЗаполнитьЗначенияСвойств(Результат, ЭлементСписка);
	
	Возврат Результат;
	
КонецФункции // ЭлементСпискаВСтруктуру()

#КонецОбласти

&НаСервереБезКонтекста
Функция гПредставлениеТипа(Тип)
	Возврат ОбъектОбработки().гПредставлениеТипа(Тип);
КонецФункции

&НаСервереБезКонтекста
Функция ВерсияПриложенияНаСервере()
	СистемнаяИнформация = Новый(""СистемнаяИнформация"");
	Возврат СистемнаяИнформация.ВерсияПриложения
КонецФункции

&НаСервере
Функция гНайтиЗначениеБезУчетаРегистраВПараметрахТекЗапросаНаСервере(Значение)
	
	Коллекция = ТаблицаЗначенийВМассивСтруктур(ПараметрыТекущегоЗапроса.Выгрузить());
	
	Возврат ОбъектОбработки().гНайтиЗначениеБезУчетаРегистра(Значение, Коллекция, ""Имя"", гМетодыПоискаВСтроке().Вначале, Истина);	
	
КонецФункции

&НаСервереБезКонтекста
Функция гНайтиЗначениеБезУчетаРегистра(Значение, Знач Коллекция, Поле = Неопределено, МетодПоиска = Неопределено, МножественныйВыбор = Ложь)
	
	Возврат ОбъектОбработки().гНайтиЗначениеБезУчетаРегистра(Значение, Коллекция, Поле, МетодПоиска, МножественныйВыбор);	
	
КонецФункции // гНайтиЗначениеБезУчетаРегистра()

#КонецОбласти

#Область НастройкиПоУмолчанию

&НаКлиенте
Процедура СохранитьНастройкиОбработки()
	
	настройки = Новый Структура;
	
	настройки.Вставить(СвойстваРеквизитаРезультатЗапроса.ИмяЭлементаРодителя, Элементы[СвойстваРеквизитаРезультатЗапроса.ИмяЭлементаРодителя].Видимость);
	
	настройки.Вставить(""ДеревоЗапросовВидимость""     , Элементы.ДеревоЗапросов.Видимость);
	настройки.Вставить(""ГруппаПараметрыЗапросов""     , Элементы.ГруппаПараметрыЗапросов.Видимость);
	настройки.Вставить(""ГруппаДанныеЗапроса""         , Элементы.ГруппаДанныеЗапроса.Видимость);
	
	настройки.Вставить(""СохранитьПередВыполнением""         , СохранитьПередВыполнением);
	настройки.Вставить(""ПоказыватьВременныеТаблицы""        , ПоказыватьВременныеТаблицы);	
	настройки.Вставить(""ПоказыватьЗапросыПакета""           , ПоказыватьЗапросыПакета);		
	настройки.Вставить(""РезультатЗапросаВДерево""           , РезультатЗапросаВДерево);
	настройки.Вставить(""РежимТестированияВыполненияЗапроса"", РежимТестированияВыполненияЗапроса);
	
	настройки.Вставить(""СтрокаЗапросаПриОткрытии""    , Элементы.ДеревоЗапросов.ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(ИмяФайлаСЗапросом) Тогда 
		настройки.Вставить(""ИмяФайлаСЗапросом"", ИмяФайлаСЗапросом);
	КонецЕсли;
	
	СохранитьНастройки(настройки);
	
КонецПроцедуры //СохранитьНастройкиОбработки()

&НаКлиенте
Процедура ВосстановитьНастрокиОбработки(СтрокаЗапросаПриОткрытии)
	
	Перем ЗначениеНастройки;
	
	Если ЗначениеЗаполнено(ЗначенияПоУмолчанию) Тогда 
		
		ЗначенияПоУмолчанию.Свойство(""СохранитьПередВыполнением""         , СохранитьПередВыполнением);
		ЗначенияПоУмолчанию.Свойство(""ПоказыватьВременныеТаблицы""        , ПоказыватьВременныеТаблицы);
		ЗначенияПоУмолчанию.Свойство(""ПоказыватьЗапросыПакета""           , ПоказыватьЗапросыПакета);
		ЗначенияПоУмолчанию.Свойство(""РезультатЗапросаВДерево""           , РезультатЗапросаВДерево);
		ЗначенияПоУмолчанию.Свойство(""РежимТестированияВыполненияЗапроса"", РежимТестированияВыполненияЗапроса);
		
		ЗначенияПоУмолчанию.Свойство(""СтрокаЗапросаПриОткрытии"", СтрокаЗапросаПриОткрытии);
		
		Если ЗначенияПоУмолчанию.Свойство(СвойстваРеквизитаРезультатЗапроса.ИмяЭлементаРодителя, ЗначениеНастройки) Тогда 
			лИмяРодителяЭлементаРезультатЗапроса = СвойстваРеквизитаРезультатЗапроса.ИмяЭлементаРодителя;
			Элементы[лИмяРодителяЭлементаРезультатЗапроса].Видимость = ЗначениеНастройки;
			ОформитьКнопкуПоказатьРезультат(ЗначениеНастройки);
		КонецЕсли;
		
		Если ЗначенияПоУмолчанию.Свойство(""ДеревоЗапросовВидимость"", ЗначениеНастройки) Тогда 
			Элементы.ДеревоЗапросов.Видимость = ЗначениеНастройки;
		Иначе
			Элементы.ДеревоЗапросов.Видимость = Истина;
		КонецЕсли;
		
		Если ЗначенияПоУмолчанию.Свойство(""ГруппаПараметрыЗапросов"", ЗначениеНастройки) Тогда 
			Элементы.ГруппаПараметрыЗапросов.Видимость = ЗначениеНастройки;
		Иначе
			Элементы.ГруппаПараметрыЗапросов.Видимость = Ложь;
		КонецЕсли;
		
		Если ЗначенияПоУмолчанию.Свойство(""ГруппаДанныеЗапроса"", ЗначениеНастройки) Тогда 
			ОбработкаДействияПоказатьСекциюСЗапросами(ЗначениеНастройки);
		Иначе
			ОбработкаДействияПоказатьСекциюСЗапросами(Истина);
		КонецЕсли;

		ОформитьКнопкуПоказатьПараметры(Элементы.ГруппаПараметрыЗапросов.Видимость);
		
		ЗначенияПоУмолчанию.Свойство(""ИмяФайлаСЗапросом"", ИмяФайлаСЗапросом);
		
	КонецЕсли;

КонецПроцедуры // ВосстановитьНастрокиОбработки()
	
#КонецОбласти

#Область МодельДереваЗапросов

&НаКлиенте
Функция СтрокаСЗапросом(Знач ИдентификаторСтроки = Неопределено)
	
	Если ИдентификаторСтроки = Неопределено Тогда 
		ИдентификаторСтроки = Элементы.ДеревоЗапросов.ТекущаяСтрока;
	КонецЕсли;
	
	Возврат ДеревоЗапросов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
КонецФункции // СтрокаСЗапросом()

&НаКлиенте
Функция ИдентификаторЗапроса(Знач ИдентификаторСтроки = Неопределено)
	
	Если ИдентификаторСтроки = Неопределено Тогда 
		ИдентификаторСтроки = Элементы.ДеревоЗапросов.ТекущаяСтрока;
	КонецЕсли;
	
	Возврат СтрокаСЗапросом(ИдентификаторСтроки).Идентификатор;
	
КонецФункции

&НаКлиенте
Функция РодительСтрокиСЗапросом(Знач ИдентификаторСтроки = Неопределено)
	
	Если ИдентификаторСтроки = Неопределено Тогда 
		ИдентификаторСтроки = Элементы.ДеревоЗапросов.ТекущаяСтрока;
	КонецЕсли;
	
	Возврат СтрокаСЗапросом(ИдентификаторСтроки).ПолучитьРодителя();
			
КонецФункции // РодительСтрокиСЗапросом()

// Заполняет текст текущего запроса и параметры текущего запроса
// Параметры:
//  идСтрокиСЗапросом - Строка - идентификатор строки с запросом, параметры которого необходимо 
//  	заполнить в коллекцию текущих параметров. Если идСтрокиСЗапросом пустой, то заполняются 
//  	данные для нового запроса.
&НаКлиенте
Процедура ОбновитьЭлементыФормыДляТекущегоЗапроса(идСтрокиСЗапросом)

	ТекстТекущегоЗапроса = """";
	
	МассивИдентификаторовЗапросов = Новый Массив;
	МассивИдентификаторовЗапросов.Добавить("""");
	
	Если идСтрокиСЗапросом <> Неопределено Тогда 
		
		лСтрокаСЗапросом      = СтрокаСЗапросом(идСтрокиСЗапросом);
		ТекстТекущегоЗапроса  = лСтрокаСЗапросом.ТекстЗапроса;

		МассивИдентификаторовЗапросов.Добавить(лСтрокаСЗапросом.Идентификатор);
		
	КонецЕсли;
	
	ПараметрыТекущегоЗапроса.Очистить();
	
	ЕстьПараметрыБезТипов = Ложь;
	
	Для Каждого ИдентификаторЗапроса Из МассивИдентификаторовЗапросов Цикл 
		ДобавитьПараметрыТекущегоЗапросаИзОбщейТаблицыПараметров(ИдентификаторЗапроса, ЕстьПараметрыБезТипов);
	КонецЦикла;
	
	Если ЕстьПараметрыБезТипов Тогда 
		ЗаполнитьПустыеТипыУПараметровТекущегоЗапроса();
	КонецЕсли;		
	
КонецПроцедуры // ОбновитьЭлементыФормыДляТекущегоЗапроса()

#КонецОбласти

#Область МодельТекстаТекущегоЗапроса

&НаКлиенте
Функция ЭлементТекстТекущегоЗапроса()
	
	Возврат Элементы.ТекстТекущегоЗапроса;
			
КонецФункции // ЭлементТекстТекущегоЗапроса()

&НаКлиенте
Функция ТекущийТекстЗапроса()
	
	Возврат ТекстТекущегоЗапроса;
	
КонецФункции // ТекущийТекстЗапроса()

&НаКлиенте
Процедура УстановитьТекущийТекстЗапроса(ТекстЗапроса)
	
	лЭлемент = ЭлементТекстТекущегоЗапроса();
	
	лЭлемент.УстановитьГраницыВыделения(1, СтрДлина(ТекущийТекстЗапроса()) + 1);
	
	лЭлемент.ВыделенныйТекст = ТекстЗапроса;
	
КонецПроцедуры // УстановитьТекущийТекстЗапроса()

&НаКлиенте
Функция ВыделенныйТекстТекущегоЗапроса()
	
	Возврат ЭлементТекстТекущегоЗапроса().ВыделенныйТекст;
	
КонецФункции // ВыделенныйТекстТекущегоЗапроса()


#КонецОбласти

#Область МенюОперации

// ДУБЛЬ процедуры из формы ФормаУпрИсполняемыйКод
//
&НаКлиенте
Процедура КомментированиеВыделенногоТекста(УстановитьКомментарий)

	лИзменяемыйТекст                = Новый ТекстовыйДокумент;
	лЭлементФормыСТекстомЗапроса    = ЭлементТекстТекущегоЗапроса();
	лТекстЗапроса                   = ТекущийТекстЗапроса();

	лИзменяемыйТекст.УстановитьТекст(лТекстЗапроса);
	
	СтруктураВыделенногоТекста = ПолучитьСтруктуруВыделенногоТекста();
	
	Для Сч = СтруктураВыделенногоТекста.НачалоСтрокиКомментария По СтруктураВыделенногоТекста.КонецСтрокиКомментария-1 Цикл
		
		Если УстановитьКомментарий Тогда
			лИзменяемыйТекст.ЗаменитьСтроку(Сч, ""//"" + лИзменяемыйТекст.ПолучитьСтроку(Сч));
		Иначе
			лТекущаяСтрока = лИзменяемыйТекст.ПолучитьСтроку(Сч);
			Если Найти(СокрЛ(лТекущаяСтрока), ""//"") = 1 Тогда 
				лИзменяемыйТекст.ЗаменитьСтроку(Сч, Сред(лТекущаяСтрока, Найти(лТекущаяСтрока, ""//"") + 2));			
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	лЭлементФормыСТекстомЗапроса.УстановитьГраницыВыделения(1, 1, лИзменяемыйТекст.КоличествоСтрок() + 1, 1);
	лЭлементФормыСТекстомЗапроса.ВыделенныйТекст = лИзменяемыйТекст.ПолучитьТекст();
	лЭлементФормыСТекстомЗапроса.УстановитьГраницыВыделения(СтруктураВыделенногоТекста.НачалоСтрокиКомментария, 
		СтруктураВыделенногоТекста.НачалоКолонкиКомментария, 
		СтруктураВыделенногоТекста.КонецСтрокиКомментария, 
		СтруктураВыделенногоТекста.КонецКолонкиКомментария);
	
	Модифицированность = Истина;                                        
	
КонецПроцедуры // КомментированиеВыделенногоТекста()

&НаКлиенте
// ПРОЦЕДУРА ДУБЛЬ(!!!)
Процедура ОткрытьМенюАвтоподстановки(ПолеТекстаЗапроса)
	
	Если ПолеТекстаЗапроса.ВыделенныйТекст <> """" тогда
		Возврат
	КонецЕсли;
	
	Если Не гИнициализацияVBScript() тогда
		Возврат;	
	КонецЕсли;
	
	// запоминаем текущие координаты курсора 
	лСтруктураКоординат = гПолучитьГраницыВыделенияПоляФормы(ПолеТекстаЗапроса);
	
	лТекстЗапросаТД = Новый ТекстовыйДокумент;
	лТекстЗапросаТД.УстановитьТекст(ТекстТекущегоЗапроса);

	// если позиция курсора больше длины текущей строки, то перемещаем курсор в конец строки
	лТекущаяСтрока = лТекстЗапросаТД.ПолучитьСтроку(лСтруктураКоординат.НачалоСтрока);
	Если СтрДлина(лТекущаяСтрока) < лСтруктураКоординат.КолонкаКон тогда
		лСтруктураКоординат.КолонкаНач = СтрДлина(лТекущаяСтрока)+1;
		лСтруктураКоординат.КолонкаКон = лСтруктураКоординат.КолонкаНач;
	КонецЕсли;
	
	лПозицияКурсораВТексте = ПолучитьПозициюКурсораВТексте(ПолеТекстаЗапроса, лСтруктураКоординат);
	
	лДанныеДляПодбораКП = ПолучитьДанныеДляПодбораКПНаСервере(ТекстТекущегоЗапроса, лПозицияКурсораВТексте);
	
	Если лДанныеДляПодбораКП <> Неопределено Тогда 
		
		// выбираем значения контекстной подсказки
		Если лДанныеДляПодбораКП.ЗначенияДляВыбора.Количество() = 0 Тогда 
			Возврат;
		Иначе
			лПараметрыОповещения = Новый Структура(""ДанныеДляПодбораКП, СтруктураКоординат, ПолеТекстаЗапроса"", лДанныеДляПодбораКП, лСтруктураКоординат, ПолеТекстаЗапроса);
			Если лДанныеДляПодбораКП.ЗначенияДляВыбора.Количество() = 1 Тогда 
				ПослеВыбораЭлементаИзСпискаЗначений(лДанныеДляПодбораКП.ЗначенияДляВыбора[0], лПараметрыОповещения)
			Иначе
				лОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения(""ПослеВыбораЭлементаИзСпискаЗначений"", Вычислить(ЭтотОбъектФорма), лПараметрыОповещения);
				Если лДанныеДляПодбораКП.МножественныйВыбор Тогда 
					лДанныеДляПодбораКП.ЗначенияДляВыбора.ПоказатьОтметкуЭлементов(лОповещениеПослеВыбораЭлемента);
				Иначе
					лДанныеДляПодбораКП.ЗначенияДляВыбора.ПоказатьВыборЭлемента(лОповещениеПослеВыбораЭлемента);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОткрытьМенюАвтоподстановки()


&НаКлиенте
Процедура ОперацииВставитьЗапросИзКода1С(ПростаяОбработкаТекста)
	
	лСтрокаБуфера = ПолучитьТекстИзБуфера();
	
	Если СокрЛП(лСтрокаБуфера) = """" Тогда 
		ПоказатьПредупреждение(Новый ОписаниеОповещения(""ПоказатьПредупреждениеЗавершение"", ЭтаФорма), ""Буфер пуст."");
		Возврат;
	КонецЕсли;
	
	лЗапрос = гПолучитьЗапросИзТекста(лСтрокаБуфера, ПростаяОбработкаТекста);
	
	Если ДобавитьПараметрыТекущегоЗапроса(лЗапрос.Параметры) Тогда 
		УстановитьТекущийТекстЗапроса(лЗапрос.Текст);
	КонецЕсли;
	
КонецПроцедуры // ОперацииВставитьЗапросИзКода1С()

&НаКлиенте
Функция ПараметрыВСоответствие()
	
	лПараметрыСоответствие = Новый Соответствие;
	Для каждого лПараметр Из ПараметрыТекущегоЗапроса Цикл
		лПараметрыСоответствие.Вставить(лПараметр.Имя, Новый Структура(""Значение"", лПараметр.Значение));
	КонецЦикла; 
	
	Возврат лПараметрыСоответствие;
КонецФункции // ПараметрыВСоответствие()

&НаКлиенте
Процедура ОперацииПолучитьКод1СПоЗапросу(Режим)
	
	ТекстВопроса  = НСтр(""ru = 'Скопировать в буфер?'"");
	КнопкиВопроса = РежимДиалогаВопрос.ДаНет;
	ПараметрыВопроса = Новый Структура;
	ПараметрыВопроса.Вставить(""ИдВопроса"", ""СкопироватьСтрокуВБуфер"");
	ПараметрыВопроса.Вставить(""Строка""   , гСформироватьКодЗапросаДля1С(ТекстТекущегоЗапроса, ПараметрыВСоответствие(), Режим));
	ПоказатьВопрос(Новый ОписаниеОповещения(""ВопросЗавершение"", ЭтаФорма, ПараметрыВопроса), ТекстВопроса, КнопкиВопроса, 10, КодВозвратаДиалога.Нет, ""Вопрос"", КодВозвратаДиалога.Нет);

КонецПроцедуры // ОперацииПолучитьКод1СПоЗапросу()
	

#КонецОбласти

#Область ОперацииСЗапросами

&НаКлиенте
Процедура ОбработатьОперациюПослеСохраненияЗапросов(Операция, ДополнительныеПараметры)
	
	Если Операция = мОперацииСЗапросами.Выполнить ИЛИ Операция = мОперацииСЗапросами.ВыполнитьУдаленно Тогда 
		ВыполнитьЗапросИзФормыПродолжение(ДополнительныеПараметры)
	ИначеЕсли Операция = мОперацииСЗапросами.Новый Тогда 
		НовыйФайлЗапросовДействие();
	ИначеЕсли Операция = мОперацииСЗапросами.Открыть Тогда 
		ПоказатьДиалогВыбораФайла(Операция);
	ИначеЕсли Операция = ОперацияПроверкиМодифицированности().ЗакрытьФорму Тогда // #рефакторинг определить константу
		ВыполнитьДействияПриЗакрытииФормы();
	КонецЕсли;				
КонецПроцедуры // ОбработатьОперациюПослеСохраненияЗапросов()

#КонецОбласти

#Область РаботаВРежимеОтладки

&НаСервереБезКонтекста
Функция ПомощьПоОтладке(ПутьКФайлуСОбработкойНаСервере)
	Возврат ОбъектОбработки().ПомощьПоОтладке(ПутьКФайлуСОбработкойНаСервере);
КонецФункции // гСтроковыеКонстанты()

&НаСервереБезКонтекста
Функция СкопироватьОбработкуДляОтладкиНаСервере(Адрес, ПутьКФайлуСОбработкой)
	Возврат ОбъектОбработки().СкопироватьОбработкуДляОтладкиНаСервере(Адрес, ПутьКФайлуСОбработкой);
КонецФункции // гСтроковыеКонстанты()

Функция ЗагрузитьЗапросыДляОтладкиНаСервере()
	
	лОбъектОбработки              = ОбъектОбработки();
	ФайлыСЗапросамиДляОтладки     = лОбъектОбработки.гНайтиФайлыСЗапросамиДляОтладки();
	КоличествоЗагруженныхЗапросов = ФайлыСЗапросамиДляОтладки.Количество();
	ПараметрыЗапросовПолучены     = Ложь;
	
	Если КоличествоЗагруженныхЗапросов > 0 Тогда 
		
		ДеревоЗапросовЗначение = РеквизитФормыВЗначение(""ДеревоЗапросов"");
		
		ШаблонИмени = ""Запрос для отладки"";
		Для Каждого ФайлСЗапросом Из ФайлыСЗапросамиДляОтладки Цикл
			
			ДанныеДляОтладки = ЗначениеИзФайла(ФайлСЗапросом.ПолноеИмя);
			
			НовыйЗапрос = ДеревоЗапросовЗначение.Строки.Добавить();
			
			НовыйЗапрос.ТекстЗапроса  = ДанныеДляОтладки.ТекстЗапроса;
			НовыйЗапрос.Имя           = лОбъектОбработки.гПолучитьСледующееУникальноеИмя(ШаблонИмени, ДеревоЗапросовЗначение.Строки, ""Имя"");
			НовыйЗапрос.Идентификатор = Новый УникальныйИдентификатор;
			
			Для Каждого ПараметрЗапроса Из ДанныеДляОтладки.ПараметрыЗапроса Цикл
				
				Если Не ПараметрыЗапросовПолучены Тогда 
					ПараметрыЗапросовТЗ       = ПолучитьИзВременногоХранилища(АдресПараметровЗапросов);	
					ПараметрыЗапросовПолучены = Истина;
				КонецЕсли;
				
				СтруктураСПараметромЗапроса = Новый Структура;
				СтруктураСПараметромЗапроса.Вставить(""ИдентификаторЗапроса"", НовыйЗапрос.Идентификатор);
				СтруктураСПараметромЗапроса.Вставить(""Значение""            , ЗначениеВСтрокуВнутр(ПараметрЗапроса.Значение));
				СтруктураСПараметромЗапроса.Вставить(""Имя""                 , ПараметрЗапроса.Ключ);
				ДобавитьНовыйПараметрЗапроса(ПараметрыЗапросовТЗ, СтруктураСПараметромЗапроса);				
			КонецЦикла; 
			
			УдалитьФайлы(ФайлСЗапросом.ПолноеИмя);
			
		КонецЦикла;
		
		Модифицированность = Истина;
		
		ЗначениеВРеквизитФормы(ДеревоЗапросовЗначение, ""ДеревоЗапросов"");
		
		Если ПараметрыЗапросовПолучены Тогда 
			ПоместитьВоВременноеХранилище(ПараметрыЗапросовТЗ, АдресПараметровЗапросов);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КоличествоЗагруженныхЗапросов
	
КонецФункции // ЗагрузитьЗапросыДляОтладкиНаСервере()

#КонецОбласти

#Область КэшОбработки

&НаСервереБезКонтекста
Функция гЗначениеИзСеансовыхДанных(Имя, СеансовыеДанные)
	Возврат ОбъектОбработки().гЗначениеИзСеансовыхДанных(Имя, СеансовыеДанные)
КонецФункции

#КонецОбласти

#Область ДлительныеОперации

// Возвращает пустую структуру для параметра ПараметрыОжидания процедуры ОжидатьЗавершение.
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * ФормаВладелец          - УправляемаяФорма, Неопределено - форма, из которой вызывается длительная операция.
//   * ТекстСообщения         - Строка - текст сообщения, выводимый на форме ожидания.
//                                       Если не задан, то выводится ""Пожалуйста, подождите..."".
//   * ВыводитьОкноОжидания   - Булево - если Истина, то открыть окно ожидания с визуальной индикацией длительной операции. 
//                                       Если используется собственный механизм индикации, то следует указать Ложь.
//   * ВыводитьПрогрессВыполнения - Булево - выводить прогресс выполнения в процентах на форме ожидания.
//   * ОповещениеОПрогрессеВыполнения - ОписаниеОповещения - оповещение, которое периодически вызывается при 
//                                      проверке готовности фонового задания. Параметры процедуры-обработчика оповещения:
//     ** Прогресс - Структура, Неопределено - структура со свойствами или Неопределено, если задание было отменено. Свойства: 
//	     *** Статус               - Строка - ""Выполняется"", если задание еще не завершилось;
//                                           ""Выполнено"", если задание было успешно выполнено;
//	                                         ""Ошибка"", если задание завершено с ошибкой;
//                                           ""Отменено"", если задание отменено пользователем или администратором.
//	     *** ИдентификаторЗадания - УникальныйИдентификатор - идентификатор запущенного фонового задания.
//	     *** Прогресс             - Структура, Неопределено - результат функции ДлительныеОперации.ПрочитатьПрогресс, если ВыводитьПрогрессВыполнения = Истина.
//	     *** Сообщения            - ФиксированныйМассив, Неопределено - массив объектов СообщениеПользователю, если ВыводитьСообщения = Истина
//     ** ДополнительныеПараметры - Произвольный - произвольные данные, переданные в описании оповещения. 
//
//   * ВыводитьСообщения      - Булево - выводить сообщения, сформированные в процедуре-обработчике длительной операции.
//                                       Значение Истина имеет смысл, только если ВыводитьПрогрессВыполнения = Ложь
//   * Интервал               - Число  - интервал в секундах между проверками готовности длительной операции.
//                                       По умолчанию 0 - после каждой проверки интервал увеличивается с 1 до 15 секунд с коэффициентом 1.4.
//   * ОповещениеПользователя - Структура - содержит свойства:
//     ** Показать            - Булево - если Истина, то по завершении длительной операции вывести оповещение пользователя.
//     ** Текст               - Строка - текст оповещения пользователя.
//     ** НавигационнаяСсылка - Строка - навигационная ссылка оповещения пользователя.
//     ** Пояснение           - Строка - пояснение оповещения пользователя.
// 
&НаКлиенте
Функция ПараметрыОжидания(ФормаВладелец)
	
	Результат = Новый Структура;
	Результат.Вставить(""ФормаВладелец""                 , ФормаВладелец);
	Результат.Вставить(""ТекстСообщения""                , """");
	Результат.Вставить(""ВыводитьОкноОжидания""          , Истина); 
	Результат.Вставить(""ВыводитьПрогрессВыполнения""    , Ложь); 
	Результат.Вставить(""ОповещениеОПрогрессеВыполнения"", Неопределено); 
	Результат.Вставить(""ВыводитьСообщения""             , Ложь); 
	Результат.Вставить(""Интервал""                      , 0); 
	Результат.Вставить(""ИдентификаторЗадания""          , ПоместитьВоВременноеХранилище(Новый Структура(""Статус"", ""Выполняется""), УникальныйИдентификатор)); 														 														 
	
	ОповещениеПользователя = Новый Структура;
	ОповещениеПользователя.Вставить(""Показать""           , Ложь);
	ОповещениеПользователя.Вставить(""Текст""              , Неопределено);
	ОповещениеПользователя.Вставить(""НавигационнаяСсылка"", Неопределено);
	ОповещениеПользователя.Вставить(""Пояснение""          , Неопределено);
	
	Результат.Вставить(""ОповещениеПользователя"", ОповещениеПользователя);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаВСФайламивАсинхронномРежиме

&НаКлиенте
Процедура ВыполнитьПослеПолученияФайлов(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Перем КаталогВременныхФайлов, КаталогСФайлами, ФайлыКУдалениюНаСервере, ПолученныйФайл;
	
	Если ПолученныеФайлы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КаталогСФайлами         = Неопределено;
	КаталогВременныхФайлов  = ДополнительныеПараметры.КаталогВременныхФайлов;
	ФайлыКУдалениюНаСервере = Новый Массив;
	Для Каждого ТекПолученныйФайл Из ПолученныеФайлы Цикл
		ПолученныйФайл = Новый Файл(ТекПолученныйФайл.Имя);	
		Если КаталогСФайлами = Неопределено Тогда 
			КаталогСФайлами = ПолученныйФайл.Путь;
		КонецЕсли;
		ФайлыКУдалениюНаСервере.Добавить(КаталогВременныхФайлов + ПолученныйФайл.Имя);
	КонецЦикла;
	
	УдалитьФайлыНаСервере(ФайлыКУдалениюНаСервере);
	
	ЗапуститьПриложение(КаталогСФайлами);
 
КонецПроцедуры // ВыполнитьПослеПолученияФайлов()

&НаСервереБезКонтекста
Функция гСписокФайловНаСервереПоПрефиксу(КаталогВременныхФайлов, ИмяСервера, Префикс)
	
	Возврат ОбъектОбработки().гСписокФайловНаСервереПоПрефиксу(КаталогВременныхФайлов, ИмяСервера, Префикс);
	
КонецФункции // гСписокФайловНаСервереПоПрефиксу()

&НаКлиенте
Процедура ЗагрузитьФайлыНаКлиент(Операция)
	
	Перем КаталогВременныхФайлов, ИмяСервера;
	
	Если Операция = ""ЗагрузитьСохраненныеСхемыСКД"" Тогда 
		лПрефикс                  = ""ПрефиксФайлаСоСхемойСКД"";
		лТекстСообщения           = ""Не найдено сохраненных схем СКД (%КаталогВременныхФайлов%, %ИмяСервера%)."";
		лЗаголовокДиалогаЗагрузки = ""Выберите каталог для загрузки схем СКД"";
	ИначеЕсли Операция = ""ЗагрузитьСериализованныеОбъекты"" Тогда
		лПрефикс                  = ""ПрефиксФайлаССериализованнымОбъектом"";
		лТекстСообщения           = ""Не найдено сохраненных сериализованных файлов (%КаталогВременныхФайлов%, %ИмяСервера%)."";
		лЗаголовокДиалогаЗагрузки = ""Выберите каталог для загрузки XDTO файлов"";
	Иначе
		Возврат;
	КонецЕсли;
	
	СписокФайловНаСервере = гСписокФайловНаСервереПоПрефиксу(КаталогВременныхФайлов, ИмяСервера, лПрефикс);
	
	Если СписокФайловНаСервере.Количество() = 0 Тогда 
		лТекстСообщения = СтрЗаменить(лТекстСообщения, ""%ИмяСервера%""            , ИмяСервера);
		лТекстСообщения = СтрЗаменить(лТекстСообщения, ""%КаталогВременныхФайлов%"", КаталогВременныхФайлов);
		ПоказатьСообщениеПользователю(лТекстСообщения, Объект, УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(""ВыполнитьПослеПолученияФайлов"", ЭтаФорма, Новый Структура(""КаталогВременныхФайлов"", КаталогВременныхФайлов));
	
	лДиалогВыбораКаталога           = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	лДиалогВыбораКаталога.Заголовок = лЗаголовокДиалогаЗагрузки;
	
	НачатьПолучениеФайлов(ОповещениеОЗавершении, СписокФайловНаСервере, лДиалогВыбораКаталога, Истина);
	
КонецПроцедуры // ЗагрузитьФайлыНаКлиент()

#КонецОбласти






















#Область РаботаСПараметрамиЗапроса

// Инициирует глобальные значения необходимые для работы с параметрами запросов
// и помещает глобальную таблицу значений с параметрами запросов в хранилище
// Параметры:
// 	Нет
//  
Функция ИнициироватьПараметрыЗапросов()
	
	КолонкиПараметровТекущегоЗапроса = СтрокаСКолонкамиКоллекции(ПараметрыТекущегоЗапроса.Выгрузить().СкопироватьКолонки());
	КолонкиПараметровЗапросов        = СтрокаСКолонкамиКоллекции(ПараметрыЗапросов.Выгрузить().СкопироватьКолонки());
	АдресПараметровЗапросов          = ПоместитьВоВременноеХранилище(ПараметрыЗапросов.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции // ИнициироватьПараметрыЗапросов()

&НаСервереБезКонтекста
// Добавляет новую строку с параметром запроса в глобальную таблицу значений параметров запросов
// Параметры:
//  ПараметрыЗапросов - ТаблицаЗначений - глобальная таблица значений параметров запросов 
//		                                  (копия реквизита формы ПараметрыЗапросов),
//		                                   сохраненная в хранилище по адресу АдресПараметровЗапросов
//  НовыйПараметрЗапроса - Структура - [ИдентификаторЗапроса, Значение, Имя] - 
//		ИдентификаторЗапроса - Строка - уникальный идентификатор параметра в коллекции
//		Значение - Строка - результат конвертации функцией ЗначениевСтрокуВнутр()
//		Имя - Строка - имя параметра
//  
Процедура ДобавитьНовыйПараметрЗапроса(ПараметрыЗапросов, НовыйПараметрЗапроса)
	НовыйПараметр = ПараметрыЗапросов.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйПараметр, НовыйПараметрЗапроса);
КонецПроцедуры // ДобавитьНовыйПараметрЗапроса()

// Находит строки в глобальной таблице значений параметров запросов по указанному отбору
// Параметры:
//  ПараметрыОтбора - Структура - 
//                    Ключ - имя поля по которому необходимо сделать отбор
//                    Значение - значение, по которому необходимо сделать отбор в поле, указанном в ключе
//  АдресПараметровЗапросов - Строка - строка с адресом во временном хранилище где расположена глобальная таблица
//                                     значений параметров запроса
// Возвращаемое значение:
//  Массив структур - ключи структуры - колонки глобальной таблицы значений параметров запроса
//                                     список колонок так же хранится в реквизите КолонкиПараметровЗапросов
//  
&НаСервереБезКонтекста
Функция НайтиПараметрыНаСервере(ПараметрыОтбора, АдресПараметровЗапросов)
	
	ПараметрыЗапросов      = ПолучитьИзВременногоХранилища(АдресПараметровЗапросов);
	ПоляПараметровЗапросов = СтрокаСКолонкамиКоллекции(ПараметрыЗапросов);
	ОтборанныеПараметры    = ПараметрыЗапросов.НайтиСтроки(ПараметрыОтбора);
	НайденныеПараметры     = Новый Массив;
	
	Для Каждого ПараметрЗапроса Из ОтборанныеПараметры Цикл 
		СтрокаСПараметрами = Новый Структура(ПоляПараметровЗапросов);
		ЗаполнитьЗначенияСвойств(СтрокаСПараметрами, ПараметрЗапроса);
		НайденныеПараметры.Добавить(СтрокаСПараметрами);
	КонецЦикла;
	
	Возврат НайденныеПараметры;
	
КонецФункции // НайтиПараметрыНаСервере()













&НаСервереБезКонтекста
Процедура ДобавитьТипВКоллекциюСписокТиповПоЗначениюНаСервере(СписокТипов, Значение, СтруктураКЭШ = Неопределено)
	
	ОбъектОбработки().ДобавитьТипВКоллекциюСписокТиповПоЗначению(СписокТипов, Значение, СтруктураКЭШ);
	
КонецПроцедуры // ДобавитьТипВКоллекциюСписокТиповПоЗначениюНаСервере

// Возвращает массив параметров для переданного текста запроса
// Параметры:
//  ТекстЗапроса - Строка - текст запроса, параметры которого необходимо получить
//  ТекстОшибки - Строка - переменная в которую будет возвращена ошибка при неудачном получении параметров запроса
//
// Возвращаемое значение:
//  Массив структур - [Имя, ТипЗначения, ИмяXML] - 
//		Имя - Строка - Имя параметра
//		ТипЗначения - ОписаниеТипов - типа параметра
//		ИмяXML - Строка - Имя типа xml
//  
&НаСервереБезКонтекста
Функция ПараметрыПоТекстуЗапроса(ТекстЗапроса, ТекстОшибки)

	Перем ПараметрыЗапроса;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Попытка
		ПараметрыЗапроса = Запрос.НайтиПараметры();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	РезультатСПараметрами = Новый Массив;
	Для Каждого ТекущийПараметр Из ПараметрыЗапроса Цикл
		Если ТекущийПараметр.ТипЗначения.Типы().Количество() > 0 Тогда 
			ТипЗначенияПараметра = ТекущийПараметр.ТипЗначения;
			Если XMLТип(ТипЗначенияПараметра.Типы()[0]) = Неопределено Тогда 
				Сообщить(""Не получилось получить XMLТип для типа "" + Строка(ТипЗначенияПараметра));
				ТипЗначенияПараметра = Новый ОписаниеТипов(""Строка"");
			КонецЕсли;
		Иначе
			ТипЗначенияПараметра = Новый ОписаниеТипов(""Строка"");
		КонецЕсли;
			
		РезультатСПараметрами.Добавить(Новый Структура(""Имя, ТипЗначения, ИмяXML"", ТекущийПараметр.Имя, ТипЗначенияПараметра, XMLТип(ТипЗначенияПараметра.Типы()[0]).ИмяТипа));
	КонецЦикла;
	
	Возврат РезультатСПараметрами

КонецФункции // ПараметрыПоТекстуЗапроса()

&НаКлиенте
Функция ДобавитьНовыйПараметрТекущегоЗапроса(ПараметрыТекущегоЗапроса, НовыйПараметрЗапроса)
	
	НовыйПараметр = ПараметрыТекущегоЗапроса.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйПараметр, НовыйПараметрЗапроса);
	
	Возврат НовыйПараметр;
	
КонецФункции // ДобавитьНовыйПараметрЗапроса()


&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеДляПараметровНаСервере(Параметры, СписокТипов);
	
	Для Каждого текПараметр Из Параметры Цикл 
		СвойстваТипаПараметра = ДанныеПоТипуДляЗначения(текПараметр.Значение, СписокТипов);
		ИнициализацияТипаИЗначенияПараметра(текПараметр, СвойстваТипаПараметра, Истина);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДанныеДляПараметровНаСервере()

&НаКлиенте
Процедура ОбновитьДанныеПараметров(ИсходныеПараметры, ДанныеДляЗаполнения)
	Сч = 0;
	Для Каждого ТекПараметр Из ИсходныеПараметры Цикл 
		ЗаполнитьЗначенияСвойств(ТекПараметр, ДанныеДляЗаполнения[Сч]);
		Сч = Сч + 1;
	КонецЦикла;
КонецПроцедуры // ОбновитьДанныеПараметров()

// Добавляет параметры в коллекцию текущих параметров запроса
// Параметры:
//  ПараметрыЗапроса - Соответствие - [Параметр | Значение]
//  
// Возвращаемое значение:
//  Булево - флаг успешного добавления параметров
Функция ДобавитьПараметрыТекущегоЗапроса(ПараметрыЗапроса)
	
	Для Каждого лПараметр Из ПараметрыЗапроса Цикл
		
		Попытка
			
			лСтрокаСПараметром = гНайтиЗначениеБезУчетаРегистра(лПараметр.Ключ, ПараметрыТекущегоЗапроса, ""Имя"");
			
			Если лСтрокаСПараметром = Неопределено Тогда 
				лСтрокаСПараметром     = ПараметрыТекущегоЗапроса.Добавить();
				лСтрокаСПараметром.Имя = лПараметр.Ключ;
			КонецЕсли;                                                                                                            
			
			лСтрокаСПараметром.Тип            = XMLТип(ТипЗнч(лПараметр.Значение)).ИмяТипа;
			лСтрокаСПараметром.Значение       = ЗначениеВСтрокуВнутр(лПараметр.Значение);
			лСтрокаСПараметром.ЗначениеВФорме = ФормированиеПредставленияЗначения(лСтрокаСПараметром.Значение);
			
			ДанныеПоТипу = СписокТипов.НайтиПоЗначению(лСтрокаСПараметром.Тип);                                      // простые типы
			
			Если ДанныеПоТипу = Неопределено Тогда                                                                           
				ДанныеПоТипу = СписокТипов.НайтиПоЗначению(СериализаторXDTO.XMLТип(лСтрокаСПараметром.Тип).ИмяТипа); // сложные типы
			КонецЕсли;
			
			лСтрокаСПараметром.ТипВФорме    = ДанныеПоТипу.Представление;
			лСтрокаСПараметром.КартинкаТипа = ДанныеПоТипу.Картинка;
			
		Исключение
			// #Рефакторинг: какие исключения обрабатываются
			ТекстСообщения = СтрШаблон(""Неудачная попытка установки параметра %1 [ %2 ](ошибка: %3)"", 
				лПараметр.Ключ, лПараметр.Значение, ОписаниеОшибки());
				
			ПоказатьСообщениеПользователю(ТекстСообщения, Объект, УникальныйИдентификатор, ""Объект"");
			
			Возврат Ложь;
			
		КонецПопытки; 
	КонецЦикла; 
	
	Возврат Истина
	
КонецФункции // ДобавитьПараметрыТекущегоЗапроса()

&НаСервереБезКонтекста
Процедура ОбновитьПараметрыИзТекущихНаСервере(ПараметрыТекущегоЗапроса, ИдентификаторСохраняемогоЗапроса, АдресПараметровЗапросов)
	
	ПараметрыЗапросов = ПолучитьИзВременногоХранилища(АдресПараметровЗапросов);
	
	// очищаем глобальные параметры
	лИдЗапросыКУдалению = Новый Массив;
	лИдЗапросыКУдалению.Добавить("""");
	лИдЗапросыКУдалению.Добавить(ИдентификаторСохраняемогоЗапроса);
	
	Для каждого идЗапросаДляПараметра Из лИдЗапросыКУдалению Цикл
		лСписокПараметровКУдалению = ПараметрыЗапросов.НайтиСтроки(Новый Структура(""ИдентификаторЗапроса"", идЗапросаДляПараметра));
		Для каждого лПараметрЗапроса Из лСписокПараметровКУдалению Цикл
			ПараметрыЗапросов.Удалить(лПараметрЗапроса);
		КонецЦикла; 
	КонецЦикла; 
	
	// добавляем измененные параметры в общий список параметров		
	Для каждого лПараметрЗапроса Из ПараметрыТекущегоЗапроса Цикл
		лНовыйПараметр = ПараметрыЗапросов.Добавить();
		ЗаполнитьЗначенияСвойств(лНовыйПараметр, лПараметрЗапроса);
		Если лПараметрЗапроса.ГлобальныйПараметр Тогда 
			лНовыйПараметр.ИдентификаторЗапроса = """";
		Иначе
			лНовыйПараметр.ИдентификаторЗапроса = ИдентификаторСохраняемогоЗапроса;
		КонецЕсли;
	КонецЦикла; 
	
	ПоместитьВоВременноеХранилище(ПараметрыЗапросов, АдресПараметровЗапросов);
	
КонецПроцедуры // ОбновитьПараметрыИзТекущихНаСервере()

// Добавляет параметры в коллекцию текущих параметров запроса из общей таблицы параметров
// Параметры:
//  ИдентификаторЗапроса - Строка - идентификатор запроса, параметры которого необходимо 
//  заполнить в коллекцию текущих параметров. Если ИдентификаторЗапроса пустой, то заполняются 
//  глобальные параметры.
//  ЕстьПараметрыБезТипов - Булево - флаг необходимости проставить тип у заполненных параметров
//  (это значит, что по каким-то причинам в глобальной таблице параметров есть параметр без типа)
//  
&НаКлиенте
Процедура ДобавитьПараметрыТекущегоЗапросаИзОбщейТаблицыПараметров(ИдентификаторЗапроса, ЕстьПараметрыБезТипов)
	
	Если ЗначениеЗаполнено(ИдентификаторЗапроса) Тогда 
		ЭтоГлобальныйПараметр = Ложь
	Иначе
		ЭтоГлобальныйПараметр = Истина
	КонецЕсли;
	
	лПараметрыТекущегоЗапроса = НайтиПараметрыНаСервере(Новый Структура(""ИдентификаторЗапроса"", ИдентификаторЗапроса), АдресПараметровЗапросов);
	
	Для Каждого лПараметрЗапроса Из лПараметрыТекущегоЗапроса Цикл
		
		лНовыйПараметр = ПараметрыТекущегоЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(лНовыйПараметр, лПараметрЗапроса);
		
		лНовыйПараметр.ГлобальныйПараметр = ЭтоГлобальныйПараметр;
		
		Если НЕ ЗначениеЗаполнено(лНовыйПараметр.ЗначениеВФорме) ИЛИ ПустаяСтрока(лНовыйПараметр.Тип) Тогда 
			лПараметры = ПолучитьКоллекциюДляПередачиНаСервер(лПараметрыТекущегоЗапроса, КолонкиПараметровТекущегоЗапроса);
			ЗаполнитьДанныеДляПараметровНаСервере(лПараметры, СписокТипов);
			ОбновитьДанныеПараметров(лПараметрыТекущегоЗапроса, лПараметры);
			ЗаполнитьЗначенияСвойств(лНовыйПараметр, лПараметрЗапроса, ""Тип,ТипВФорме,КартинкаТипа,ЗначениеВФорме"");
		КонецЕсли;
		
		Если СтрНайти(""ТаблицаЗначений,МоментВремени,Массив,Граница"", лНовыйПараметр.Тип) = Неопределено Тогда 
			
			Массив = Новый Массив;
			Массив.Добавить(Тип(лНовыйПараметр.Тип));
			Описание = Новый ОписаниеТипов(Массив);
			
			лНовыйПараметр.ЗначениеВФорме = Описание.ПривестиЗначение(лНовыйПараметр.ЗначениеВФорме);
			
		КонецЕсли;
		
		Если ПустаяСтрока(лНовыйПараметр.Тип) Тогда 
			ЕстьПараметрыБезТипов = Истина;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры // ДобавитьПараметрыТекущегоЗапросаИзОбщейТаблицыПараметров()

// Добавляет параметры в коллекцию текущих параметров запроса по тексту запроса
// Параметры:
//  ТекстЗапроса - Строка - текст запроса, параметры которого необходимо получить
//  ТекстОшибки - Строка - переменная в которую будет возвращена ошибка при неудачном получении параметров запроса
//
// Возвращаемое значение:
//  Булево - флаг успешного заполнения параметров текущего запроса
&НаКлиенте
Функция ДобавитьПараметрыТекущегоЗапросаПоТекстуЗапроса(ТекстЗапроса, ТекстОшибки)
	
	лПараметрыЗапроса = ПараметрыПоТекстуЗапроса(ТекстЗапроса, ТекстОшибки);
	
	Если лПараметрыЗапроса = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	// #ЗаполнениеПараметровЗапроса 2
	Для Каждого Параметр Из лПараметрыЗапроса Цикл
		
		ПараметрыТекущегоЗапросаВМассиве = ПолучитьКоллекциюДляПередачиНаСервер(ПараметрыТекущегоЗапроса, 
			КолонкиПараметровТекущегоЗапроса);
			
		лИмяПараметра      = Параметр.Имя;
		лСтрокаСПараметром = гНайтиЗначениеБезУчетаРегистра(лИмяПараметра, ПараметрыТекущегоЗапросавМассиве, ""Имя"");
		
		Если лСтрокаСПараметром = Неопределено Тогда 
			
			СтруктураСПараметром = Новый Структура;
			СтруктураСПараметром.Вставить(""Имя""                , лИмяПараметра);
			СтруктураСПараметром.Вставить(""ИдентификаторСтроки"", Новый УникальныйИдентификатор);
			
			лСтрокаСПараметром = ДобавитьНовыйПараметрТекущегоЗапроса(ПараметрыТекущегоЗапроса, СтруктураСПараметром);
			
		КонецЕсли;                                                    
		
		Если Параметр.ТипЗначения.Типы().Количество() > 0 Тогда 
			ДанныеПоТипу = СписокТипов.НайтиПоЗначению(Строка(Параметр.ТипЗначения.Типы()[0])); // простые типы 
			Если ДанныеПоТипу = Неопределено Тогда
				ДанныеПоТипу = СписокТипов.НайтиПоЗначению(Параметр.ИмяXML);                    // сложные типы
			КонецЕсли;
			
			// Не нашли, то это объект из расширения и релиз платформы младше 8.3.20
			Если ДанныеПоТипу = Неопределено Тогда
				ДобавитьТипВКоллекциюСписокТиповПоЗначениюНаСервере(СписокТипов, Параметр.ТипЗначения.Типы()[0]);
				ДанныеПоТипу = СписокТипов.НайтиПоЗначению(Параметр.ИмяXML);                    // сложные типы
			КонецЕсли;
			
			ИнициализацияТипаИЗначенияПараметра(лСтрокаСПараметром, ЭлементСпискаВСтруктуру(ДанныеПоТипу), Ложь);
		Иначе
			лСвойстваТипаПараметра = Новый Структура;
			лСвойстваТипаПараметра.Вставить(""Значение""     , ТипЗнч(""""));
			лСвойстваТипаПараметра.Вставить(""Представление"", ""Строка"");
			лСвойстваТипаПараметра.Вставить(""Картинка""     , Неопределено);
			ИнициализацияТипаИЗначенияПараметра(лСтрокаСПараметром, лСвойстваТипаПараметра, Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ДобавитьПараметрыТекущегоЗапросаПоТекстуЗапроса()

// Заполняет поля для конкретного параметра в коллекции текущих параметров запроса по свойствам типа
// Параметры:
//  ИдентификаторСтрокиПараметра - Строка - идентификатор строки параметра для которого необходимо дозаполнить поля
//  СвойстваТипаПараметра - Структура - 
//  		Значение - 
//  		Представление - 
//  		Картинка - 
//  НеИнициироватьЗначение - булево - флаг заполнения значения и значения в форме
&НаКлиенте
Процедура ИнициализацияТипаИЗначенияПараметраПоИдентиифкатору(ИдентификаторСтрокиПараметра, СвойстваТипаПараметра, НеИнициироватьЗначение = Ложь)
	
	Если СвойстваТипаПараметра = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийТипЗначение = СвойстваТипаПараметра.Значение;
	ТекущийПараметр    = ПараметрыТекущегоЗапроса.НайтиПоИдентификатору(ИдентификаторСтрокиПараметра);
	
	ИнициализацияТипаИЗначенияПараметра(ТекущийПараметр, СвойстваТипаПараметра, НеИнициироватьЗначение);
	
КонецПроцедуры // ИнициализацияТипаИЗначенияПараметраПоИдентиифкатору()

&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализацияТипаИЗначенияПараметра(ТекущийПараметр, СвойстваТипаПараметра, НеИнициироватьЗначение)
	
	ТипЗначения = СвойстваТипаПараметра.Значение;
	
	ТекущийПараметр.Тип            = ТипЗначения;
	ТекущийПараметр.ТипВФорме      = СвойстваТипаПараметра.Представление;
	ТекущийПараметр.КартинкаТипа   = СвойстваТипаПараметра.Картинка;
	ТекущийПараметр.Значениевформе = ФормированиеПредставленияЗначения(ТекущийПараметр.Значение);
	
	Если Не НеИнициироватьЗначение Тогда 
		Если ТипЗначения = ""ТаблицаЗначений"" Или ТипЗначения = ""МоментВремени"" 
			Или ТипЗначения = ""Массив"" Или ТипЗначения = ""Граница"" Тогда 
		
			ТекущийПараметр.Значение       = ПолучитьПустоеЗначениеТипаНаСервере(ТипЗначения);
			ТекущийПараметр.ЗначениеВФорме = ФормированиеПредставленияЗначения(ТекущийПараметр.Значение); 
		Иначе
			
			Массив = Новый Массив;
			Массив.Добавить(Тип(ТипЗначения));
			Описание = Новый ОписаниеТипов(Массив);
			
			ТекущийПараметр.ЗначениеВФорме	= Описание.ПривестиЗначение(ТекущийПараметр.ЗначениеВФорме);
			ТекущийПараметр.Значение		= ЗначениеВСтрокуСервер(ТекущийПараметр.ЗначениеВФорме);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // ИнициализацияТипаИЗначенияПараметра()

// Возвращает информацию по типу для переданного значения
// Параметры:
//  Значение - Произвольное значение
//  СписокТипов - Списк значений - Список типов доступных в обработке (см. функцию гСформироватьСписокТипов)
//
// Возвращаемое значение:
//  Структура - [Значение, Представление, Картинка]
&НаСервереБезКонтекста
Функция ДанныеПоТипуДляЗначения(Значение, СписокТипов)
	
	Если Значение = """" Тогда 
		лТипЗначения = Тип(""Строка""); 
	Иначе
		лТипЗначения = ТипЗнч(ЗначениеИзСтрокиВнутр(Значение)); // #рефакторинг везде обработать ситуацию, когда передается пустая строка в значение
	КонецЕсли;
	
	лТипЗначенияСтрока = ПолучитьТипСтрокой(лТипЗначения);
	
	Если лТипЗначенияСтрока <> ""Не определено"" Тогда 
		лДанныеПоТипу = СписокТипов.НайтиПоЗначению(лТипЗначенияСтрока);              // простые типы
		Если лДанныеПоТипу = Неопределено Тогда
			лДанныеПоТипу = СписокТипов.НайтиПоЗначению(XMLТип(лТипЗначения).ИмяТипа); // сложные типы
		КонецЕсли;
		Возврат Новый Структура(""Значение, Представление, Картинка"", лДанныеПоТипу.Значение, лДанныеПоТипу.Представление, лДанныеПоТипу.Картинка);
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции // ДанныеПоТипуДляЗначения()

// Заполняет информацию по типам параметров после получения параметров для текущего запроса 
// из общей таблицы параметров (если по каким-то параметрам не был заполнен тип)
&НаКлиенте
Процедура ЗаполнитьПустыеТипыУПараметровТекущегоЗапроса()
	
	лДанныеПоТипамДляЗначенийПараметров = Новый Соответствие; // кэш для опитимизации
	
	Для каждого лПараметр Из ПараметрыТекущегоЗапроса Цикл
		
		Если ПустаяСтрока(лПараметр.Тип) И лПараметр.Значение <> """" Тогда 
			
			лДанныеПоТипуДляТекущегоЗначения = лДанныеПоТипамДляЗначенийПараметров.Получить(лПараметр.Значение);
			
			Если лДанныеПоТипуДляТекущегоЗначения = Неопределено Тогда 
				лДанныеПоТипуДляТекущегоЗначения = ДанныеПоТипуДляЗначения(лПараметр.Значение, СписокТипов);
				лДанныеПоТипамДляЗначенийПараметров.Вставить(лПараметр.Значение, лДанныеПоТипуДляТекущегоЗначения);
			КонецЕсли;
			
			ИнициализацияТипаИЗначенияПараметраПоИдентиифкатору(лПараметр.ПолучитьИдентификатор(), лДанныеПоТипуДляТекущегоЗначения, Истина);
		КонецЕсли;
	КонецЦикла; 	
КонецПроцедуры // ЗаполнитьПустыеТипыУПараметровТекущегоЗапроса()

&НаКлиенте
Процедура ОбработкаДействийНастройкиПодключенияКВнешнейБазеВПараметры()
	
	лСистемнаяИнформация = Новый(""СистемнаяИнформация"");
	
	ПараметрыДляДобавления = Новый Соответствие;
	ПараметрыДляДобавления.Вставить(Константы().ИмяПараметраСоединенияСИБ, СтрокаСоединенияИнформационнойБазы() + "" Usr = """""" + ИмяПользователя() + """"""; Pwd = """""""";"");
	ПараметрыДляДобавления.Вставить(Константы().ВерсияВнешнейБазы, Лев(лСистемнаяИнформация.ВерсияПриложения,3));
	
	ДобавитьПараметрыТекущегоЗапроса(ПараметрыДляДобавления);
	
КонецПроцедуры // ОбработкаДействийНастройкиПодключенияКВнешнейБазеВПараметры()

#КонецОбласти
























#Область Временные_таблицы_и_таблицы_пакета

&НаСервереБезКонтекста
Функция ПолучитьТаблицыЗапросаНаСервере(ТекстЗапроса, ПолучитьВременныеТаблицы)
	
	Ошибка = Ложь;
	Попытка
		СхемаЗапроса = Вычислить(""Новый СхемаЗапроса"");
	Исключение
		Ошибка = Истина;
	КонецПопытки;
	
	лТаблицыЗапроса = Новый СписокЗначений;
	
	Если Не Ошибка Тогда 
		
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		
		Сч                         = -1;
		лПакетЗапросов             = СхемаЗапроса.ПакетЗапросов;
		лКоличествоЗапросовВПакете = лПакетЗапросов.Количество() - 1;
		
		Для Каждого ТекущийЗапрос ИЗ лПакетЗапросов Цикл 
			
			Сч = Сч + 1;
			
			Если ПолучитьВременныеТаблицы И ТекущийЗапрос.ТаблицаДляПомещения = """" ИЛИ 
				НЕ ПолучитьВременныеТаблицы И ТекущийЗапрос.ТаблицаДляПомещения <> """" Тогда 
				Продолжить;
			КонецЕсли;
			
			Если Не ПолучитьВременныеТаблицы И Сч >= лКоличествоЗапросовВПакете Тогда 
				Прервать;
			КонецЕсли;
			
			лТаблицыЗапроса.Добавить(Сч, ?(ТекущийЗапрос.ТаблицаДляПомещения = """", ""ЗапросПакета"" + Формат(лТаблицыЗапроса.Количество() + 1, ""ЧГ=0""), ТекущийЗапрос.ТаблицаДляПомещения));
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат лТаблицыЗапроса;
	
КонецФункции // ПолучитьТаблицыЗапросаНаСервере()

&НаКлиенте
Процедура ОткрытьФормуСТаблицей(ИмяТаблицы, АдресСоответствияТаблиц)
	
	лАдресТаблицыЗначений = ПоложитьТаблицуНаСервер(ИмяТаблицы, АдресСоответствияТаблиц);
	
	Если Не ЗначениеЗаполнено(лАдресТаблицыЗначений) Тогда 
		СообщитьОбОшибкеПоказаТаблицы(ИмяТаблицы);
		Возврат;
	КонецЕсли;
	
	лРежимОткрытияФормы  = гРежимыОткрытияФормы().ПоказатьТаблицу;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить(""РежимОткрытияФормы""  , лРежимОткрытияФормы);
	ПараметрыФормы.Вставить(""АдресТаблицыЗначений"", лАдресТаблицыЗначений);
	ПараметрыФормы.Вставить(""Заголовок""           , СтрШаблон(""Просмотр таблицы <%1>"", ИмяТаблицы));
	
	ОткрытьФорму(СтрЗаменить(ИмяФормы, "".ФормаУпр"", """") + "".ФормаУпрПустая"", ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры // ОткрытьФормуСТаблицей()

&НаСервере
Функция ПоложитьТаблицуНаСервер(ИмяТаблицы, АдресСоответствияТаблиц)
	
	лСоответствияВременныхТаблиц = ПолучитьИзВременногоХранилища(АдресСоответствияТаблиц);
	
	лВременнаяТаблица = лСоответствияВременныхТаблиц[ИмяТаблицы];
	
	Если лВременнаяТаблица = Неопределено Тогда 
		Возврат Неопределено;
	Иначе
		Возврат ПоместитьВоВременноеХранилище(лВременнаяТаблица, УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции // ПоложитьТаблицуНаСервер()

&НаКлиенте
Процедура СообщитьОбОшибкеПоказаТаблицы(ИмяТаблицы)
	
	Если ПустаяСтрока(ИмяТаблицы) Тогда 
		Сообщить(""Выделите имя таблицы в запросе"", СтатусСообщения.Важное);
	Иначе
		Сообщить(""Таблица <"" + ИмяТаблицы + ""> не найдена в запросе. Возможно изменился запрос.
			|Выполните запрос еще раз и попробуйте снова."", СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры // СообщитьОбОшибкеПоказаТаблицы()

Процедура ПерерисоватьПодменюНаСервере(СписокМеню, ИмяМетодаПолученияСвойствМеню)
	
	лСвойстваПунктаМеню  = Вычислить(""ОбъектОбработки()."" + ИмяМетодаПолученияСвойствМеню + ""()"");
	лИмяЭлементаРодителя = лСвойстваПунктаМеню.ИмяКорня;
	лРодитель            = Элементы[лИмяЭлементаРодителя];
	лДействие            = лСвойстваПунктаМеню.Действие;
	
	Пока лРодитель.ПодчиненныеЭлементы.Количество() > 0 Цикл 
		Элементы.Удалить(лРодитель.ПодчиненныеЭлементы[0]);
	КонецЦикла;
	
	лСписокКомандКУдалению = Новый Массив;
	Для Каждого ТекущаяКоманда Из Команды Цикл
		Если Найти(ТекущаяКоманда.Имя, лИмяЭлементаРодителя) = 1 Тогда
			лСписокКомандКУдалению.Добавить(ТекущаяКоманда);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекущаяКоманда Из лСписокКомандКУдалению Цикл 
		Команды.Удалить(ТекущаяКоманда);
	КонецЦикла;
	
	Для Каждого ИмяПунктаМеню из СписокМеню Цикл 
		
		лИмяПунктаМеню = лИмяЭлементаРодителя + ИмяПунктаМеню;
		
		КомандаФормы = Команды.Добавить(лИмяПунктаМеню);
		КомандаФормы.Действие = лДействие; 
		
		Кнопка = Элементы.Добавить(лИмяПунктаМеню, Тип(""КнопкаФормы""), лРодитель);
		Кнопка.ИмяКоманды = лИмяПунктаМеню;
		Кнопка.Заголовок  = ИмяПунктаМеню;
	КонецЦикла;
	
КонецПроцедуры // ПерерисоватьПодменюНаСервере()

&НаКлиенте
Процедура ПерерисоватьПодменюТаблицЗапроса(Подменю, ЭтоПодменюВременныхТаблиц)
	
	Если Не ПоказыватьВременныеТаблицы И ЭтоПодменюВременныхТаблиц
		ИЛИ Не ПоказыватьЗапросыПакета Тогда 
		Подменю.Видимость = Ложь;
	Иначе
		
		лТаблицы           = ПолучитьТаблицыЗапросаНаСервере(ТекстТекущегоЗапроса, ЭтоПодменюВременныхТаблиц);
		лПоказыватьТаблицы = (лТаблицы.Количество() > 0);
		Подменю.Видимость  = лПоказыватьТаблицы;
		
		Если лПоказыватьТаблицы Тогда 
			
			Если ЭтоПодменюВременныхТаблиц Тогда 
				лИмяМетодаПолученияСвойствМеню = ""гСвойстваПунктаМенюПоказатьВременнуюТаблицу""
			Иначе
				лИмяМетодаПолученияСвойствМеню = ""гСвойстваПунктаМенюПоказатьТаблицуПакета""
			КонецЕсли;
			
			ПерерисоватьПодменюНаСервере(лТаблицы, лИмяМетодаПолученияСвойствМеню);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПерерисоватьПодменюТаблицЗапроса()

&НаКлиенте
Процедура ПоказатьВыделеннуюТаблицу(ЭтоВременнаяТаблица)

	лВыделеннаяТаблица = СокрЛП(ВыделенныйТекстТекущегоЗапроса());
	
	Если ПустаяСтрока(лВыделеннаяТаблица) Тогда 
		СообщитьОбОшибкеПоказаТаблицы(лВыделеннаяТаблица);
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуСТаблицей(лВыделеннаяТаблица, ?(ЭтоВременнаяТаблица, АдресСоответствияВременныхТаблиц, АдресСоответствияТаблицПакета));
	
КонецПроцедуры // ПоказатьВыделеннуюТаблицу()

&НаКлиенте
Процедура ПерейтиКОписаниюТаблицы(ЭтоВременнаяТаблица);
	
	лВыделеннаяТаблица = СокрЛП(ВыделенныйТекстТекущегоЗапроса());
	
	Если ПустаяСтрока(лВыделеннаяТаблица) Тогда 
		СообщитьОбОшибкеПоказаТаблицы(лВыделеннаяТаблица);
		Возврат;
	КонецЕсли;
	
	лПозицияТаблицыВТекстеЗапроса = Найти(ВРег(ТекстТекущегоЗапроса), ""ПОМЕСТИТЬ "" + ВРег(лВыделеннаяТаблица));
	
	Если лПозицияТаблицыВТекстеЗапроса = 0 Тогда 
		Сообщить(""В тексте запроса не найдена строка """"Поместить "" + лВыделеннаяТаблица + """""""", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ЭлементТекстТекущегоЗапроса().УстановитьГраницыВыделения(лПозицияТаблицыВТекстеЗапроса, лПозицияТаблицыВТекстеЗапроса);	
	
КонецПроцедуры // ПерейтиКОписаниюТаблицы()

&НаСервереБезКонтекста
Функция гСвойстваПунктаМенюПоказатьВременнуюТаблицу()
	Возврат ОбъектОбработки().гСвойстваПунктаМенюПоказатьВременнуюТаблицу()
КонецФункции

&НаСервереБезКонтекста
Функция гСвойстваПунктаМенюПоказатьТаблицуПакета()
	Возврат ОбъектОбработки().гСвойстваПунктаМенюПоказатьТаблицуПакета()
КонецФункции

#КонецОбласти

#Область Вопросы

&НаКлиенте
Процедура СпроситьОчиститьРезультатЗапросаЕслиМногоДанных(ПараметрыВопроса)
	
	ПоказатьВопрос(Новый ОписаниеОповещения(""СпроситьОчиститьРезультатЗапросаЕслиМногоДанныхЗавершение"", ЭтаФорма, ПараметрыВопроса), ""Таблица с результатом содержит много данных.
		|Очистить ее перед выполнением следующего действия (это сильно ускорит его выполнение)? "", 
		РежимДиалогаВопрос.ДаНетОтмена,,  
		КодВозвратаДиалога.Отмена);
	
КонецПроцедуры

#КонецОбласти

#Область ЗавершенияАсинхронныхВызовов

&НаКлиенте
Процедура СпроситьОчиститьРезультатЗапросаЕслиМногоДанныхЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если НеУтвердительныйОтвет(РезультатВопроса) Тогда 
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		ОчиститьРезультатЗапросаНаКлиенте()
	КонецЕсли;
	
	Если ДополнительныеПараметры.Операция = мОперацииСЗапросами.Выполнить Тогда 
		лУдаленно = Ложь;
		Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда 
			ДополнительныеПараметры.Свойство(""Удаленно"", лУдаленно);
		КонецЕсли;
		
		ЗапуститьВыполнениеЗапроса(лУдаленно);
		
	ИначеЕсли ДополнительныеПараметры.Операция = мОперацииСЗапросами.ЗагрузитьЗапросыДляОтладки Тогда 
		ЗагрузитьЗапросыДляОтладкиПродолжение();		
	КонецЕсли;

КонецПроцедуры // СпроситьОчиститьРезультатЗапросаЕслиМногоДанныхЗавершение()


&НаКлиенте
Процедура ПослеЗакрытияВопросаПропуститьПервуюСтрокуТаблицы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если НеУтвердительныйОтвет(РезультатВопроса) Тогда 
		Возврат;
	Иначе
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
			ДополнительныеПараметры.Данные.Вставить(""ПропуститьПервуюСтроку"", Истина);
		КонецЕсли;
		
		ПараметрыВопроса = Новый Структура();
		ПараметрыВопроса.Вставить(""Данные""          , ДополнительныеПараметры.Данные);
		ПараметрыВопроса.Вставить(""ВыбраннаяКолонка"", ДополнительныеПараметры.ВыбранныйЭлемент.Значение);
		
		ПоказатьВопрос(Новый ОписаниеОповещения(""ПослеЗакрытияВопросаПытатьсяОпределятьТипЗначений"", Вычислить(ЭтотОбъектФорма), ПараметрыВопроса), 
			""Пытаться определить тип значений? 
			|(это увеличит время загрузки)"", 
			РежимДиалогаВопрос.ДаНетОтмена,, 
			КодВозвратаДиалога.Нет);
		
	КонецЕсли;
КонецПроцедуры // ПослеЗакрытияВопросаПропуститьПервуюСтрокуТаблицы()

&НаКлиенте
Процедура ПослеЗакрытияВопросаПытатьсяОпределятьТипЗначений(РезультатВопроса, Параметры) Экспорт
	
	Если НеУтвердительныйОтвет(РезультатВопроса) Тогда 
		Возврат;
	Иначе
		
		лДанныеБуфера = Параметры.Данные;
		
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			
			лКоличествоСтрок     = лДанныеБуфера.Текст.КоличествоСтрок();
			лАнализируемаяСтрока = ?(лКоличествоСтрок > 1, 2, 1);
			
			лМассивКолонокСтрокиТаблицы = гРазложитьСтрокуВМассивПодстрок(
				лДанныеБуфера.Текст.ПолучитьСтроку(лАнализируемаяСтрока), 
				лДанныеБуфера.Разделитель);
				
			лКоличествоКолонок = лМассивКолонокСтрокиТаблицы.Количество();
			
			Сч1 = 0;
			лТипыКолонок = Новый Соответствие;
			Пока Сч1 < лКоличествоКолонок Цикл
				Если СтрокаВЧисло(лМассивКолонокСтрокиТаблицы[Сч1]) <> Неопределено Тогда 
					лТипыКолонок.Вставить(Сч1, Тип(""Число""));
				ИначеЕсли ЗначениеЗаполнено(СтрокаВДату(лМассивКолонокСтрокиТаблицы[Сч1])) Тогда 
					лТипыКолонок.Вставить(Сч1, Тип(""Дата""));
				КонецЕсли;
				Сч1 = Сч1 + 1;
			КонецЦикла; 
			
			лДанныеБуфера.Вставить(""ТипыКолонок"", лТипыКолонок);
		КонецЕсли;
		
		// #рефакторинг заменить на структуру параметров в вызове процедуры
		ОбработкаДействияВыгрузитьВПараметрНаСервере(?(Параметры.ВыбраннаяКолонка = Константы().ВсеКолонки, Неопределено, Параметры.ВыбраннаяКолонка), ""ИзБуфера"", Параметры.Данные);
		
	КонецЕсли;
	
КонецПроцедуры // ПослеЗакрытияВопросаПытатьсяОпределятьТипЗначений()

&НаКлиенте
Процедура ПослеЗакрытияВопросаСоздатьНовыйФайл(РезультатВопроса, Параметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		НовыйФайлЗапросовДействие();
	КонецЕсли;
	
КонецПроцедуры // ПослеЗакрытияВопросаСоздатьНовыйФайл()

&НаКлиенте
Процедура ВопросЗавершение(РезультатВопроса, ПараметрыВопроса) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Таймаут Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВопроса.ИдВопроса = ""ДобавитьКолонкиВТаблице"" Тогда 
		Если РезультатВопроса <> КодВозвратаДиалога.Отмена Тогда 
			ТекстВТаблицуНаСервере(ПараметрыВопроса.МассивКолонокСтрокиТаблицы, ПараметрыВопроса.Текст, (РезультатВопроса = КодВозвратаДиалога.Да), ПараметрыВопроса.Разделитель);
			ОбновитьСостояниеРезультатаЗапроса();
		КонецЕсли;		
	ИначеЕсли ПараметрыВопроса.ИдВопроса = ""СкопироватьСтрокуВБуфер"" Тогда 
		
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
			ПоместитьТекстВБуфер(ПараметрыВопроса.Строка);
		Иначе
			ТД = Новый ТекстовыйДокумент();
			ТД.УстановитьТекст(ПараметрыВопроса.Строка);
			ТД.Показать(,);
		КонецЕсли;		
	ИначеЕсли ПараметрыВопроса.ИдВопроса = ""ОчиститьТаблицуСРезультатом"" Тогда 
		Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда 
			ОчиститьРезультатЗапросаНаКлиенте();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВопросЗавершение()

//&НаКлиенте
// процедура СохранитьИзмененияЗавершение(РезультатВопроса, Знач Операция) Экспорт
//	
//	// если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда 
//	//	Возврат;
//	// иначеЕсли РезультатВопроса = КодВозвратаДиалога.Да Тогда 
//	//	мОперацияПослеСохраненияИзменений = Операция;
//	//	лПродолжитьОперациюПослеСохранения = СохранитьФайлСЗапросом(ИмяФайлаСЗапросом);
//	// иначе
//	//	лПродолжитьОперациюПослеСохранения = Истина;
//	// конецЕсли;
//	//
//	// если лПродолжитьОперациюПослеСохранения Тогда 
//	//	ВыполнитьОперациюПослеСохраненияИзменений(Операция);
//	// конецЕсли;
//	
// конецПроцедуры // СохранитьИзмененияЗавершение()

&НаКлиенте
Процедура ПослеВопросаСохранитьИзмененияПродолжение(Результат, Параметры) Экспорт
	
	Перем лОперация;
	
	Если Не Параметры.Свойство(""Операция"", лОперация) Тогда 
		лОперация = Неопределено;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		ОбработатьОперациюПослеСохраненияЗапросов(лОперация, Параметры);
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда 
		СохранитьЗапросыВФайлНачало(Ложь, Ложь, Новый Структура(""Операция"", лОперация));
	КонецЕсли;
	
КонецПроцедуры // ПослеВопросаСохранитьИзмененияПродолжение()


&НаКлиенте
Процедура ПодключенияКОблакуДействиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда  
		
		ОбработатьИзменениеДанныхОПодключении(РезультатЗакрытия);
		Если РезультатЗакрытия.ИдентификаторСессии <> ИдентификаторСессии Тогда 
			
			Если Не ЗначениеЗаполнено(РезультатЗакрытия.email) Тогда 
				ИмяФайлаСЗапросом = """"; 
			КонецЕсли;
			ИмяПользователяВОблаке = РезультатЗакрытия.email;
			ИдентификаторСессии    = РезультатЗакрытия.ИдентификаторСессии;

			ОбновитьЗаголовок();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодключенияКОблакуДействиеЗавершение()

&НаКлиенте
Процедура ОкончаниеПроверкиСуществованияФайла(Существует, ДополнительныеПараметры)
	
	Перем Операция;
	
	Если Не ДополнительныеПараметры.Свойство(""Операция"", Операция) Тогда 
		
		ВызватьИсключение ""Не определена операция в обработчике ОкончаниеПроверкиСуществованияФайла"";
		
	ИначеЕсли Операция = ""СохранитьЗапросыВФайл"" Тогда  //#рефакторинг Заменить на константу
		
		лПараметры = ДополнительныеПараметры.ТранзитныеПараметры;
		
		ДополнительныеПараметры.ТранзитныеПараметры.Вставить(""ФайлСуществует"", Существует);
		
		СохранитьВФайл(Операция, ДополнительныеПараметры.ФормироватьНовоеИмяЕслиНеНайденФайл, ДополнительныеПараметры.ТранзитныеПараметры)
		
	КонецЕсли;
	
КонецПроцедуры // ОкончаниеПроверкиСуществованияФайла()

&НаКлиенте
//#рефакторинг Заменить на ОкончаниеПроверкиСуществованияФайла
Процедура ОкончаниеПроверкиСуществования(Существует, ДополнительныеПараметры) Экспорт
	
	Перем ИсточникПроверки;
	
	Если Не ДополнительныеПараметры.Свойство(""ИсточникПроверки"", ИсточникПроверки) Тогда 
		ВызватьИсключение ""Не определен источник проверки в обработчике ОкончаниеПроверкиСуществования"";
	ИначеЕсли ИсточникПроверки = ""СохранитьЗапросыВФайлНачало"" Тогда 
		лПараметры = ДополнительныеПараметры.ТранзитныеПараметры;
		лПараметры.ДополнительныеПараметры.Вставить(""СохранитьЗначенияПоЗапросу"", Ложь);
		лПараметры.ДополнительныеПараметры.Вставить(""ФайлСуществует""            , Существует);
		СохранитьЗапросыВФайлНачало(лПараметры.ВызыватьДиалог, лПараметры.СохранитьТекущийЗапрос, лПараметры.ДополнительныеПараметры)
	КонецЕсли;
	
КонецПроцедуры // ОкончаниеПроверкиСуществования()

&НаКлиенте
Процедура ПоказатьВводСтрокиСгруппироватьЗапросыПродолжение(Строка, ДополнительныеПараметры) Экспорт
	
	Если Строка <> Неопределено Тогда 
		// создаем новую группу
		лРодительТекущейСтроки = РодительСтрокиСЗапросом(мТекущаяСтрокаДереваЗапросов);
		
		лЭлементыДерева = ?(лРодительТекущейСтроки = Неопределено, ДеревоЗапросов, лРодительТекущейСтроки).ПолучитьЭлементы();
		
		лНовыйРодитель = лЭлементыДерева.Добавить();
		
		лНовыйРодитель.Имя           = Строка;
		лНовыйРодитель.Идентификатор = Новый УникальныйИдентификатор;
		
		// переносим выделенные строки в новую группу
		лМассивСтрокКУдалению = Новый Массив;
		Для Каждого ВыделеннаяСтрокаИД Из Элементы.ДеревоЗапросов.ВыделенныеСтроки Цикл
			
			лМассивСтрокКУдалению.Добавить(ВыделеннаяСтрокаИД);
			
			ПеренестиВеткуРекурсивно(лНовыйРодитель.ПолучитьЭлементы().Добавить(), СтрокаСЗапросом(ВыделеннаяСтрокаИД));
		КонецЦикла;
		
		Для Каждого СтрокКУдалению Из лМассивСтрокКУдалению Цикл 
			ДеревоЗапросов.ПолучитьЭлементы().Удалить(ДеревоЗапросов.ПолучитьЭлементы().Индекс(СтрокаСЗапросом(СтрокКУдалению)));
		КонецЦикла;
		
		мТекущаяСтрокаДереваЗапросов = Неопределено;
		Элементы.ДеревоЗапросов.ТекущаяСтрока = лНовыйРодитель.ПолучитьИдентификатор();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросИзФормыПродолжение(Параметры)
	
	Перем лОперация;
	
	Если Параметры.Свойство(""Операция"", лОперация) Тогда 
		Если лОперация = мОперацииСЗапросами.Выполнить ИЛИ лОперация = мОперацииСЗапросами.ВыполнитьУдаленно Тогда 
			ПроверитьКоличествоСтрокВРезультатеИЗапуститьВыполнениеЗапроса(лОперация = мОперацииСЗапросами.ВыполнитьУдаленно);
		Иначе
			// #рефакторинг обработать данную ситуацию
		КонецЕсли;
	Иначе
		// #рефакторинг обработать данную ситуацию
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьЗапросИзФормыПродолжение()

&НаКлиенте
Процедура СохранитьЗапросыВФайлПродолжение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Перем лОперация, лТекущийЗапрос;
	
	Если Не ДополнительныеПараметры.Свойство(""Операция"", лОперация) Тогда 
		лОперация = Неопределено;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство(""ТекущийЗапрос"", лТекущийЗапрос) Тогда 
		лТекущийЗапрос = Неопределено;
	КонецЕсли;
	
	Если ВыбранныеФайлы <> Неопределено Тогда 
		
		лПолноеИмяФайла            = ВыбранныеФайлы[0];
		лЛокально                  = Истина;
		лВыгружатьТолькоИзмененные = Ложь;
		лПолучитьРекурсивно        = Истина;
		
		ЗаписьJSON = ПолучитьЗапросыВJSON(лПолноеИмяФайла, лЛокально, лВыгружатьТолькоИзмененные, лТекущийЗапрос, лПолучитьРекурсивно);
		
		Попытка
			ЗаписьJSON.Закрыть();
			Ошибка = Ложь;
		Исключение
			Ошибка = Истина;
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);		
		КонецПопытки; 
		
		Если Не Ошибка Тогда 
			ИмяФайлаСЗапросом = лПолноеИмяФайла;
			
			СписокИзмененныхСтрок.Очистить();
			
			ОбновитьЗаголовок();
			Модифицированность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ФайлНеСохранен = (ВыбранныеФайлы = Неопределено) ИЛИ Ошибка;
	
	Если ФайлНеСохранен Тогда 
		Если лОперация = ""ВыполнитьЗапрос"" Тогда 
			ПоказатьВопрос(Новый ОписаниеОповещения(""ВопросЗапросНеСохранилсяПродолжение"", ЭтаФорма, Новый Структура()), 
				""Запрос не сохранился, продолжить выполнение?"" + Символы.ПС + ""Чтобы не выводился данный вопрос снимите галочку """"Сохранить запрос перед выполнением""""."", РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	Иначе		
		ОбработатьОперациюПослеСохраненияЗапросов(лОперация, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры // СохранитьЗапросыВФайлПродолжение()

&НаКлиенте
Процедура ПоказатьВводСтрокиЗавершение(Строка, ДополнительныеПараметры) Экспорт
	
	Перем лДействие;
	
	Если Строка = Неопределено ИЛИ Не ЗначениеЗаполнено(ДополнительныеПараметры) ИЛИ Не ДополнительныеПараметры.Свойство(""Действие"", лДействие) Тогда 
		Возврат
	КонецЕсли;
	
	лТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	Если лДействие = Константы().УстановитьПараметрУИ Тогда 
		лТекущиеДанные.ЗначениеВФорме = Новый УникальныйИдентификатор(Строка);
	ИначеЕсли лДействие = Константы().УстановитьПараметрСтрока Тогда 
		лТекущиеДанные.ЗначениеВФорме = Строка;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	лТекущиеДанные.Значение = ЗначениеВСтрокуСервер(лТекущиеДанные.ЗначениеВФорме);
	
КонецПроцедуры // ПоказатьВводСтрокиЗавершение()
	
&НаКлиенте
Процедура ПоказатьПредупреждениеЗавершение(ДополнительныеПараметры) Экспорт
КонецПроцедуры // ПоказатьПредупреждениеЗавершение()

Процедура ВыполнитьДействиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда  // отменено пользователем
		// сообщить(""Отмена""); // #рефакторинг реализовать действия при отмене
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СохранитьЗапросыВОблакоПродолжение(Длг, ДополнительныеПараметры) Экспорт
	
	Если ДиалогНеВыбран(Длг) Тогда
		Возврат;
	КонецЕсли;
	
	Если Длг.Тип = мТипыИсточниковДанных.Пакет Тогда 
		лТекущийЗапрос      = Неопределено;
		ЭтоСохранениеПакета = Истина;
	Иначе
		лТекущийЗапрос      = СтрокаСЗапросом(ДополнительныеПараметры.ТекущаяСтрокаДереваЗапросов);
		ЭтоСохранениеПакета = Ложь;
	КонецЕсли;
	
	лИдентификаторСессии       = ДополнительныеПараметры.ИдентификаторСессии;
	лЛокально                  = Ложь;
	лВыгружатьТолькоИзмененные = Ложь;
	лПолучитьРекурсивно        = Длг.ВключатьПодчиненныеЗапросы;
	
	ЗаписьJSON = ПолучитьЗапросыВJSON(Длг.Имя, лЛокально, лВыгружатьТолькоИзмененные, лТекущийЗапрос, лПолучитьРекурсивно);
	
	лДанные = ЗаписьJSON.Закрыть();
	
	Если ЭтоСохранениеПакета Тогда 
		лРезультат  = гСохранитьФайлСЗапросомВОблаке(лИдентификаторСессии, Длг.ИдПакета, Длг.Имя, истина, лДанные); // #рефакторинг добавить использование настройки режима обновления всех записей или только измененных
	Иначе
		лРезультат  = гСохранитьЗапросыВОблаке(лИдентификаторСессии, Длг.ИдПакета, Длг.ИдРодительскогоЗапроса, Длг.ИдЗапроса, Длг.Имя, Длг.ВключатьПодчиненныеЗапросы, лДанные);
	КонецЕсли;
	
	Если Не лРезультат.Статус = ""OK"" Тогда 
		Ошибка = Истина;
		Сообщить(""Ошибка сохранения в облаке: "" + лРезультат.ТекстОшибки);
	Иначе
		Ошибка = Ложь;
		ПоказатьПредупреждение(Новый ОписаниеОповещения(""ПоказатьПредупреждениеЗавершение"", ЭтаФорма), ?(ЭтоСохранениеПакета, ""Запросы выгружены в облако."", ""Текущий запрос выгружен в облако.""), 3);
	КонецЕсли;
	
КонецПроцедуры // СохранитьЗапросыВОблакоПродолжение()

&НаКлиенте
Процедура ДобавитьЗапросИзОблакаПродолжение(Длг, ДополнительныеПараметры) Экспорт
	
	Перем ВключатьПодчиненныеЗапросы;
	
	Если ДиалогНеВыбран(Длг) Тогда
		Возврат;
	КонецЕсли;
	
	// #рефакторинг
	// Необходимо хранить параметры текущего выбранного элемента (пакет, запрос. код)
	// доработать алгоритм открытия этих элементов
	// привести все названия элементов к единым (файл -> пакет )
	
	ИмяФайлаСЗапросом = """";
	
	СохранитьЗначенияПоЗапросу(мТекущаяСтрокаДереваЗапросов);

	лРодительТекущейСтроки = РодительСтрокиСЗапросом(мТекущаяСтрокаДереваЗапросов);
	Если Длг.Тип = мТипыИсточниковДанных.Пакет Тогда 
		
		лВеткаПриемника = ?(лРодительТекущейСтроки = Неопределено, ДеревоЗапросов, лРодительТекущейСтроки).ПолучитьЭлементы().Добавить();
		лВеткаПриемника.Идентификатор = Новый УникальныйИдентификатор;
		лВеткаПриемника.Имя           = Длг.Имя;
	Иначе
		лВеткаПриемника = лРодительТекущейСтроки;
	КонецЕсли;
	
	Если Не Длг.Свойство(""ВключатьПодчиненныеЗапросы"", ВключатьПодчиненныеЗапросы) Тогда 
		ВключатьПодчиненныеЗапросы = Ложь;
	КонецЕсли;
	
	ЗагрузитьЗапросыИзОблака(Длг.идПакета, Длг.идЗапроса, Длг.идКода, ВключатьПодчиненныеЗапросы, лВеткаПриемника)
	
КонецПроцедуры // ДобавитьЗапросИзОблакаПродолжение()

&НаКлиенте
Процедура ОбработкаВыполненияКода(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип(""Структура"") Тогда 
		
		Если Результат.Режим = гРежимыЗакрытияФормыВводаПроизвольногоКода(""Сохранить"") ИЛИ 
			Результат.Режим = гРежимыЗакрытияФормыВводаПроизвольногоКода(""Выполнить"") Тогда 
			
			лСтарыйКод = ИсполняемыйКод.НайтиСтроки(Новый Структура(""ИдентификаторЗапроса"", ИдентификаторЗапроса()));
			Для каждого лСтрокаСоСтарымКодом Из лСтарыйКод Цикл
				ИсполняемыйКод.Удалить(лСтрокаСоСтарымКодом);
			КонецЦикла; 
			
			лНовыйКод = Результат.ИсполняемыйКод;
			Для каждого лСтрокаСНовымКодом Из лНовыйКод Цикл
				лНоваяСтрока = ИсполняемыйКод.Добавить();
				ЗаполнитьЗначенияСвойств(лНоваяСтрока, лСтрокаСНовымКодом);
				лНоваяСтрока.ИдентификаторЗапроса = Результат.ИдентификаторЗапроса;
			КонецЦикла; 
			
			Модифицированность = Истина;
		КонецЕсли;
		
		Если Результат.Режим = гРежимыЗакрытияФормыВводаПроизвольногоКода(""Выполнить"") Тогда 
			
			Если Результат.ВыполнитьНаСервере Тогда 
				ВыполнитьНаСервере(СтрЗаменить(Результат.Текст, ""РезультатЗапроса()"", ""РезультатЗапросаНаСервере()""));
			Иначе
				Попытка
					Выполнить(Результат.Текст);
				Исключение
					Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);		
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте 
Процедура ОткрытьКонструкторЗапросаЗавершение(Текст, ДополнительныеПараметры) Экспорт 
	
	Если ДополнительныеПараметры.СтруктураГраницВыделения <> Неопределено Тогда 
		лГраницыВыделения = ДополнительныеПараметры.СтруктураГраницВыделения;
		ТекущийЭлемент.УстановитьГраницыВыделения(лГраницыВыделения.НачалоСтрока,лГраницыВыделения.КолонкаНач,лГраницыВыделения.СтрокаКон,лГраницыВыделения.КолонкаКон);
	КонецЕсли;
	
	Если Текст <> Неопределено Тогда 
		Если ДополнительныеПараметры.СтруктураГраницВыделения = Неопределено Тогда 
			УстановитьТекущийТекстЗапроса(Текст);
		Иначе
			ТекущийЭлемент.ВыделенныйТекст = Текст;
		КонецЕсли;
	Иначе
		Модифицированность = ДополнительныеПараметры.Модифицированность;
	КонецЕсли; 
	
	Если ДополнительныеПараметры.СтруктураГраницВыделения <> Неопределено Тогда 
		ТекущийЭлемент.УстановитьГраницыВыделения(лГраницыВыделения.НачалоСтрока,лГраницыВыделения.КолонкаНач, лГраницыВыделения.НачалоСтрока + СтрЧислоСтрок(Текст) - 1, СтрДлина(СтрПолучитьСтроку(Текст,СтрЧислоСтрок(Текст))) + 1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияФормыУпрПоиск(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	лИдентификаторСтроки = 0;
	
	ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(""Идентификатор"", лИдентификаторСтроки, ДеревоЗапросов.ПолучитьЭлементы(), РезультатЗакрытия, Ложь);
	
	Элементы.ДеревоЗапросов.ТекущаяСтрока = лИдентификаторСтроки;
	
КонецПроцедуры // ОбработкаЗакрытияФормыУпрПоиск()

&НаКлиенте
Процедура ДиалогВыбораФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    
    лДиалог   = ДополнительныеПараметры.Диалог;
	лОперация = ДополнительныеПараметры.Операция;
    
    Если (ВыбранныеФайлы <> Неопределено) Тогда
		Если лДиалог.Режим = РежимДиалогаВыбораФайла.Сохранение Тогда 
			СохранитьЗапросыВФайлНачало(Ложь, Ложь, Новый Структура(""Операция"", лОперация));
			Если мОперацияПослеСохраненияИзменений <> Неопределено Тогда 
				ВыполнитьОперациюПослеСохраненияИзменений(мОперацияПослеСохраненияИзменений);
			КонецЕсли;
		Иначе
			ЗагрузитьЗапросы(лДиалог.ПолноеИмяФайла, лОперация);
		КонецЕсли;		
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюПослеСохраненияИзменений(Операция)
	
	мОперацияПослеСохраненияИзменений = Неопределено;

	Если Операция = мОперацииСЗапросами.Открыть Тогда 
		ПоказатьДиалогВыбораФайла(Операция);
	ИначеЕсли Операция = мОперацииСЗапросами.Новый Тогда 
		НовыйФайлЗапросовДействие();
	КонецЕсли;
КонецПроцедуры // ВыполнитьОперациюПослеСохраненияИзменений()

&НаКлиенте
Процедура ПослеВыбораЭлементаИзСпискаЗначений(ВыбранноеЗначение, Параметры) Экспорт
	// ПРОЦЕДУРА ДУБЛЬ(!!!)
	
	лДанныеДляПодбораКП = Параметры.ДанныеДляПодбораКП;
	лСтруктураКоординат = Параметры.СтруктураКоординат;
	лПолеТекстаЗапроса  = Параметры.ПолеТекстаЗапроса;
	лЭтоУсловие         = (Параметры.ДанныеДляПодбораКП.РежимКП.Режим = ""Условия"");
	
	Если ВыбранноеЗначение <> Неопределено Тогда 
		лВременныйТД = Новый ТекстовыйДокумент;
		Если ТипЗнч(ВыбранноеЗначение) = Тип(""СписокЗначений"") Тогда 
			лРезультатПодстановкиКП = """";
			Для каждого ЭлементСписка Из ВыбранноеЗначение Цикл
				Если Не ЭлементСписка.Пометка Тогда 
					Продолжить;
				КонецЕсли;
				Если лЭтоУсловие Тогда 
					лРезультатПодстановкиКП = лРезультатПодстановкиКП + ?(лРезультатПодстановкиКП = """", """", "" И "") + ЭлементСписка.Значение + "" = &"" + ЭлементСписка.Значение;
				Иначе
					лРезультатПодстановкиКП = лРезультатПодстановкиКП + ?(лРезультатПодстановкиКП = """", """", "", "") + ЭлементСписка.Значение;
				КонецЕсли;
			КонецЦикла; 
		Иначе
			лРезультатПодстановкиКП = ВыбранноеЗначение.Значение
		КонецЕсли;
		лВременныйТД.УстановитьТекст(лРезультатПодстановкиКП);
		
		лТекстЗапроса = Лев(лДанныеДляПодбораКП.ТекстЗапросаДоКурсора, СтрДлина(лДанныеДляПодбораКП.ТекстЗапросаДоКурсора) - СтрДлина(лДанныеДляПодбораКП.СловоДоКурсора)) + 
			лРезультатПодстановкиКП + Сред(лДанныеДляПодбораКП.ТекстЗапросаПослеКурсора, СтрДлина(лДанныеДляПодбораКП.СловоПослеКурсора) + 1);
			
		дельта_x1 = СтрДлина(лВременныйТД.ПолучитьСтроку(лВременныйТД.КоличествоСтрок())) - 
			?(лВременныйТД.КоличествоСтрок() > 1, 0, СтрДлина(лДанныеДляПодбораКП.СловоДоКурсора));
			
		лСтруктураВыбора = Новый Структура();
		лСтруктураВыбора.Вставить(""ТекстЗапроса"", лТекстЗапроса);
		лСтруктураВыбора.Вставить(""Режим""       , лДанныеДляПодбораКП.РежимКП.Режим);
		лСтруктураВыбора.Вставить(""дельта_x""    , СтрДлина(лДанныеДляПодбораКП.СловоДоКурсора));
		лСтруктураВыбора.Вставить(""дельта_y""    , 0);
		лСтруктураВыбора.Вставить(""дельта_x1""   , дельта_x1);
		лСтруктураВыбора.Вставить(""дельта_y1""   , лВременныйТД.КоличествоСтрок() - 1);			
		
	КонецЕсли;
	
	Если лСтруктураВыбора <> Неопределено Тогда 
		
		УстановитьТекущийТекстЗапроса(лСтруктураВыбора.ТекстЗапроса);
		
		Если ПродолжитьФормироватьКПНаСервере(лСтруктураВыбора.Режим, лРезультатПодстановкиКП) Тогда
			лПолеТекстаЗапроса.УстановитьГраницыВыделения(лСтруктураКоординат.НачалоСтрока + лСтруктураВыбора.дельта_y1, лСтруктураКоординат.КолонкаНач + лСтруктураВыбора.дельта_x1,
				лСтруктураКоординат.НачалоСтрока + лСтруктураВыбора.дельта_y1, лСтруктураКоординат.КолонкаНач + лСтруктураВыбора.дельта_x1);
			ОткрытьМенюАвтоподстановки(лПолеТекстаЗапроса)
		Иначе
			лПолеТекстаЗапроса.УстановитьГраницыВыделения(лСтруктураКоординат.НачалоСтрока - лСтруктураВыбора.дельта_y, лСтруктураКоординат.КолонкаНач - лСтруктураВыбора.дельта_x, 
				лСтруктураКоординат.НачалоСтрока + лСтруктураВыбора.дельта_y1, лСтруктураКоординат.КолонкаНач + лСтруктураВыбора.дельта_x1);			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // ПослеВыбораЭлементаИзСпискаЗначений()

&НаКлиенте
Процедура ЗавершениеВыбораТипаПараметра(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ИнициализацияТипаИЗначенияПараметраПоИдентиифкатору(Элементы.ПараметрыТекущегоЗапроса.ТекущаяСтрока, ЭлементСпискаВСтруктуру(ВыбранныйЭлемент));
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры // ЗавершениеВыбораТипаПараметра()

&НаКлиенте
Процедура ОбновитьПараметрПослеРедактированияВоВнешнейФорме(Параметр)
	ТекущиеДанные                = Элементы.ПараметрыТекущегоЗапроса.ТекущиеДанные;	
	ТекущиеДанные.Значение       = Параметр;	
	ТекущиеДанные.ЗначениеВФорме = ФормированиеПредставленияЗначения(ТекущиеДанные.Значение);
КонецПроцедуры // ОбновитьПараметрПослеРедактированияВоВнешнейФорме()

&НаКлиенте
Процедура ЗавершениеВыбораКолонки(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Если ДополнительныеПараметры.Действие = Константы().ДобавитьПараметрИзБуфера Тогда 
			
			ПараметрыВопроса = Новый Структура();
			ПараметрыВопроса.Вставить(""Данные""          , ДополнительныеПараметры.Данные);
			ПараметрыВопроса.Вставить(""ВыбранныйЭлемент"", ВыбранныйЭлемент);
			
			ПоказатьВопрос(Новый ОписаниеОповещения(""ПослеЗакрытияВопросаПропуститьПервуюСтрокуТаблицы"", ЭтотОбъект, ПараметрыВопроса), 
				""Пропустить первую строку таблицы?"", 
				РежимДиалогаВопрос.ДаНет,,  
				КодВозвратаДиалога.Да);
			
		ИначеЕсли ДополнительныеПараметры.Действие = Константы().ВыгрузитьТаблицуРезультатаВПараметр Тогда 
			
			Если ВыбранныйЭлемент.Значение = Константы().ВсеКолонки Тогда 
				лИмяКолонки = Неопределено;
			Иначе
				лИмяКолонки = ВыбранныйЭлемент.Значение;
			КонецЕсли;
			ОбработкаДействияВыгрузитьВПараметрНаСервере(лИмяКолонки, ""ИзТаблицыРезультата"");
			
		ИначеЕсли ДополнительныеПараметры.Действие = Константы().ДействияСРезультатомЗапроса Тогда 
			
			лПараметры = ДополнительныеПараметры.ПараметрыДействия;
			
			Если лПараметры.Действие = Константы().УстановитьПометкуУдаления Тогда 
				лТекстОписаниеДействия = ?(лПараметры.ПометкаУдаления, ""Пометка удаления документа:"", ""Снятие пометки удаления:"");
			ИначеЕсли лПараметры.Действие = Константы().Провести Тогда 
				лТекстОписаниеДействия = ?(лПараметры.Провести, ""Проведение документа:"", ""Отмена проведения документа:"");
			Иначе
				лТекстСообщения = ""Операция не выполнена. Не определен алгоритм для действия [%Действие%]"";
				лТекстСообщения = СтрЗаменить(лТекстСообщения, ""%Действие%"", лПараметры.Действие);
				ПоказатьСообщениеПользователю(лТекстСообщения, Объект, УникальныйИдентификатор);
				Возврат;
			КонецЕсли;
			
			лИмяКолонки = ВыбранныйЭлемент.Значение;
			
			ПоказатьСообщениеПользователю(""---------------------------------------------------------------------
				|"" + лТекстОписаниеДействия + "" (колонка '"" + лИмяКолонки + ""'): начало в "" + ТекущаяДата(), Объект, УникальныйИдентификатор);
			
			лПараметры.Вставить(""ИмяКолонки"", лИмяКолонки);
			ВыполнитьДействияСРезультатомЗапроса(АдресРезультата, лПараметры);
			
			ПоказатьСообщениеПользователю(лТекстОписаниеДействия + "" (колонка '"" + лИмяКолонки + ""'): окончание в "" + ТекущаяДата() + ""
			|---------------------------------------------------------------------"", Объект, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ЗавершениеВыбораКолонки()

#КонецОбласти


#Область Процедуры_и_функции_работы_с_табличным_полем_результата_запроса

Функция ИмяРеквизитаРезультатЗапроса() Экспорт
	
	//Если СпособВыгрузкиДерево() Тогда 
	//	ОкончаниеИмениРеквизита = ""Дерево"";
	//Иначе
	//	ОкончаниеИмениРеквизита = ""Таблица"";
	//КонецЕсли;	
	//
	//Возврат мПрефиксИмениРеквизитаСРезультатомЗапроса + ОкончаниеИмениРеквизита;
	
КонецФункции // ИмяРеквизитаРезультатЗапроса()

&НаКлиенте
Функция РезультатЗапроса() Экспорт
	
	Возврат Вычислить(СвойстваРеквизитаРезультатЗапроса.ИмяРеквизита);
	
КонецФункции

&НаКлиенте
Функция РазмерРезультатаЗапроса() Экспорт
	
	лРезультатЗапроса = РезультатЗапроса();
	Если РезультатаЗапросаЭтоДерево() Тогда 
		Возврат лРезультатЗапроса.ПолучитьЭлементы().Количество();
	Иначе
		Возврат лРезультатЗапроса.Количество();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция РезультатаЗапросаЭтоДерево() Экспорт
	
	Возврат ТипЗнч(РезультатЗапроса()) = Тип(""ДанныеФормыДерево"");
	
КонецФункции

&НаКлиенте
Процедура ОчиститьРезультатЗапросаНаКлиенте()
	Если РезультатаЗапросаЭтоДерево() Тогда 
		РезультатЗапроса().ПолучитьЭлементы().Очистить();
	Иначе
		РезультатЗапроса().Очистить();
	КонецЕсли;
	ОбновитьСостояниеРезультатаЗапроса();
КонецПроцедуры // ОчиститьРезультатЗапросаНаКлиенте()

Функция РезультатЗапросаНаСервере() Экспорт
	
	Возврат Вычислить(?(ЭтотОбъектДоступен, ""ЭтотОбъект."", """") + СвойстваРеквизитаРезультатЗапроса.ИмяРеквизита);
	
КонецФункции // РезультатЗапросаНаСервере()

Процедура УстановитьРезультатЗапроса(ДанныеЗапроса)
	
	//Выполнить(ИмяРеквизитаРезультатЗапроса() + "" = ДанныеЗапроса.Скопировать();"");
	//
	//лЭлементФормыСРезультатомЗапроса = ЭлементыФормы.Найти(мИмяЭлементаФормыСРезультатомЗапроса);
	//лИмяРеквизитаСДаннымиРезультатаЗапроса = ИмяРеквизитаРезультатЗапроса();
	//Если лЭлементФормыСРезультатомЗапроса.Данные <> лИмяРеквизитаСДаннымиРезультатаЗапроса Тогда 
	//	лЭлементФормыСРезультатомЗапроса.Данные = лИмяРеквизитаСДаннымиРезультатаЗапроса;
	//КонецЕсли;
	
КонецПроцедуры // УстановитьРезультатЗапроса()

#КонецОбласти

#Область Проверки

&НаКлиенте
Процедура ПроверитьКоличествоСтрокВРезультатеИЗапуститьВыполнениеЗапроса(Удаленно = Ложь)
	
	Если РазмерРезультатаЗапроса() < МногоДанныхВРезультатеЗапроса() Тогда 
		ЗапуститьВыполнениеЗапроса(Удаленно);
	Иначе 
		лПараметрыВопроса = Новый Структура;
		лПараметрыВопроса.Вставить(""Операция"", мОперацииСЗапросами.Выполнить);
		лПараметрыВопроса.Вставить(""Удаленно"", Удаленно);
		СпроситьОчиститьРезультатЗапросаЕслиМногоДанных(лПараметрыВопроса)
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКоличествоСтрокВРезультатеИЗапуститьВыполнениеЗапроса()

#КонецОбласти


#Область ОбработчикиПрограммноДобавленныхЭлементов

&НаКлиенте
Процедура ВыборМенюИнформация(Кнопка, ДополнительныеПараметры) Экспорт
	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗапуститьПриложение(гНажатиеНаКнопкуВыборМенюИнформацияНаСервере(Кнопка.Значение, Истина));
КонецПроцедуры // ВыборМенюИнформация()

&НаКлиенте
Процедура ВыборМенюДействие(Кнопка, ДополнительныеПараметры) Экспорт
	
	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ВыборМенюДействие()

&НаКлиенте
Процедура МенюИнформация(Команда)
	
	лПутькКартинке = гЗначениеИзСеансовыхДанных(""ПутькКартинкам"", СеансовыеДанные);
	
	Оповещение = Новый ОписаниеОповещения(""ВыборМенюИнформация"", Вычислить(ЭтотОбъектФорма)); 
	ПоказатьВыборИзМеню(Оповещение, ПолучитьМенюНаСервереСписком(""Информация"", лПутькКартинке));
	
КонецПроцедуры // МенюИнформация()

&НаКлиенте
Процедура МенюДополнительно(Команда)
	
	лПутькКартинке = гЗначениеИзСеансовыхДанных(""ПутькКартинкам"", СеансовыеДанные); //#рефакторинг реализовать получение картнки в виде метода
	
	Оповещение = Новый ОписаниеОповещения(""ВыборМенюДействие"", Вычислить(ЭтотОбъектФорма)); 
	ПоказатьВыборИзМеню(Оповещение, ПолучитьМенюНаСервереСписком(""Дополнительно"", лПутькКартинке));	
	
КонецПроцедуры // МенюДополнительно()

&НаКлиенте
Процедура КнопкаМенюСервисЗагрузитьИзБуфераВТаблицуСРезультатом(Команда)
	
	Если ПроверитьРезультатЭтоДерево() Тогда 
		Возврат;
	КонецЕсли;
	
	лДанныеБуфера = ПодготовитьДанныеИзБуфера();
	Если лДанныеБуфера.КоличествоКолонок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	АдресРезультата              = ПоместитьРезультатВХранилищеНаСервере(РезультатЗапроса());
	лКоличествоКолонокЭлементаТЗ = ПолучитьКоличествоКолонокРезультатаНаСервере(АдресРезультата);

	Если лДанныеБуфера.КоличествоКолонок > лКоличествоКолонокЭлементаТЗ Тогда 
		ТекстВопроса  = НСтр(""ru = 'Добавить колонки в таблице?'"");
		КнопкиВопроса = РежимДиалогаВопрос.ДаНетОтмена;
		ПараметрыВопроса = Новый Структура;
		ПараметрыВопроса.Вставить(""ИдВопроса""                     , ""ДобавитьКолонкиВТаблице"");
		ПараметрыВопроса.Вставить(""МассивКолонокСтрокиТаблицы""    , лДанныеБуфера.МассивКолонок);
		ПараметрыВопроса.Вставить(""Текст""                         , лДанныеБуфера.Текст);
		ПараметрыВопроса.Вставить(""Разделитель""                   , лДанныеБуфера.Разделитель);
		ПоказатьВопрос(Новый ОписаниеОповещения(""ВопросЗавершение"", ЭтаФорма, ПараметрыВопроса), ТекстВопроса, КнопкиВопроса, 10, КодВозвратаДиалога.Нет, ""Вопрос"", КодВозвратаДиалога.Нет);
	Иначе
		ТекстВТаблицуНаСервере(лДанныеБуфера.МассивКолонок, лДанныеБуфера.Текст, Ложь, лДанныеБуфера.Разделитель);
		ОбновитьСостояниеРезультатаЗапроса();
	КонецЕсли;

КонецПроцедуры // КнопкаМенюСервисЗагрузитьИзБуфераВТаблицуСРезультатом()

&НаКлиенте
Процедура КнопкаМенюСервисВыполнитьКод(Команда)
	ОбработкаДействияВыполнитьКод();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМенюСервисВыгрузитьРезультатЗапросаВПараметр(Команда)
	ОбработкаДействияВыгрузитьВПараметр();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМенюСервисВыгрузкаВDBF(Команда)
	
	Если ПроверитьРезультатЭтоДерево() Тогда 
		Возврат;
	КонецЕсли;
	
	ВыгрузитьРезультатЗапросаВDBF()
	
КонецПроцедуры // КнопкаМенюСервисВыгрузкаВDBF()

&НаКлиенте
Процедура КнопкаМенюСервисВыгрузкаВXML(Команда)
	
	Если ПроверитьРезультатЭтоДерево() Тогда 
		Возврат;
	КонецЕсли;
	
	ВыгрузитьРезультатЗапросаВXML()
	
КонецПроцедуры // КнопкаМенюСервисВыгрузкаВXML()

&НаКлиенте
Процедура КнопкаМенюСервисПровестиДокументы(Команда)
	
	Если ПроверитьРезультатЭтоДерево() Тогда 
		Возврат;
	КонецЕсли;
	
	лПараметры  = Новый Структура();
	лПараметры.Вставить(""Действие"", Константы().Провести);
	лПараметры.Вставить(""Провести"", Истина);
	
	ВыбратьКолонкуДляДействияСРезультатомЗапроса(лПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМенюСервисОтменитьПроведение(Команда)
	
	Если ПроверитьРезультатЭтоДерево() Тогда 
		Возврат;
	КонецЕсли;
	
	лПараметры  = Новый Структура();
	лПараметры.Вставить(""Действие"", Константы().Провести);
	лПараметры.Вставить(""Провести"", Ложь);
	
	ВыбратьКолонкуДляДействияСРезультатомЗапроса(лПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМенюСервисУстановитьПометкуУдаления(Команда)
	
	Если ПроверитьРезультатЭтоДерево() Тогда 
		Возврат;
	КонецЕсли;
	
	лПараметры  = Новый Структура();
	лПараметры.Вставить(""Действие""       , Константы().УстановитьПометкуУдаления);
	лПараметры.Вставить(""ПометкаУдаления"", Истина);
	
	ВыбратьКолонкуДляДействияСРезультатомЗапроса(лПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМенюСервисСнятьПометкуУдаления(Команда)
	
	Если ПроверитьРезультатЭтоДерево() Тогда 
		Возврат;
	КонецЕсли;
	
	лПараметры  = Новый Структура();
	лПараметры.Вставить(""Действие""       , Константы().УстановитьПометкуУдаления);
	лПараметры.Вставить(""ПометкаУдаления"", Ложь);
	
	ВыбратьКолонкуДляДействияСРезультатомЗапроса(лПараметры);
	
КонецПроцедуры

// Меню: ""ПреобразованияКодаВЗапросИОбратно""

&НаКлиенте
Процедура КнопкаМенюВставитьЗапросИзКода1СПолучитьЗапросСОбработкой(Команда)
	ОперацииВставитьЗапросИзКода1С(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМенюВставитьЗапросИзКода1СПолучитьЗапросБезОбработки(Команда)
	ОперацииВставитьЗапросИзКода1С(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМенюПолучениеКода1СПоЗапросуПолучитьКод1ССВыборкой(Команда)
	ОперацииПолучитьКод1СПоЗапросу(0)
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМенюПолучениеКода1СПоЗапросуПолучитьКод1ССТаблицейЗначений(Команда)
	ОперацииПолучитьКод1СПоЗапросу(1)
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМенюПолучениеКода1СПоЗапросуПолучитьКод1ССОбработкойРезультата(Команда)
	ОперацииПолучитьКод1СПоЗапросу(2)
КонецПроцедуры

&НаКлиенте
Процедура КнопкаМенюДополнительноПоиск(Команда)
	ОповещениеОЗакрытииФормыУпрПоиск = Новый ОписаниеОповещения(""ОбработкаЗакрытияФормыУпрПоиск"", Вычислить(ЭтотОбъектФорма));
	ОткрытьФорму(""ВнешняяОбработка.КонсольЗапросов.Форма.ФормаУпрПоиск"",, Вычислить(ЭтотОбъектФорма),,,, ОповещениеОЗакрытииФормыУпрПоиск);
КонецПроцедуры // ДополнительноПоиск()

Функция СписокОбъектовМетаданныхИзТекстаСервере(ТекстЗапроса)
	// #рефакторинг ошибка возврата менеджера, для упр форм необходимо возвращать в другом виде
	// возврат ОбъектОбработки().гСписокОбъектовМетаданныхИзТекста(ТекстЗапроса);
КонецФункции // СписокОбъектовМетаданныхИзТекстаСервере()

&НаКлиенте
Процедура ДополнительноОткрытьФормуСпискаМетаданногоИзЗапроса(Команда)
	// #рефакторинг временный алгоритм. Необходимо сделать универсальный для других объектов метаданных!!!!

	// списокОбъектовМетаданных = СписокОбъектовМетаданныхИзТекстаСервере(ПолучитьУстановитьТекущийТекстЗапроса().ТекстЗапроса);
	//
	// если СписокОбъектовМетаданных.Количество() > 0 Тогда 
	//	ВыбЗначениеМетаданного = СписокОбъектовМетаданных.ВыбратьЭлемент(""Выберите объект для открытия формы списка."");
	//	Если ВыбЗначениеМетаданного <> Неопределено Тогда 
	//		ВыбЗначениеМетаданного.Значение.ПолучитьФормуСписка().Открыть();
	//	КонецЕсли;
	// иначе
	//	ПоказатьПредупреждение(Новый ОписаниеОповещения(""ПоказатьПредупреждениеЗавершение"", ЭтаФорма), ""Не найдены метаданные в запросе."");
	// конецЕсли;
КонецПроцедуры // ДополнительноОткрытьФормуСпискаМетаданногоИзЗапроса()

#Область ПодменюВременныеТаблицы

&НаКлиенте
Процедура КнопкаМенюПодменюВременныеТаблицыПоказатьВременнуюТаблицу(Команда)
	ОткрытьФормуСТаблицей(СтрЗаменить(Команда.Имя, гСвойстваПунктаМенюПоказатьВременнуюТаблицу().ИмяКорня, """"), АдресСоответствияВременныхТаблиц);
КонецПроцедуры // КнопкаМенюПодменюВременныеТаблицыПоказатьВременнуюТаблицу()

&НаКлиенте
Процедура КнопкаМенюПодменюВременныеТаблицыПоказатьВыделеннуюВременнуюТаблицу(Команда)
	
	ПоказатьВыделеннуюТаблицу(Истина);
	
КонецПроцедуры // КнопкаМенюПодменюВременныеТаблицыПоказатьВыделеннуюВременнуюТаблицу()

&НаКлиенте
Процедура КнопкаМенюПодменюВременныеТаблицыПерейтиКОписаниюВременнойТаблицы(Команда)

	ПерейтиКОписаниюТаблицы(Истина);
	
КонецПроцедуры // КнопкаМенюПодменюВременныеТаблицыПерейтиКОписаниюВременнойТаблицы()

#КонецОбласти

#Область ПодменюТаблицыПакета

&НаКлиенте
Процедура КнопкаМенюПодменюТаблицыПакетаПоказатьВременнуюТаблицу(Команда)
	ОткрытьФормуСТаблицей(СтрЗаменить(Команда.Имя, гСвойстваПунктаМенюПоказатьТаблицуПакета().ИмяКорня, """"), АдресСоответствияТаблицПакета);
КонецПроцедуры // КнопкаМенюПодменюТаблицыПакетаПоказатьВременнуюТаблицу()

&НаКлиенте
Процедура КнопкаМенюПодменюПодменюТаблицыПакетаПоказатьВыделеннуюТаблицуПакета(Команда)

	ПоказатьВыделеннуюТаблицу(Ложь);
	
КонецПроцедуры // КнопкаМенюПодменюПодменюТаблицыПакетаПоказатьВыделеннуюТаблицуПакета()

&НаКлиенте
Процедура КнопкаМенюПодменюТаблицыПакетаПерейтиКОписаниюТаблицыПакета(Команда)

	ПерейтиКОписаниюТаблицы(Ложь);
	
КонецПроцедуры // КнопкаМенюПодменюТаблицыПакетаПерейтиКОписаниюТаблицыПакета()

#КонецОбласти


#КонецОбласти 

#Область КонтекстнаяПодсказка

Функция ПродолжитьФормироватьКПНаСервере(Режим, ВыбранноеЗначение)
	Возврат ОбъектОбработки().гПродолжитьФормироватьКП(Режим, ВыбранноеЗначение)
КонецФункции

&НаКлиенте
// ПРОЦЕДУРА ДУБЛЬ(!!!)
Функция гПолучитьГраницыВыделенияПоляФормы(ПолеФормы)
	
	НачалоСтрока = 1;
	КолонкаНач	= 1;              
	СтрокаКон   = 1;
	КолонкаКон	= 1;
	ПолеФормы.ПолучитьГраницыВыделения(НачалоСтрока, КолонкаНач, СтрокаКон, КолонкаКон);
	
	Результат = Новый Структура();
	Результат.Вставить(""НачалоСтрока"", НачалоСтрока);
	Результат.Вставить(""КолонкаНач""  , КолонкаНач);
	Результат.Вставить(""СтрокаКон""   , СтрокаКон);
	Результат.Вставить(""КолонкаКон""  , КолонкаКон);	
	
	Возврат Результат;
	
КонецФункции // гПолучитьГраницыВыделенияПоляФормы()

&НаКлиенте
// ПРОЦЕДУРА ДУБЛЬ(!!!)
Функция ПолучитьПозициюКурсораВТексте(ПолеФормыСТекстом, СтруктураКоординат)
	
	// выделяем текст от начала, до текущего
	ПолеФормыСТекстом.УстановитьГраницыВыделения(1, 1, СтруктураКоординат.СтрокаКон, СтруктураКоординат.КолонкаКон);
	
	Результат = СтрДлина(ПолеФормыСТекстом.ВыделенныйТекст);

	// возвращаем исходное выделение
	ПолеФормыСТекстом.УстановитьГраницыВыделения(СтруктураКоординат.НачалоСтрока, СтруктураКоординат.КолонкаНач, СтруктураКоординат.СтрокаКон, СтруктураКоординат.КолонкаКон);
	
	Возврат Результат
	
КонецФункции // ПолучитьПозициюКурсораВТексте()

// пРОЦЕДУРА ДУБЛЬ(!!!)
&НаКлиенте
Функция гИнициализацияVBScript()
	
	Если RegExp <> Неопределено Тогда 
		Возврат Истина
	КонецЕсли;
	
	Попытка
		RegExp = Новый COMОбъект(""VBScript.RegExp"");
	Исключение
		RegExp = Неопределено;
		Сообщить(""Ошибка инициализации VBScript.RegExp."", СтатусСообщения.Важное);
		Возврат False;
	КонецПопытки;
	
	RegExp.Multiline=False;
	RegExp.Global=True;
	RegExp.IgnoreCase=True;
	
	Возврат True;
	
КонецФункции // гИнициализацияVBScript

Функция ПолучитьДанныеДляПодбораКПНаСервере(ТекстЗапроса, лПозицияКурсораВТексте)
	
	лПутькКартинке = гЗначениеИзСеансовыхДанных(""ПутькКартинкам"", СеансовыеДанные);
	
	Результат = ОбъектОбработки().гПолучитьДанныеДляПодбораКП(ТекстЗапроса, лПозицияКурсораВТексте, 
		лПутькКартинке, СеансовыеДанные); // #рефакторинг попытаться уйти от серверного контекстного вызова
	
	Возврат Результат
	
КонецФункции


#КонецОбласти


#Область ВыводСообщений

Процедура мПоказатьОшибкуНаСервере(ТекстСообщения) Экспорт
	ВызватьИсключение ТекстСообщения;
КонецПроцедуры // мПоказатьОшибкуНаСервере()

&НаСервереБезКонтекста
Процедура гВывестиОшибкуВыполненияКода(ТекстОшибки, КодДляВыполнения)
	ОбъектОбработки().гВывестиОшибкуВыполненияКода(ТекстОшибки, КодДляВыполнения);
КонецПроцедуры

#КонецОбласти

#Область РаботаСИнтерфейсом

&НаКлиенте
Функция НеУтвердительныйОтвет(РезультатВопроса)
	Возврат РезультатВопроса = Неопределено ИЛИ РезультатВопроса = КодВозвратаДиалога.Отмена ИЛИ 
		РезультатВопроса = КодВозвратаДиалога.Таймаут;
КонецФункции // ДиалогНеВыбран()

&НаКлиенте
Функция ДиалогНеВыбран(Результат)
	Возврат НеУтвердительныйОтвет(Результат) ИЛИ Не Результат.Выбран;
КонецФункции // ДиалогНеВыбран()


&НаКлиенте
Функция ПроверитьРезультатЭтоДерево()
	
	Если РезультатЗапросаВДерево Тогда 
		ПоказатьПредупреждение(Новый ОписаниеОповещения(""ПоказатьПредупреждениеЗавершение"", Вычислить(ЭтотОбъектФорма)), ""Функция не доступна при выгрузке результата запроса в дерево значений."");
	КонецЕсли;
	
	Возврат РезультатЗапросаВДерево;
	
КонецФункции // ПроверитьРезультатЭтоДерево()

&НаКлиенте
Процедура ВывестиПозициюКурсора()
	
	Если АвтоопределениеПозицииКурсора Тогда 
		СтруктураВыделенногоТекста = ПолучитьСтруктуруВыделенногоТекста();
		лНовыйЗаголовок = ""Строка: "" + СтруктураВыделенногоТекста.КонецСтроки + "" Кол: "" + СтруктураВыделенногоТекста.КонецКолонки;
		ПодключитьОбработчикОжидания(""ВывестиПозициюКурсора"", 1);
	Иначе
		лНовыйЗаголовок = ""Определять позицию курсора"";
		ОтключитьОбработчикОжидания(""ВывестиПозициюКурсора"");
	КонецЕсли;
	
	Если Элементы.ФормаКнопкаПозицияКурсора.Заголовок <> лНовыйЗаголовок Тогда 
		Элементы.ФормаКнопкаПозицияКурсора.Заголовок = лНовыйЗаголовок;
	КонецЕсли;
	
КонецПроцедуры
	
// ДУБЛЬ процедуры из формы ФормаУпр
//
&НаКлиенте
Функция ПолучитьСтруктуруВыделенногоТекста()

	Перем НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки;
	
	ЭлементТекстТекущегоЗапроса().ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	
	НачалоСтрокиКомментария = НачалоСтроки;
	
	Если КонецСтроки > НачалоСтроки И КонецКолонки = 1 Тогда 
		КонецСтрокиКомментария = КонецСтроки;
	Иначе
		КонецСтрокиКомментария = КонецСтроки + 1;
	КонецЕсли;
	
	НачалоКолонкиКомментария = 1;
	КонецКолонкиКомментария  = 1;
	
	Результат = Новый Структура();
	Результат.Вставить(""НачалоСтроки""            , НачалоСтроки);
	Результат.Вставить(""НачалоКолонки""           , НачалоКолонки);
	Результат.Вставить(""КонецСтроки""             , КонецСтроки);
	Результат.Вставить(""КонецКолонки""            , КонецКолонки);
	Результат.Вставить(""НачалоСтрокиКомментария"" , НачалоСтрокиКомментария);
	Результат.Вставить(""НачалоКолонкиКомментария"", НачалоКолонкиКомментария);
	Результат.Вставить(""КонецСтрокиКомментария""  , КонецСтрокиКомментария);
	Результат.Вставить(""КонецКолонкиКомментария"" , КонецКолонкиКомментария);	
	
	Возврат Результат;

КонецФункции // ПолучитьСтруктуруВыделенногоТекста()

&НаКлиенте
Процедура ОтобразитьДеревоЗапросов(НоваяВидимость)
	
	ОформитьНажатиеКнопки(""ПоказатьДеревоЗапросов"", НоваяВидимость);
	
	Если НоваяВидимость <> мДеревоЗапросовВидимость Тогда 
		
		// синхронизироватьДанныеЗапросаВЭлементахФормы();
		
		Элементы.ДеревоЗапросов.Видимость = НоваяВидимость;
		мДеревоЗапросовВидимость = НоваяВидимость;
	КонецЕсли;
	
	Если мДеревоЗапросовВидимость Тогда 
		Элементы.ПоказатьДеревоЗапросов.РасширеннаяПодсказка.Заголовок = ""Скрыть дерево запросов"";
	Иначе
		Элементы.ПоказатьДеревоЗапросов.РасширеннаяПодсказка.Заголовок = ""Показать дерево запросов"";
	КонецЕсли;
	
	Если Элементы.ДеревоЗапросов.ТекущаяСтрока = Неопределено Тогда
		Элементы.ДеревоЗапросов.ТекущаяСтрока = ДеревоЗапросов.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры // ОтобразитьДеревоЗапросов()

&НаКлиенте
Процедура РасшифроватьСпецПоле(ИмяПоля, ИдентификаторСтроки, ТипПоля)

	лРежимОткрытияФормы = гРежимыОткрытияФормы().Расшифровка;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить(""РежимОткрытияФормы"" , лРежимОткрытияФормы);
	ПараметрыФормы.Вставить(""ИдентификаторСтроки"", ИдентификаторСтроки);
	ПараметрыФормы.Вставить(""ИмяПоля""            , ИмяПоля);
	ПараметрыФормы.Вставить(""ИмяСпецПоля""        , ПолучитьИмяСпецПоля(ИмяПоля));
	ПараметрыФормы.Вставить(""Заголовок""          , ""Расшифровка поля <"" + ПараметрыФормы.ИмяСпецПоля + ""> в строке ["" + ПараметрыФормы.ИдентификаторСтроки + ""].""); // #рефакторинг переделать на формирование строки по шаблону как в БСП
	
	ПараметрыФормы.Вставить(""АдресТаблицыЗначений"", АдресРезультата);
	
	Если ТипПоля = ""Таблица значений"" Тогда 
		ОткрытьФорму(СтрЗаменить(ИмяФормы, "".ФормаУпр"", """") + "".ФормаУпрПустая"", ПараметрыФормы, ЭтаФорма);			
	ИначеЕсли ТипПоля = ""Тип"" Тогда 
		ПоказатьВводСтроки(Новый ОписаниеОповещения(""ПоказатьВводСтрокиЗавершение"", ЭтаФорма), ПолучитьПолноеПредставлениеТипаИзРасшифровкиНаСервере(ПараметрыФормы));
	Иначе
		ПоказатьПредупреждение(Новый ОписаниеОповещения(""ПоказатьПредупреждениеЗавершение"", ЭтаФорма), ""Для типа """""" + ТипПоля + """""" расшифровка на текущий момент не реализована."", , ""Информация"");
	КонецЕсли;
	
КонецПроцедуры // РасшифроватьСпецПоле()

&НаКлиенте
Процедура ОформитьНажатиеКнопки(ИмяРеквизитаКнопки, Нажата) // #рефакторинг проверить необходимость данной процедуры
	
	// если Нажата Тогда 
	//	Элементы[ИмяРеквизитаКнопки].ЦветРамки = Новый Цвет(0,0,255);
	//	Элементы.ДекорацияПоказатьДеревоЗапросов.Картинка = ПолучитьКартинкуНаСервере(""МенюСкрыть"");
	// иначе
	//	Элементы[ИмяРеквизитаКнопки].ЦветРамки = мЦветСтиляЦветРамки;
	//	Элементы.ДекорацияПоказатьДеревоЗапросов.Картинка = ПолучитьКартинкуНаСервере(""МенюПоказать"");
	// конецЕсли;

КонецПроцедуры // ОформитьНажатиеКнопки()

Процедура СоздатьРеквизитCРезультатомЗапроса(АдресРезультата)
	
	// ПРОЦЕДУРА ДУБЛЬ(!!!)
	
	лОбработкаОбъект  = ОбъектОбработки();
	лРеквизитыТаблицы = лОбработкаОбъект.гПолучитьМассивРеквизитовДляДобавленияТаблицыНаФорму(УникальныйИдентификатор, АдресРезультата, АдресСпискаСпецПолей, РезультатЗапросаВДерево);
	
	// изменяем структуру реквизитов формы
	Если Элементы.Найти(лРеквизитыТаблицы.МассивРеквизитовУдаления[0]) <> Неопределено Тогда 
		ИзменитьРеквизиты(, лРеквизитыТаблицы.МассивРеквизитовУдаления);
	КонецЕсли;
	
	// раздельно добавляем и удаляем, потомучто при удалении отсутствующего реквизита происходит исключение
	Попытка
		ИзменитьРеквизиты(лРеквизитыТаблицы.МассивРеквизитов, );
	Исключение
		мПоказатьОшибкуНаСервере(ОписаниеОшибки());
	КонецПопытки;
	
	лРезультат = ПолучитьТаблицуРезультатаНаСервере(АдресРезультата).Скопировать();
	
	ЗначениеВРеквизитФормы(лРезультат, СвойстваРеквизитаРезультатЗапроса.ИмяРеквизита);
	//ЭтаФорма[СвойстваРеквизитаРезультатЗапроса.ИмяРеквизита].Загрузить(лРезультат);
	
	лОбработкаОбъект.гВывестиТаблицуНаФорму(Элементы, АдресРезультата, АдресСпискаСпецПолей, УсловноеОформление, РезультатЗапросаВДерево);
	
КонецПроцедуры // СоздатьРеквизитCРезультатомЗапроса()

&НаКлиенте
Процедура ОбновитьЗаголовок()

	ЭтаФорма.Заголовок = гЗаголовокОбработки(ИмяПользователяВОблаке, ИмяФайлаСЗапросом)
	
КонецПроцедуры // ОбновитьЗаголовок()

&НаКлиенте
Процедура ОбновитьСостояниеРезультатаЗапроса()
	
	лКнопкаСтрокРезультата = Элементы.КнопкаКоличествоСтрокРезультатаЗапроса;
	
	Если РезультатЗапросаВДерево Тогда 
		лКартинка  = БиблиотекаКартинок.РежимПросмотраСпискаДерево;
		лЗаголовок = ""Строк 1-го уровня: "";
	Иначе
		лКартинка  = БиблиотекаКартинок.РежимПросмотраСпискаСписок;
		лЗаголовок = ""Строк: "";
	КонецЕсли;
	
	Попытка
		Если РезультатЗапросаВДерево Тогда 
			лКоличество = РезультатЗапроса().ПолучитьЭлементы().Количество();
		Иначе
			лКоличество = РезультатЗапроса().Количество();
		КонецЕсли;
	Исключение
		лКоличество = ""-"";
	КонецПопытки; 
	
	лКнопкаСтрокРезультата.Картинка  = лКартинка;
	лКнопкаСтрокРезультата.Заголовок = лЗаголовок + лКоличество;
	
КонецПроцедуры // ОбновитьСостояниеРезультатаЗапроса()
 
&НаКлиенте
Процедура ОформитьКнопкуПоказатьСекциюСЗапросами(Видимость)
	//Элементы.ПоказатьСекциюСЗапросами.Заголовок = ?(Видимость, ""Скрыть секцию с запросами"", ""Показать секцию с запросами"");
	Элементы.ПоказатьСекциюСЗапросами.РасширеннаяПодсказка.Заголовок = ?(Видимость, ""Скрыть секцию с запросами"", ""Показать секцию с запросами"");
	Элементы.ПоказатьСекциюСЗапросами.Пометка = Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ОформитьКнопкуПоказатьРезультат(Видимость)
	Элементы.ПоказатьРезультат.РасширеннаяПодсказка.Заголовок = ?(Видимость, ""Скрыть секцию с результатом запроса"", ""Показать секцию с результатом запроса"");
	Элементы.ПоказатьРезультат.Пометка = Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ОформитьКнопкуПоказатьПараметры(Видимость)
	//Элементы.ПоказатьПараметры.Заголовок = ?(Видимость, ""Скрыть параметры запроса"", ""Показать параметры запроса"");
	Элементы.ПоказатьПараметры.РасширеннаяПодсказка.Заголовок = ?(Видимость, ""Скрыть параметры запроса"", ""Показать параметры запроса"");
	Элементы.ПоказатьПараметры.Пометка = Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогВыбораФайла(Операция) // #Рефакторинг -> Унифицировать с аналогичной процедурой из обычной формы
	
	Диалог = Новый ДиалогВыбораФайла(ПолучитьРежимДиалогаПоОперацииРаботыСФайлами(Операция));
	Диалог.Заголовок					= НСтр(""ru = 'Выберите файл запросов'"");
	Диалог.ПредварительныйПросмотр  	= Ложь;
	Диалог.Фильтр   					= НСтр(""ru = 'Файл запросов (*.sel)|*.sel'"");
	Диалог.Расширение   				= ""sеl"";
	Диалог.ПроверятьСуществованиеФайла  = Истина;
	Диалог.МножественныйВыбор			= Ложь;
	
	Если Операция = РежимДиалогаВыбораФайла.Открытие Тогда 
		ТекущийФайл = Новый Файл(ИмяФайлаСЗапросом);
		
		Диалог.ПолноеИмяФайла = ТекущийФайл.Имя;
		Диалог.Каталог = ТекущийФайл.Путь;
	Иначе
		Диалог.ПолноеИмяФайла = ""Запросы от "" + Формат(ТекущаяДата(), ""ДФ=yyyyMMdd"");
	КонецЕсли;
	
	Диалог.Показать(Новый ОписаниеОповещения(""ДиалогВыбораФайлаЗавершение"", Вычислить(ЭтотОбъектФорма), Новый Структура(""Диалог, Операция"", Диалог, Операция)));

КонецПроцедуры // ПоказатьДиалогВыбораФайла()

// Показывает сообщение или предупреждение пользователю
//
// Параметры:
//	ТекстСообщения - текст передаваемого сообщения.
//	ПутьКДанным - путь к данным для сообщения.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеПользователю(Знач ТекстСообщения, Объект, УникальныйИдентификатор, ПутьКДанным = Неопределено)
	
	ТекстСообщения = НСтр(""ru = '"" + СтрЗаменить(ТекстСообщения, ""'"", ""''"") + ""'"");
	
	// очиститьСообщения();
	Сообщение 		= Новый СообщениеПользователю(); 
    Сообщение.Текст = ТекстСообщения;
	
	Если ЗначениеЗаполнено(ПутьКДанным) Тогда 
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
	
	Сообщение.УстановитьДанные(Объект); 
	Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
	
	Сообщение.Сообщить();
	
КонецПроцедуры // ПоказатьСообщениеПользователю

#Область Меню

&НаСервереБезКонтекста
Функция ПолучитьМенюНаСервереСписком(ИмяМеню, ПутькКартинке)
	
	лМенюСписком = ОбъектОбработки().гПолучитьМеню(ИмяМеню, Истина, Истина, ПутькКартинке);
	
	Результат = Новый СписокЗначений;
	Для каждого ПунктМеню Из лМенюСписком Цикл
		
		Если ПунктМеню.Значение.Действие = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ПунктМеню.Значение.Имя, ПунктМеню.Значение.Название,,ПунктМеню.Значение.Картинка);
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции // ПолучитьМенюНаСервереСписком()

Процедура ЗаполнитьМенюПоДеревуНаСервереРекурсивно(Родитель, ДеревоМенюКнопки, КореньЭтоПодменю = Истина, СкрытьПоУмолчанию = Ложь)
	
	лТекущийРодитель = Родитель;
	
	Для каждого ТекСтрока Из ДеревоМенюКнопки.Строки Цикл
		
		лИмяЭлемента = ТекСтрока.Имя;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Действие) Тогда			
			
			лГруппаКнопок = Элементы.Добавить(лИмяЭлемента, Тип(""ГруппаФормы""), Родитель);
			лГруппаКнопок.Видимость = Не СкрытьПоУмолчанию;
			
			Если ТекСтрока.Строки.Количество() > 0 Тогда
				
				лГруппаКнопок.Вид       = ?(КореньЭтоПодменю, ВидГруппыФормы.Подменю, ВидГруппыФормы.ГруппаКнопок);
				лГруппаКнопок.Заголовок = ТекСтрока.Название;
				
				//Если лГруппаКнопок.Вид = ВидГруппыФормы.Подменю И ЗначениеЗаполнено(ТекСтрока.Картинка) Тогда 
				//	лГруппаКнопок.Картинка    = ТекСтрока.Картинка;
				//	лГруппаКнопок.Отображение = ОтображениеКнопки.Картинка;
				//КонецЕсли;
				
				ЗаполнитьМенюПоДеревуНаСервереРекурсивно(лГруппаКнопок, ТекСтрока, Истина)
			Иначе
				лГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;				
				лТекущийРодитель  = лГруппаКнопок;
			КонецЕсли;	
		Иначе
			
			лИмяКоманды  = лИмяЭлемента;
			КомандаФормы = Команды.Найти(лИмяКоманды);
			
			Если КомандаФормы = Неопределено Тогда 
				КомандаФормы = Команды.Добавить(лИмяКоманды);
				КомандаФормы.Действие = ТекСтрока.Действие;
			КонецЕсли;
			
			Кнопка            = Элементы.Добавить(лИмяЭлемента, Тип(""КнопкаФормы""), лТекущийРодитель);
			Кнопка.ИмяКоманды = лИмяКоманды;
			Кнопка.Заголовок  = ТекСтрока.Название;
			
			Если ТекСтрока.СочетаниеКлавиш <> Неопределено Тогда
				Кнопка.СочетаниеКлавиш = ТекСтрока.СочетаниеКлавиш;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьМенюПоДеревуНаСервереРекурсивно()
 
#КонецОбласти 

&НаСервереБезКонтекста
Функция ПолучитьПолноеПредставлениеТипаИзРасшифровкиНаСервере(Параметры)
	Возврат Метаданные.НайтиПоТипу(ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыЗначений)[Параметры.ИдентификаторСтроки][Параметры.ИмяСпецПоля]).ПолноеИмя();
КонецФункции // ПолучитьПолноеПредставлениеТипаИзРасшифровкиНаСервере()

&НаКлиенте
Функция ПолучитьИмяСпецПоля(ИмяПоля)
	Возврат СтрЗаменить(ИмяПоля, СвойстваРеквизитаРезультатЗапроса.ПрефиксДляПолей + гПрефиксСпецПоля(), """");
КонецФункции // ПолучитьИмяСпецПоля()

#КонецОбласти 

#Область РаботаСЗапросом

&НаСервереБезКонтекста
// Функция формирует таблицу значений
// Параметры функции:
// 	ВнешниеДанные - ComObject - выборка запроса из внешней базы
//
Функция СформироватьТаблицуПоВнешнейВыборке(ВнешниеДанные, ИдентификаторБазы, Результат = Неопределено)
	
	Если Результат = Неопределено Тогда 
		
		ИмяПоляСИдБазыШаблон = ""ИдБазы"";
		
		Результат = Новый ТаблицаЗначений;
		
		лКоличествоСтрок     = ВнешниеДанные.Количество();
		лАнализируемаяСтрока = ВнешниеДанные.GET(?(лКоличествоСтрок > 1, 1, 0));	
		
		Для каждого КолонкаТаблицы Из ВнешниеДанные.Колонки Цикл
			
			лАнализируемоеЗначение = лАнализируемаяСтрока[КолонкаТаблицы.Имя];
			Массив                 = Новый Массив;
			Если СтрокаВЧисло(лАнализируемоеЗначение) <> Неопределено Тогда 
				Массив.Добавить(Тип(""Число""));
			ИначеЕсли ЗначениеЗаполнено(СтрокаВДату(лАнализируемоеЗначение)) Тогда 
				Массив.Добавить(Тип(""Дата""));
			Иначе
				Массив.Добавить(Тип(""Строка""));
			КонецЕсли;
			
			лОписаниеТипов = Новый ОписаниеТипов(Массив);
			
			Результат.Колонки.Добавить(КолонкаТаблицы.Имя, лОписаниеТипов);
		КонецЦикла; 
		
		Если ИдентификаторБазы <> Неопределено Тогда 
			
			Массив.Добавить(Тип(""Строка""));
			лОписаниеТипов = Новый ОписаниеТипов(Массив);
			
			лИмяПоляСИдБазы = ИмяПоляСИдБазыШаблон;
			лНомерПопытки = 0;			
			Пока Результат.Колонки.Найти(лИмяПоляСИдБазы) <> Неопределено Цикл 
				лНомерПопытки   = лНомерПопытки + 1;
				лИмяПоляСИдБазы = ИмяПоляСИдБазыШаблон + Формат(лНомерПопытки, ""ЧГ=0"");
			КонецЦикла;
			
			Результат.Колонки.Добавить(лИмяПоляСИдБазы, лОписаниеТипов);
		КонецЕсли;
	Иначе
		лИмяПоляСИдБазы = Результат.Колонки[Результат.Колонки.Количество() - 1].Имя;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ВнешниеДанные Цикл
		
		НоваяСтрока = Результат.Добавить();
		
		Если ИдентификаторБазы <> Неопределено Тогда 
			НоваяСтрока[лИмяПоляСИдБазы] = ИдентификаторБазы;
		КонецЕсли;
		
		Для каждого КолонкаТаблицы Из ВнешниеДанные.Колонки Цикл
			Если ТипЗнч(СтрокаТаблицы[КолонкаТаблицы.Имя]) = Тип(""COMОбъект"") Тогда 
				НоваяСтрока[КолонкаТаблицы.Имя] = ""COMОбъект"";
			Иначе
				НоваяСтрока[КолонкаТаблицы.Имя] = СтрокаТаблицы[КолонкаТаблицы.Имя];
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции // СформироватьТаблицуПоВнешнейВыборке()


&НаСервереБезКонтекста
Функция гСформироватьКодЗапросаДля1С(ТекстЗапроса, ПараметрыЗапроса, Режим)
	Возврат ОбъектОбработки().гСформироватьКодЗапросаДля1С(ТекстЗапроса, ПараметрыЗапроса, Режим, Истина);
КонецФункции

&НаСервереБезКонтекста
Функция гПолучитьЗапросИзТекста(Код1С, ПростаяОбработкаТекста)
	Возврат ОбъектОбработки().гПолучитьЗапросИзТекста(Код1С, ПростаяОбработкаТекста);
КонецФункции


&НаКлиенте
Процедура СкопироватьИсполняемыйКод(идЗапросаИсточника, идЗапросаПриемника)
	
	лСтрокиСИсполняемымКодомИсточника = ИсполняемыйКод.НайтиСтроки(Новый Структура(""ИдентификаторЗапроса"", идЗапросаИсточника)); //#Рефакторинг уйти от контекстного вызова сервера
	
	Для каждого лИсполняемыйКодИсточника Из лСтрокиСИсполняемымКодомИсточника Цикл
		
		лНовыйИсполняемыйКод = ИсполняемыйКод.Добавить();
		ЗаполнитьЗначенияСвойств(лНовыйИсполняемыйКод, лИсполняемыйКодИсточника);
		лНовыйИсполняемыйКод.ИдентификаторЗапроса = идЗапросаПриемника;
		
	КонецЦикла; 
	
КонецПроцедуры // СкопироватьИсполняемыйКод()

&НаКлиенте
Процедура СохранитьЗначенияПоЗапросу(идСтрокиСЗапросом)
	
	Если идСтрокиСЗапросом = Неопределено Тогда 
		Возврат;	
    КонецЕсли;

	лСтрокаСЗапросом = СтрокаСЗапросом(идСтрокиСЗапросом);
	
	лСтрокаСЗапросом.ТекстЗапроса = ТекстТекущегоЗапроса;
	
	ПараметрыТекущегоЗапросаДляСервера = ПолучитьКоллекциюДляПередачиНаСервер(ПараметрыТекущегоЗапроса, 
		""Значение,ЗначениеВФорме,Тип,ТипВФорме,КартинкаТипа,ИдентификаторСтроки,ГлобальныйПараметр, Имя, ДобавлятьВоВременнуюТаблицу"");	
	
	ОбновитьПараметрыИзТекущихНаСервере(ПараметрыТекущегоЗапросаДляСервера, лСтрокаСЗапросом.Идентификатор, АдресПараметровЗапросов);
	
КонецПроцедуры // СохранитьЗначенияПоЗапросу()

&НаКлиенте
Процедура ДобавитьНовуюСтрокуСЗапросом()
	НоваяСтрока = ДеревоЗапросов.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Идентификатор  = Новый УникальныйИдентификатор;
	НоваяСтрока.Имя            = НСтр(""ru = 'Запрос'"");
КонецПроцедуры // ДобавитьНовуюСтрокуСЗапросом()

&НаКлиенте
Процедура ОчиститьДанныеПоЗапросам()
	
	мТекущаяСтрокаДереваЗапросов = Неопределено;
	
	ДеревоЗапросов.ПолучитьЭлементы().Очистить();
	ОчиститьПараметрыЗапросовНаСервере(АдресПараметровЗапросов);
	ИсполняемыйКод.Очистить();
	
КонецПроцедуры // ОчиститьДанныеПоЗапросам()
 
&НаКлиенте
Процедура ЗагрузитьЗапросы(ИмяФайла, Операция, ВыводитьСообщение = Ложь)
	
	Если ЗначениеЗаполнено(ИмяФайла) Тогда 
		
		Ошибка = Ложь;	
		
		ОчиститьДанныеПоЗапросам();
		
		Если Операция = мОперацииСЗапросами.ЗагрузитьИзСтарогоФормата Тогда 
			// открытие старой версии файла с запросами (не JSON)
			ТекстовыйДокумент = Новый ТекстовыйДокумент();
			Попытка
				ТекстовыйДокумент.Прочитать(ИмяФайла);
				ЗагрузитьСтаруюВерсиюДереваНаСервере(ТекстовыйДокумент.ПолучитьТекст());
			Исключение
				ПоказатьСообщениеПользователю(ОписаниеОшибки(), Объект, УникальныйИдентификатор, ""Объект"");		
				Ошибка = Истина;	
			КонецПопытки; 
			ИмяФайлаСЗапросом = """";
		Иначе
			// открытие новых версий файла с запросами (JSON)
			лТекстОшибки = """";
			лРезультатЧтения = ПрочитатьФайлСЗапросомJSON(ИмяФайла, лТекстОшибки);
			Если лТекстОшибки <> """" Тогда ПоказатьСообщениеПользователю(лТекстОшибки, Объект, УникальныйИдентификатор, ""Объект"") КонецЕсли;
			Если лРезультатЧтения > 0  Тогда 
				ИмяФайлаСЗапросом = ИмяФайла;
			ИначеЕсли лРезультатЧтения = 0 Тогда 
				лТекстОшибки = ""Ошибка загрузки из файла ("" + лТекстОшибки + "")."" + Символы.ПС + ""Попытка загрузки старого формата... "";
				Если лТекстОшибки <> """" Тогда ПоказатьСообщениеПользователю(лТекстОшибки, Объект, УникальныйИдентификатор, ""Объект"") КонецЕсли;
				ЗагрузитьЗапросы(ИмяФайла, мОперацииСЗапросами.ЗагрузитьИзСтарогоФормата, Истина);
			Иначе
				Ошибка = Истина;	
			КонецЕсли;
		КонецЕсли;
		
		Если Не Ошибка Тогда 
			ОбновитьЗаголовок();
			Если ВыводитьСообщение Тогда 
				ПоказатьСообщениеПользователю(""Файл """""" + ИмяФайла + """""" загружен"", Объект, УникальныйИдентификатор, ""Объект"");
			КонецЕсли;
		Иначе
			НовыйФайлЗапросовДействие();
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыДерева = ДеревоЗапросов.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() = 0 Тогда 
		ДобавитьНовуюСтрокуСЗапросом();
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры // ЗагрузитьЗапросы()

Процедура ЗагрузитьСтаруюВерсиюДереваНаСервере(Знач Источник, Знач НовоеДерево = Неопределено, Знач СпецСтрока = Неопределено)
	
	ПараметрыЗапросовТЗ = ПолучитьИзВременногоХранилища(АдресПараметровЗапросов);	
	
	ЗагрузитьСтаруюВерсиюДереваРекурсивноНаСервере(Источник, ПараметрыЗапросовТЗ, НовоеДерево, СпецСтрока);
	
	АдресПараметровЗапросов = ПоместитьВоВременноеХранилище(ПараметрыЗапросовТЗ, УникальныйИдентификатор);	
	
КонецПроцедуры // ЗагрузитьСтаруюВерсиюДереваНаСервере()

Процедура ЗагрузитьСтаруюВерсиюДереваРекурсивноНаСервере(Знач Источник, ПараметрыЗапросовТЗ, Знач НовоеДерево = Неопределено, Знач СпецСтрока = Неопределено)
	
	Если НовоеДерево = Неопределено Тогда 
		Источник    = ЗначениеИзСтрокиВнутр(Источник); // на вход в рекурсию передаем дерево в виде строки
		СпецСтрока  = ОбъектОбработки().гПараметрыСпецСтрокиДереваЗапросов().Значение;
		НовоеДерево = РеквизитФормыВЗначение(""ДеревоЗапросов"");
		
		НовоеДерево.Строки.Очистить();
		
		ЭтоПервыйВходВРекурсию = Истина;
	Иначе
		ЭтоПервыйВходВРекурсию = Ложь;
	КонецЕсли;

	Если Источник.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаДерева Из Источник.Строки Цикл
		
		Если СтрокаДерева.Запрос = СпецСтрока Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НовоеДерево.Строки.Добавить();
		НоваяСтрока.Имя           = СтрокаДерева.Запрос;
		НоваяСтрока.ТекстЗапроса  = СтрокаДерева.ТекстЗапроса;
		Если ЗначениеЗаполнено(СтрокаДерева.Идентификатор) Тогда 
			НоваяСтрока.Идентификатор = СтрокаДерева.Идентификатор;
		Иначе
			НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДерева.ВариантыКода) Тогда 
			// заполнение Вариантов кода
			Для каждого Строка Из СтрокаДерева.ВариантыКода Цикл // #Рефакторинг СтрокаДерева.ИсполняемыйКодСписок
				НоваяСтрокаКода = ИсполняемыйКод.Добавить();
				НоваяСтрокаКода.ИдентификаторЗапроса = НоваяСтрока.Идентификатор;
				НоваяСтрокаКода.ИдентификаторСтроки  = Новый УникальныйИдентификатор;
				НоваяСтрокаКода.Имя                  = Строка.ИмяВарианта;
				НоваяСтрокаКода.Текст                = Строка.ТекстКода;
			КонецЦикла; 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДерева.ПараметрыЗапроса) Тогда 
			// заполнение параметров запроса
			Для каждого Строка Из СтрокаДерева.ПараметрыЗапроса Цикл // #Рефакторинг СтрокаДерева.ПараметрыЗапросов
				НовыйПараметр = ПараметрыЗапросовТЗ.Добавить();
				НовыйПараметр.ИдентификаторЗапроса = НоваяСтрока.Идентификатор;
				НовыйПараметр.Значение             = ЗначениеВСтрокуВнутр(Строка.Значение);
				НовыйПараметр.Имя                  = Строка.ИмяПараметра;
				НовыйПараметр.Тип                  = ТипЗнч(Строка.Значение); // #Рефакторинг
			КонецЦикла; 
		КонецЕсли;
		
		ЗагрузитьСтаруюВерсиюДереваРекурсивноНаСервере(СтрокаДерева, ПараметрыЗапросовТЗ, НоваяСтрока, СпецСтрока);
	КонецЦикла;
	
	Если ЭтоПервыйВходВРекурсию Тогда 
		ЗначениеВРеквизитФормы(НовоеДерево, ""ДеревоЗапросов"");
	КонецЕсли;

КонецПроцедуры // ЗагрузитьСтаруюВерсиюДереваРекурсивноНаСервере()

#Область ЧтениеФайлаСЗапросом

&НаКлиенте
// #дубль функции из обычной формы
Функция ПрочитатьФайлСЗапросомJSON(ИмяФайла, ТекстОшибки)
	
	Перем лВерсияФайла, лДата, лНоваяСтрока;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.ОткрытьФайл(ИмяФайла);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат - 1
	КонецПопытки; 

	Попытка
		лДанные = ПрочитатьJSON(ЧтениеJSON);
		
		ПрочитатьЗапросыИзФайлаJSONРекурсивно(лДанные.querys);
		
		ДобавитьПараметрыИзСтруктурыJSONНаСервере(лДанные.parameters, АдресПараметровЗапросов);
		ДобавитьКодИзСтруктурыJSON(лДанные.codes);
				
		Возврат 1;
	Исключение
		ЧтениеJSON.Закрыть();
	КонецПопытки; 
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
		Возврат 0
	Иначе
		Возврат 1
	КонецЕсли;
	
КонецФункции // ПрочитатьФайлСЗапросомJSON()

&НаКлиенте
Функция ПрочитатьЗапросыИзФайлаJSONРекурсивно(Запросы, ВеткаДерева = Неопределено, ЗаменяемыеИД = Неопределено)
	
	Если ВеткаДерева = Неопределено Тогда 
		ВеткаДерева = ДеревоЗапросов;
	КонецЕсли;

	Для каждого лСтруктураЗапроса Из Запросы Цикл
		лНоваяСтрока = ВеткаДерева.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(лНоваяСтрока, лСтруктураЗапроса);
		Если лНоваяСтрока.Идентификатор = """" Тогда 
			лНоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
			ПоказатьСообщениеПользователю(""Ошибка загрузки запроса """""" + лНоваяСтрока.Имя + """""" (пустой идентификатор). 
				|Возможна потеря выполняемого кода, связанного с данным запроса. 
				|Параметры данного запроса могут отображаться как """"Глобальные"""". 
				|Не сохраняйте запрос, скопируйте файл с запросами в другой файл и обратитесь к разработчику. 
				|Ситуация может быть исправлена."", Объект, УникальныйИдентификатор, ""Объект"");
		КонецЕсли;
		Если ЗаменяемыеИД <> Неопределено Тогда 
			лНовыйИД = Новый УникальныйИдентификатор;
			ЗаменяемыеИД.Вставить(лНоваяСтрока.Идентификатор, лНовыйИД);
			лНоваяСтрока.Идентификатор = лНовыйИД;
		КонецЕсли;
		ПрочитатьЗапросыИзФайлаJSONРекурсивно(лСтруктураЗапроса.Строки, лНоваяСтрока, ЗаменяемыеИД);
	КонецЦикла; 
	
	Возврат лНоваяСтрока;
	
КонецФункции // ПрочитатьЗапросыИзФайлаJSONРекурсивно()

#КонецОбласти 

#КонецОбласти 



#Область СервисныеФункции

Функция Коннектор(СтрокаСоединения, Версия) Экспорт
	
	Если Лев(Версия, 3) = ""8.3"" Тогда 
		V8COMConnector = Новый COMОбъект(""V83.COMConnector"");
	ИначеЕсли Лев(Версия, 3) = ""8.2"" Тогда 
		V8COMConnector = Новый COMОбъект(""V82.COMConnector"");
	ИначеЕсли Лев(Версия, 3) = ""8.1"" Тогда 
		V8COMConnector = Новый COMОбъект(""V81.COMConnector"");
	Иначе
		V8COMConnector = Новый COMОбъект(""V8.COMConnector"");
	КонецЕсли;
	
	Попытка
		Результат = V8COMConnector.Connect(СтрокаСоединения); 
	Исключение
		Сообщить(СтрШаблон(""Ошибка при подключении к внешней базе: %1 ; строка подключения: %2 "", ОписаниеОшибки(), СтрокаСоединения), СтатусСообщения.Важное);
		Результат = Неопределено;		
	КонецПопытки;
	
	Возврат Результат
	
КонецФункции // Коннектор()

// Получает идентификатор (метод ПолучитьИдентификатор()) строки дерева значений для заданного значения поля строки
// дерева.
// Используется для позиционирования курсора в иерархических списках.
// 
&НаКлиенте 
Процедура ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИмяПоля, ИдентификаторСтроки, КоллекцияЭлементовДерева, КлючСтроки, ПрекратитьПоиск) Экспорт
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл
		
		Если ПрекратитьПоиск Тогда
			Возврат;
		КонецЕсли;
		
		Если СтрокаДерева[ИмяПоля] = КлючСтроки Тогда
			
			ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
			
			ПрекратитьПоиск = Истина;
			
			Возврат;
			
		КонецЕсли;
		
		КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
		
		Если КоллекцияЭлементов.Количество() > 0 Тогда
			
			ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИмяПоля, ИдентификаторСтроки, КоллекцияЭлементов, КлючСтроки, ПрекратитьПоиск);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля()

// Функция формирует массив структур {Идентификатор, Имя, ТекстЗапроса}, где:
//               Идентификатор  -  GUID   - уникальный идентификатор запроса 
//               Имя            -  Строка - имя текущего запроса. Имя корневого запроса формируется из диалога сохранения запроса
//               ТекстЗапроса   -  Строка - тело запроса
// Параметры функции:
//  Корень                    - СтрокаДереваЗапросов - корневой запрос для выгрузки
//  МассивИД                  - Массив               - массив идентификаторов выгруженных запросов для фильтрации списка параметров и кода к выгрузке
//  ВыгружатьТолькоИзмененные - Булево               - признак режима оптимизации выгрузки запросов в облако (НА ТЕКУЩИЙ МОМЕНТ НЕ ИСПОЛЬЗУЕТСЯ)
//  КолонкиКВыгрузке          - Строка, Неопределено - перечень имен колонок для выгрузки, либо неопределено, если необходимо выгружать все колонки
//  ЗаменяемыеИД              - Соответствие         - защитный механизм от пересечения GUID при выгрузке в облако 
//  ИмяЗапроса                - Строка               - имя корневого запроса
//  ПолучитьРекурсивно        - Булево               - признак режима получения запросов с учетом всех вложенных подзапросов. По умолчанию равен Истина
//  
&НаСервере
Функция ПолучитьСтруктуруЗапросовДляJSONРекурсивно(Знач Корень, МассивИД, ВыгружатьТолькоИзмененные, КолонкиКВыгрузке, ЗаменяемыеИД, ИмяЗапроса, ПолучитьРекурсивно = Истина) Экспорт
	
	Запросы = Новый Массив;
	
	Если ТипЗнч(Корень) = Тип(""Структура"") Тогда 
		лСтрокиДерева = Корень.Строки;
	Иначе
		лСтрокиДерева = Корень.ПолучитьЭлементы();
	КонецЕсли;
	
	Для Каждого лСтрокаДерева Из лСтрокиДерева Цикл
		
		лСтруктураСтрокиЗапроса = Новый Структура(""Идентификатор, Имя, ТекстЗапроса"");
		Если КолонкиКВыгрузке = Неопределено Тогда 
			ЗаполнитьЗначенияСвойств(лСтруктураСтрокиЗапроса, лСтрокаДерева);
		Иначе
			ЗаполнитьЗначенияСвойств(лСтруктураСтрокиЗапроса, лСтрокаДерева, КолонкиКВыгрузке);
		КонецЕсли;
		
		Если ИмяЗапроса <> Неопределено Тогда 
			лСтруктураСтрокиЗапроса.Имя  = ИмяЗапроса; // добавляем имя корневого запроса, которое указал пользователь в диалоге сохранения запроса
		КонецЕсли;
		
		Если ЗаменяемыеИД <> Неопределено Тогда 
			лНовыйИД = Строка(Новый УникальныйИдентификатор);
			ЗаменяемыеИД.Вставить(лСтрокаДерева.Идентификатор, лНовыйИД);
			лСтруктураСтрокиЗапроса.Идентификатор = лНовыйИД;
		КонецЕсли;
		
		Если ПолучитьРекурсивно Тогда 
			лСтруктураСтрокиЗапроса.Вставить(""Строки"", ПолучитьСтруктуруЗапросовДляJSONРекурсивно(лСтрокаДерева, МассивИД, ВыгружатьТолькоИзмененные, КолонкиКВыгрузке, ЗаменяемыеИД, Неопределено));
		Иначе
			лСтруктураСтрокиЗапроса.Вставить(""Строки"", Новый Массив);
		КонецЕсли;
			
		Если лСтруктураСтрокиЗапроса.Строки.Количество() > 0 ИЛИ Не ВыгружатьТолькоИзмененные ИЛИ СписокИзмененныхСтрок.НайтиПоЗначению(лСтрокаДерева.Идентификатор) <> Неопределено  Тогда 
			МассивИД.Добавить(лСтрокаДерева.Идентификатор);
			Запросы.Добавить(лСтруктураСтрокиЗапроса);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Запросы;
	
КонецФункции // ПолучитьСтруктуруЗапросовДляJSONРекурсивно()

&НаСервере
Функция ПолучитьИсполняемыйКодДляJSON(МассивИдентификаторовЗапросов, ЗаменяемыеИД) Экспорт

	лМассивСтрокКода = Новый Массив;
	
	Для каждого ИдентификаторЗапроса Из МассивИдентификаторовЗапросов Цикл
		лКодТекущегоЗапроса = ИсполняемыйКод.НайтиСтроки(Новый Структура(""ИдентификаторЗапроса"", ИдентификаторЗапроса));
		Для каждого СтрокаСКодом Из лКодТекущегоЗапроса Цикл
			Если ЗаменяемыеИД <> Неопределено Тогда 
				лИдентификаторЗапроса = ЗаменяемыеИД.Получить(ИдентификаторЗапроса);
				Если лИдентификаторЗапроса = Неопределено Тогда 
					лИдентификаторЗапроса = ИдентификаторЗапроса;
				КонецЕсли;
			Иначе
				лИдентификаторЗапроса = ИдентификаторЗапроса;
			КонецЕсли;
			
			лПараметрыТекущегоКода = Новый Структура();
			лПараметрыТекущегоКода.Вставить(""ИдентификаторЗапроса"", лИдентификаторЗапроса);
			лПараметрыТекущегоКода.Вставить(""ИдентификаторСтроки"" , СтрокаСКодом.ИдентификаторСтроки);
			лПараметрыТекущегоКода.Вставить(""Имя""                 , СтрокаСКодом.Имя);
			лПараметрыТекущегоКода.Вставить(""Текст""               , СтрокаСКодом.Текст);			
			
			лМассивСтрокКода.Добавить(лПараметрыТекущегоКода);
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат лМассивСтрокКода

КонецФункции // ПолучитьИсполняемыйКодДляJSON()

Функция ПолучитьПараметрыЗапросовДляJSON(МассивИдентификаторовЗапросов, ЗаменяемыеИД) Экспорт

	ПараметрыЗапросовТЗ = ПолучитьИзВременногоХранилища(АдресПараметровЗапросов);
	
	лМассивПараметров = Новый Массив;
	
	Если МассивИдентификаторовЗапросов.Найти("""") = Неопределено Тогда 
		// Добавляем пустой идентификатор - признак глобального параметра
		МассивИдентификаторовЗапросов.Добавить("""");
	КонецЕсли;
	
	// добавляем локальные параметры
	Для Каждого ИдентификаторЗапроса Из МассивИдентификаторовЗапросов Цикл
		
		лПараметрыТекущегоЗапроса = ПараметрыЗапросовТЗ.НайтиСтроки(Новый Структура(""ИдентификаторЗапроса"", ИдентификаторЗапроса));
		Для каждого ПараметрТекущегоЗапроса Из лПараметрыТекущегоЗапроса Цикл
			Если ЗаменяемыеИД <> Неопределено Тогда 
				лИдентификаторЗапроса = ЗаменяемыеИД.Получить(ИдентификаторЗапроса);
				Если лИдентификаторЗапроса = Неопределено Тогда 
					лИдентификаторЗапроса = ИдентификаторЗапроса;
				КонецЕсли;
			Иначе
				лИдентификаторЗапроса = ИдентификаторЗапроса;
			КонецЕсли;
			
			лПараметрыТекущегоЗапроса = Новый Структура();
			лПараметрыТекущегоЗапроса.Вставить(""ИдентификаторЗапроса"", лИдентификаторЗапроса);
			лПараметрыТекущегоЗапроса.Вставить(""ИдентификаторСтроки"" , ПараметрТекущегоЗапроса.ИдентификаторСтроки);
			лПараметрыТекущегоЗапроса.Вставить(""Имя""                 , ПараметрТекущегоЗапроса.Имя);
			лПараметрыТекущегоЗапроса.Вставить(""Значение""            , ПараметрТекущегоЗапроса.Значение);			
			
			лМассивПараметров.Добавить(лПараметрыТекущегоЗапроса);
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат лМассивПараметров
	
КонецФункции // получитьПараметрыЗапросовДляJSON()

&НаКлиенте
Функция ПолучитьЗапросыВJSON(ИмяЗапроса, Локально, ВыгружатьТолькоИзмененные, Знач СтрокаСЗапросом, ПолучитьРекурсивно)
	
	лПодменитьИмяКорневогоЗапроса = НЕ Локально И (СтрокаСЗапросом <> Неопределено);
	
	лМассивИДЗапросов = Новый Массив;              
	Если ВыгружатьТолькоИзмененные Тогда 
		лЗаменяемыеИД = Неопределено;
	Иначе
		лЗаменяемыеИД = Новый Соответствие;
	КонецЕсли;
	
	Если СтрокаСЗапросом = Неопределено Тогда 
		Корень = ДеревоЗапросов;
	Иначе
		лСтрокиДерева = Новый Массив;
		лСтрокиДерева.Добавить(СтрокаСЗапросом);
		Корень = Новый Структура(""Строки"", лСтрокиДерева);
	КонецЕсли;
	
	Данные = Новый Структура();
	Данные.Вставить(""header""    , Новый Структура(""version, date"", гНазваниеОбработки(), ТекущаяДата()));
	Данные.Вставить(""querys""    , ПолучитьСтруктуруЗапросовДляJSONРекурсивно(Корень, лМассивИДЗапросов, ВыгружатьТолькоИзмененные, Неопределено, лЗаменяемыеИД, 
		?(лПодменитьИмяКорневогоЗапроса, ИмяЗапроса, Неопределено), ПолучитьРекурсивно));
	Данные.Вставить(""parameters"", ПолучитьПараметрыЗапросовДляJSON(лМассивИДЗапросов, лЗаменяемыеИД));
	Данные.Вставить(""codes""     , ПолучитьИсполняемыйКодДляJSON(лМассивИДЗапросов, лЗаменяемыеИД));
	
	Если ВыгружатьТолькоИзмененные Тогда 
		Данные.Вставить(""querysToDel"", СписокИзмененныхСтрок);
		Данные.Вставить(""querysSort"" , ПолучитьСтруктуруЗапросовДляJSONРекурсивно(Корень, лМассивИДЗапросов, Ложь, ""Идентификатор"", Неопределено, Неопределено));
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	Если Не Локально Тогда 
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(,,,,,,Истина)); // экранируем одинарные кавычки
	Иначе
		ЗаписьJSON.ОткрытьФайл(ИмяЗапроса);
	КонецЕсли;
	
	ЗаписатьJSON(ЗаписьJSON, Данные, Новый НастройкиСериализацииJSON);
	
	Возврат ЗаписьJSON;
	
КонецФункции // ПолучитьЗапросыВJSON()

&НаСервереБезКонтекста
Процедура ОчиститьПараметрыЗапросовНаСервере(АдресПараметровЗапросов)
	ПараметрыЗапросов = ПолучитьИзВременногоХранилища(АдресПараметровЗапросов);
	ПараметрыЗапросов.Очистить();
	ПоместитьВоВременноеХранилище(ПараметрыЗапросов, АдресПараметровЗапросов);
КонецПроцедуры // ОчиститьПараметрыЗапросовНаСервере()


&НаСервереБезКонтекста
Функция ДобавитьПараметрыИзСтруктурыJSONНаСервере(parameters, АдресПараметровЗапросов, ЗаменяемыеИД = Неопределено)
	
	ПараметрыЗапросов = ПолучитьИзВременногоХранилища(АдресПараметровЗапросов);
	
	ИдентификаторПараметра = Неопределено;
	
	Для каждого лПараметр Из parameters Цикл
		
		лНоваяСтрока = ПараметрыЗапросов.Добавить();
		
		ЗаполнитьЗначенияСвойств(лНоваяСтрока, лПараметр);
		
		Если ЗаменяемыеИД <> Неопределено Тогда 
			лНовыйИд = ЗаменяемыеИД.Получить(лНоваяСтрока.ИдентификаторЗапроса);
			Если лНовыйИд <> Неопределено Тогда 
				лНоваяСтрока.ИдентификаторЗапроса = лНовыйИд;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(лНоваяСтрока.ИдентификаторСтроки) Тогда 
			лНоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор // #рефакторинг необходимо понять откуда приходит пустой Ид
		КонецЕсли;			
		
		ИдентификаторПараметра = лНоваяСтрока.ИдентификаторСтроки;
		
	КонецЦикла; 
	
	ПоместитьВоВременноеХранилище(ПараметрыЗапросов, АдресПараметровЗапросов);
	
	Возврат ИдентификаторПараметра;
	
КонецФункции // ДобавитьПараметрыИзСтруктурыJSONНаСервере()

&НаКлиенте
Функция ДобавитьКодИзСтруктурыJSON(codes, ЗаменяемыеИД = Неопределено)
	
	ИдентификаторКода = Неопределено;
	
	Для каждого лСтрокаСкодом Из codes Цикл
		
		лНоваяСтрока = ИсполняемыйКод.Добавить();
		
		ЗаполнитьЗначенияСвойств(лНоваяСтрока, лСтрокаСкодом);
		
		Если ЗаменяемыеИД <> Неопределено Тогда 
			лНовыйИд = ЗаменяемыеИД.Получить(лНоваяСтрока.ИдентификаторЗапроса);
			Если лНовыйИд <> Неопределено Тогда 
				лНоваяСтрока.ИдентификаторЗапроса = лНовыйИд;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(лНоваяСтрока.ИдентификаторСтроки) Тогда 
			лНоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор // #рефакторинг необходимо понять откуда приходит пустой Ид
		КонецЕсли;			
		
		ИдентификаторКода = лНоваяСтрока.ИдентификаторСтроки;
		
	КонецЦикла; 
	
	Возврат ИдентификаторКода;
	
КонецФункции // ДобавитьКодИзСтруктурыJSON()

&НаКлиенте
Функция ДобавитьВеткуДереваЗапросов(Данные, Родитель)
	
	ЗаменяемыеИД = Новый Соответствие;
	
	// читаем запросы
	лНоваяВетка = ПрочитатьЗапросыИзФайлаJSONРекурсивно(Данные.querys, Родитель, ЗаменяемыеИД);
	
	ИдентификаторПараметра = ДобавитьПараметрыИзСтруктурыJSONНаСервере(Данные.parameters, АдресПараметровЗапросов, ЗаменяемыеИД);
	ИдентификаторКода      = ДобавитьКодИзСтруктурыJSON(Данные.codes, ЗаменяемыеИД);
	
	Если лНоваяВетка <> Неопределено Тогда 
		ИдентификаторЗапроса= лНоваяВетка.Идентификатор;
		Элементы.ДеревоЗапросов.ТекущаяСтрока = ?(ТипЗнч(Родитель) = Тип(""ДанныеФормыЭлементДерева""), лНоваяВетка.ПолучитьРодителя().ПолучитьИдентификатор(), лНоваяВетка.ПолучитьИдентификатор());
		Модифицированность = Истина;
	Иначе
		ИдентификаторЗапроса = Неопределено
	КонецЕсли;
	
	Возврат Новый Структура(""ИдентификаторЗапроса, ИдентификаторПараметра, ИдентификаторКода"", ИдентификаторЗапроса, ИдентификаторПараметра, ИдентификаторКода);
	
КонецФункции // ДобавитьВеткуДереваЗапросов()

&НаКлиенте
Процедура ВыполнитьДействияПриЗакрытииФормы()

	СохранитьНастройкиОбработки();
	
	мВыполняетсяЗакрытие = Истина;
	
	лПутьККартинкам = гЗначениеИзСеансовыхДанных(""ПутькКартинкам"", СеансовыеДанные);
	
	Если ЗначениеЗаполнено(лПутьККартинкам) Тогда 
		Попытка
			УдалитьФайлы(лПутьККартинкам);
		Исключение
		КонецПопытки; 
		Попытка
			УдалитьФайлыНаСервере(лПутьККартинкам);
		Исключение
		КонецПопытки; 
	КонецЕсли;

	Закрыть();
	
КонецПроцедуры // ВыполнитьДействияПриЗакрытииФормы()
 
&НаСервереБезКонтекста
Функция ОбъектОбработки()
	
	Возврат Новый (""ВнешняяОбработкаОбъект.КонсольЗапросов"");
	
КонецФункции

//&НаСервереБезКонтекста
// функция ПолучитьКартинкуНаСервере(ИмяКартинки)
//	Возврат ОбъектОбработки().ПолучитьКартинку(ИмяКартинки);
// конецФункции // ПолучитьКартинкуНаСервере()

&НаКлиенте
Функция ПроверитьМодифицированность(Операция)
	
	лОповещение = Новый ОписаниеОповещения(""ПослеВопросаСохранитьИзмененияПродолжение"", ЭтаФорма, Новый Структура(""Операция"", Операция));
	
	Если Модифицированность Тогда
		ПоказатьВопрос(лОповещение, НСтр(""ru = 'Данные изменены. Сохранить изменения?'""), РежимДиалогаВопрос.ДаНетОтмена);
	Иначе		
		ВыполнитьОбработкуОповещения(лОповещение, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецФункции // ПроверитьМодифицированность()

&НаКлиенте
Функция ПолучитьРежимДиалогаПоОперацииРаботыСФайлами(Операция)
	Если Операция = мОперацииСЗапросами.Открыть Тогда 
		Возврат РежимДиалогаВыбораФайла.Открытие
	Иначе
		Возврат РежимДиалогаВыбораФайла.Сохранение
	КонецЕсли;
КонецФункции // ПолучитьРежимДиалогаПоОперацииРаботыСФайлами()

&НаСервереБезКонтекста
Функция ПолучитьПустоеЗначениеТипаНаСервере(Тип)
	
	Если НРег(Тип) = ""граница"" ИЛИ НРег(Тип) = ""моментвремени"" Тогда 
		лПараметры    = Новый Массив(1);
		лПараметры[0] = ТекущаяДата();
	Иначе
		лПараметры = Неопределено
	КонецЕсли;
	
	Возврат ЗначениеВСтрокуВнутр(Вычислить(""Новый (Тип("""""" + Тип + """""")"" + ?(лПараметры = Неопределено, """", "", лПараметры"")+ "")""));
	
КонецФункции // ПолучитьПустоеЗначениеТипаНаСервере()

&НаСервереБезКонтекста
Функция ПолучитьЦветСтиляНаСервере(ИмяЦвета)
	Возврат ЦветаСтиля[ИмяЦвета]
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЦветаОбработки()
	
	Результат = Новый Структура;
	Результат.Вставить(""Синий"", Новый Цвет(0,0,255));
	
	Возврат Результат;
	
КонецФункции // ЦветаОбработки()

Функция гНажатиеНаКнопкуВыборМенюИнформацияНаСервере(ИмяКнопки, ТолькоВернутьКоманду)
	Возврат ОбъектОбработки().гНажатиеНаКнопкуВыборМенюИнформация(ИмяКнопки, ТолькоВернутьКоманду);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТаблицуРезультатаНаСервере(АдресРезультата)
	Возврат ПолучитьИзВременногоХранилища(АдресРезультата);
КонецФункции // ПолучитьТаблицуРезультатаНаСервере()
 
&НаСервереБезКонтекста
Функция ПолучитьКоличествоКолонокРезультатаНаСервере(АдресРезультата)
	Возврат ПолучитьТаблицуРезультатаНаСервере(АдресРезультата).Колонки.Количество();
КонецФункции // ПолучитьКоличествоКолонокРезультатаНаСервере()

&НаСервереБезКонтекста
Функция ПолучитьКолонкиРезультатаНаСервере(АдресРезультата)
	
	лКолонки = ПолучитьТаблицуРезультатаНаСервере(АдресРезультата).Колонки;
	
	лСписокКолонок = Новый СписокЗначений;
	Для каждого лКолонка Из лКолонки Цикл
		лСписокКолонок.Добавить(лКолонка.Имя, ?(лКолонка.Заголовок = """", лКолонка.Имя, лКолонка.Заголовок));
	КонецЦикла; 
	
	Возврат лСписокКолонок;	
	
КонецФункции // ПолучитьКолонкиРезультатаНаСервере()

Функция ТекстВТаблицуНаСервере(МассивКолонокСтрокиТаблицы, Текст, ДобавлятьКолонки, Разделитель, ЗагружатьВТаблицуРезультата = Истина)
	
	Если ЗагружатьВТаблицуРезультата Тогда 
		ТаблицаЗначений = ПолучитьТаблицуРезультатаНаСервере(АдресРезультата);
	Иначе
		ТаблицаЗначений = Новый ТаблицаЗначений;
	КонецЕсли;
	лКоличествоКолонокЭлементаТЗ = ТаблицаЗначений.Колонки.Количество();	
	
	Если ДобавлятьКолонки Тогда 
		Для Сч = лКоличествоКолонокЭлементаТЗ По МассивКолонокСтрокиТаблицы.Количество() - 1 Цикл
			НоваяКолонка     = ТаблицаЗначений.Колонки.Добавить();
			НоваяКолонка.Имя = ""НоваяКолонка__"" + Формат(Сч, ""ЧН=; ЧГ=0"");
		КонецЦикла; 
	КонецЕсли;

	лКоличествоКолонокЭлементаТЗ = ТаблицаЗначений.Колонки.Количество();
	
	Для сч = 1 По Текст.КоличествоСтрок() Цикл
		лМассивКолонокСтрокиТаблицы = гРазложитьСтрокуВМассивПодстрок(Текст.ПолучитьСтроку(сч), Разделитель);
		лКоличествоЗаполняемыхКолонок = Мин(лКоличествоКолонокЭлементаТЗ, лМассивКолонокСтрокиТаблицы.Количество());
		НоваяСтрока = ТаблицаЗначений.Добавить();
		Для Сч1 = 0 По лКоличествоЗаполняемыхКолонок - 1 Цикл
			НоваяСтрока[Сч1] = лМассивКолонокСтрокиТаблицы[Сч1];
		КонецЦикла; 
	КонецЦикла; 
	
	лАдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаЗначений, УникальныйИдентификатор);
	Если ЗагружатьВТаблицуРезультата Тогда 
		АдресРезультата = лАдресТаблицы;
		СоздатьРеквизитCРезультатомЗапроса(АдресРезультата);	
	Иначе
		Возврат лАдресТаблицы;
	КонецЕсли;
	
КонецФункции // ТекстВТаблицуНаСервере()

Функция ПоместитьРезультатВХранилищеНаСервере(ТаблицаЗапроса)
	Возврат ПоместитьВоВременноеХранилище(ТаблицаЗапроса.Выгрузить(), УникальныйИдентификатор);
КонецФункции

#КонецОбласти 


#Область Прочие

&НаКлиенте
Процедура ВыбратьКолонкуДляДействияСРезультатомЗапроса(ПараметрыДействия)
	
	АдресРезультата = ПоместитьРезультатВХранилищеНаСервере(РезультатЗапроса());
	лСписокКолонок  = ПолучитьКолонкиРезультатаНаСервере(АдресРезультата);
	лПараметры      = Новый Структура(""Действие, ПараметрыДействия"", Константы().ДействияСРезультатомЗапроса, ПараметрыДействия);
	лОповещение     = Новый ОписаниеОповещения(""ЗавершениеВыбораКолонки"", Вычислить(ЭтотОбъектФорма), лПараметры);
	
	лСписокКолонок.ПоказатьВыборЭлемента(лОповещение, ""Выберите колонку для указания источника данных"");
	
КонецПроцедуры // ВыбратьКолонкуДляДействияСРезультатомЗапроса()

&НаКлиенте
Процедура ОбработатьИзменениеДанныхОПодключении(ДанныеОПодключении);
	Если ДанныеОПодключении.email <> ИмяПользователяВОблаке Тогда 
		Если Не ЗначениеЗаполнено(ДанныеОПодключении.email) Тогда 
			ИмяФайлаСЗапросом = """"; 
		КонецЕсли;
		ИмяПользователяВОблаке = ДанныеОПодключении.email;
		ИдентификаторСессии    = ДанныеОПодключении.ИдентификаторСессии;

		ОбновитьЗаголовок();
	КонецЕсли;
КонецПроцедуры // ОбработатьИзменениеДанныхОПодключении()

&НаСервереБезКонтекста
Функция гСохранитьФайлСЗапросомВОблаке(соединение, идВОблаке, имя, обновлятьВсеЗаписи, данные, НастройкиПрокси = Неопределено);
	Возврат ОбъектОбработки().гСохранитьФайлСЗапросомВОблаке(соединение, идВОблаке, имя, обновлятьВсеЗаписи, данные, НастройкиПрокси);
КонецФункции // гСохранитьФайлСЗапросомВОблаке()

&НаСервереБезКонтекста
Функция гСохранитьЗапросыВОблаке(соединение, идПакета, идРодительскогоЗапроса, ИдЗапроса, имя, включатьПодчиненныеЗапросы, данные, НастройкиПрокси = Неопределено);
	Возврат ОбъектОбработки().гСохранитьЗапросыВОблаке(соединение, идПакета, идРодительскогоЗапроса, ИдЗапроса, имя, включатьПодчиненныеЗапросы, данные, НастройкиПрокси);
КонецФункции // гСохранитьЗапросыВОблаке()

&НаКлиенте
Функция ЗагрузитьЗапросыИзОблака(идПакетаВОблаке, идЗапроса, идСтрокиКода, включатьПодчиненные, Родитель)
	
	Если Не ЗначениеЗаполнено(ИдентификаторСессии) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	лРезультат = гПолучитьЗапросыИзОблака(ИдентификаторСессии, идПакетаВОблаке, идЗапроса, идСтрокиКода, включатьПодчиненные);
	
	Если лРезультат.Статус = ""OK"" Тогда 
		ДобавитьВеткуДереваЗапросов(лРезультат.Данные, Родитель);
	Иначе
		Сообщить(""Ошибка добавления запроса: "" + лРезультат.ТекстОшибки, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;	
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьКодИзПредпросмотра(НаименованиеКода, КодДляВыполнения, Родитель)
	
	Данные = Новый Структура();
	
	Данные.Вставить(""querys""    , Новый Массив);
	Данные.Вставить(""parameters"", Новый Массив);
	
	МассивСКодом = Новый Массив;
	МассивСКодом.Добавить(Новый Структура(""ИдентификаторЗапроса, Имя, Текст"", 
		ИдентификаторЗапроса(), 
		НаименованиеКода, 
		КодДляВыполнения));
	
	Данные.Вставить(""codes"", МассивСКодом);
	
	ДобавленнаяВетка = ДобавитьВеткуДереваЗапросов(Данные, Родитель);
	
	ОбработкаДействияВыполнитьКод(ДобавленнаяВетка.ИдентификаторКода);
	
КонецФункции // ЗагрузитьКодИзПредпросмотра()

&НаСервереБезКонтекста
Функция гПолучитьЗапросыИзОблака(ИдентификаторСессии, идПакетаВОблаке, идЗапроса, идСтрокиКода, включатьПодчиненные);
	Возврат ОбъектОбработки().гПолучитьЗапросыИзОблака(ИдентификаторСессии, идПакетаВОблаке, идЗапроса, идСтрокиКода, включатьПодчиненные);
КонецФункции // гПолучитьЗапросыИзОблака()

&НаСервереБезКонтекста
Функция гПолучитьИмяПодключенногоПользователяВОблаке(ИдентификаторСессии)
	Возврат ОбъектОбработки().гПолучитьИмяПодключенногоПользователяВОблаке(ИдентификаторСессии);
КонецФункции // гПолучитьИмяПодключенногоПользователяВОблаке()

&НаСервереБезКонтекста
Функция гВосстановитьИдентификаторСессииConsqueryCloud() Экспорт 
	
	Возврат ОбъектОбработки().гВосстановитьИдентификаторСессииConsqueryCloud();
	
КонецФункции // ВосстановитьИдентификаторСессииConsqueryCloud()

&НаКлиенте
Процедура УстановитьИмяПользователяВОблаке()
	
	Если Не ЗначениеЗаполнено(ИдентификаторСессии) Тогда 
		Возврат;
	КонецЕсли;
	
	лИмяПользователяВОблаке = ИмяПользователяВОблаке;
	
	Если ЗначениеЗаполнено(ИдентификаторСессии) Тогда 
		лРезультат = гПолучитьИмяПодключенногоПользователяВОблаке(ИдентификаторСессии);
		Если лРезультат.Статус = ""OK"" Тогда 
			ИмяПользователяВОблаке = лРезультат.ИмяПользователя;
		Иначе
			ИмяПользователяВОблаке = Неопределено;
		КонецЕсли;
	Иначе
		ИмяПользователяВОблаке = Неопределено;
	КонецЕсли;
	
	Если лИмяПользователяВОблаке <> ИмяПользователяВОблаке Тогда 
		ОбновитьЗаголовок();
	КонецЕсли;
	
КонецПроцедуры // УстановитьИмяПользователяВОблаке()

&НаКлиенте
Процедура ПодключенияКОблакуДействие()
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить(""email""              , ИмяПользователяВОблаке);
	ПараметрыОткрытияФормы.Вставить(""ИдентификаторСессии"", ИдентификаторСессии);
	
	ОткрытьФорму(""ВнешняяОбработка.КонсольЗапросов.Форма.ФормаУпрПодключениеКОблаку"",
		ПараметрыОткрытияФормы, 
		ЭтаФорма,,,, 
		Новый ОписаниеОповещения(""ПодключенияКОблакуДействиеЗавершение"", Вычислить(ЭтотОбъектФорма)), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ПодключенияКОблакуДействие()

&НаКлиенте
Процедура ДобавитьЗапросИзОблакаДействие()
	
	Если Не ЗначениеЗаполнено(ИдентификаторСессии) Тогда 
		Оповестить(""НеобходимоПереподключиться"", , ЭтаФорма);
		Возврат;
	Иначе					
		
		ПараметрыОткрытияФормы = Новый Структура();
		ПараметрыОткрытияФормы.Вставить(""Режим""              , мОперацииСЗапросами.ЗагрузитьИзОблака);
		ПараметрыОткрытияФормы.Вставить(""Тип""                , Неопределено);
		ПараметрыОткрытияФормы.Вставить(""ИмяЭлементаИзОблака"", Неопределено);
		
		ОткрытьФорму(""ВнешняяОбработка.КонсольЗапросов.Форма.ФормаУпрДиалогВыбораИсточникаДанныхИзОблака"", 
			ПараметрыОткрытияФормы, 
			ЭтаФорма,,,, 
			Новый ОписаниеОповещения(""ДобавитьЗапросИзОблакаПродолжение"", Вычислить(ЭтотОбъектФорма)), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЗапросИзОблакаДействие()

&НаСервереБезКонтекста
Функция ПолучитьТипСтрокой(ТипЗначения)
	
	Если ТипЗначения = Тип(""ТаблицаЗначений"") Тогда 
		Возврат Строка(""ТаблицаЗначений"")
	ИначеЕсли ТипЗначения = Тип(""МоментВремени"") Тогда 
		Возврат Строка(""МоментВремени"")
	ИначеЕсли ТипЗначения = Тип(""СписокЗначений"") Тогда 
		Возврат Строка(""СписокЗначений"")
	Иначе
		Возврат Строка(ТипЗначения)
	КонецЕсли;

КонецФункции // ПолучитьТипСтрокой()

&НаСервереБезКонтекста
Функция гПреобразоватьВПравильноеНазваниеНаСервере(ИсходноеНазвание)
	Возврат ОбъектОбработки().гПреобразоватьВПравильноеНазвание(ИсходноеНазвание);
КонецФункции // гПреобразоватьВПравильноеНазвание()

&НаКлиенте
Функция ПодготовитьДанныеИзБуфера()

	лДанныеБуфера = Новый Структура();
	лДанныеБуфера.Вставить(""Текст""            , Неопределено);
	лДанныеБуфера.Вставить(""КоличествоКолонок"", 0);
	лДанныеБуфера.Вставить(""МассивКолонок""    , 0);	
	лДанныеБуфера.Вставить(""Разделитель""      , Символы.Таб);
	
	лТекст = Новый ТекстовыйДокумент;	
	лТекст.УстановитьТекст(ПолучитьТекстИзБуфера());
	
	лКоличествоСтрок = лТекст.КоличествоСтрок();
	
	Если лКоличествоСтрок = 0 Тогда 
		ПоказатьПредупреждение(Новый ОписаниеОповещения(""ПоказатьПредупреждениеЗавершение"", Вычислить(ЭтотОбъектФорма)), ""Буфер пуст."");
	Иначе
		лДанныеБуфера.Текст = лТекст;
		
		лМассивКолонокИзБуфера = гРазложитьСтрокуВМассивПодстрок(лТекст.ПолучитьСтроку(1), лДанныеБуфера.Разделитель);
		
		лДанныеБуфера.КоличествоКолонок = лМассивКолонокИзБуфера.Количество();
		
		лМассивКолонок = Новый Массив;
		Для Сч = 0 По лДанныеБуфера.КоличествоКолонок - 1 Цикл
			лТекущееИмяКолонки = гПреобразоватьВПравильноеНазваниеНаСервере(лМассивКолонокИзБуфера[Сч]);
			Если лТекущееИмяКолонки = """" Тогда
				//#рефакторинг неоптимальный переход с клиента на сервер 
				лТекущееИмяКолонки = гПолучитьСледующееУникальноеИмя(""Поле"", лМассивКолонок);
			КонецЕсли;
			лМассивКолонок.Добавить(лТекущееИмяКолонки);
		КонецЦикла; 
		лДанныеБуфера.МассивКолонок = лМассивКолонок;
	КонецЕсли;
	
	Возврат лДанныеБуфера;

КонецФункции // ПодготовитьДанныеИзБуфера()

&НаКлиенте
Процедура ОбработкаДействияДобавитьПараметрИзБуфера()

	лДанныеБуфера = ПодготовитьДанныеИзБуфера();
	Если лДанныеБуфера.КоличествоКолонок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	лСписокКолонок = Новый СписокЗначений;
	лСписокКолонок.ЗагрузитьЗначения(лДанныеБуфера.МассивКолонок);
	лСписокКолонок.Вставить(0, Константы().ВсеКолонки);
	
	лПараметры = Новый Структура;
	лПараметры.Вставить(""Действие"", Константы().ДобавитьПараметрИзБуфера);
	лПараметры.Вставить(""Данные""  , лДанныеБуфера);
	
	лОповещение = Новый ОписаниеОповещения(""ЗавершениеВыбораКолонки"", ЭтотОбъект, лПараметры);
	
	Если ВерсияПриложенияНаСервере() = ""8.3.15.1700"" Тогда 
		ВыполнитьОбработкуОповещения(лОповещение, лСписокКолонок[0]);
		Возврат;
	КонецЕсли;
	
	лСписокКолонок.ПоказатьВыборЭлемента(лОповещение, ""Выберите колонку для загрузки в таблицу значений"");
	
КонецПроцедуры // ОбработкаДействияДобавитьПараметрИзБуфера()

&НаКлиенте
Процедура ОбработкаДействияВыгрузитьВПараметр()

	Если ПроверитьРезультатЭтоДерево() Тогда 
		Возврат;
	КонецЕсли;
	
	АдресРезультата = ПоместитьРезультатВХранилищеНаСервере(РезультатЗапроса());
	
	лСписокКолонок = ПолучитьКолонкиРезультатаНаСервере(АдресРезультата);
	лСписокКолонок.Вставить(0, Константы().ВсеКолонки);
	
	лПараметры  = Новый Структура(""Действие"", Константы().ВыгрузитьТаблицуРезультатаВПараметр);
	лОповещение = Новый ОписаниеОповещения(""ЗавершениеВыбораКолонки"", Вычислить(ЭтотОбъектФорма), лПараметры);
	
	лСписокКолонок.ПоказатьВыборЭлемента(лОповещение, ""Выберите колонку для загрузки в таблицу значений"");
	
КонецПроцедуры // ОбработкаДействияВыгрузитьВПараметр()

Процедура ОбработкаДействияВыгрузитьВПараметрНаСервере(ИмяКолонки, Режим, ДополнительныеПараметры = Неопределено)

	лТипыКолонок            = Неопределено;
	лПропуститьПервуюСтроку = Неопределено;
	Если ДополнительныеПараметры <> Неопределено Тогда 
		ДополнительныеПараметры.Свойство(""ТипыКолонок""           , лТипыКолонок);
		ДополнительныеПараметры.Свойство(""ПропуститьПервуюСтроку"", лПропуститьПервуюСтроку);
	КонецЕсли;
	
	// #ЗаполнениеПараметровЗапроса 4
	лСтрокаСПараметром                = ПараметрыТекущегоЗапроса.Добавить();
	лСтрокаСПараметром.Имя            = ""ДанныеИзБуфера_"" + Формат(ТекущаяДата(), ""ДФ=ггММддЧЧммсс"");
	
	Если ИмяКолонки = Неопределено Тогда 
		лСтрокаСПараметром.Тип = ""ТаблицаЗначений"";
		лЗначение = Новый ТаблицаЗначений;
	Иначе
		лСтрокаСПараметром.Тип = ""СписокЗначений"";
		лЗначение = Новый СписокЗначений;
	КонецЕсли;
	
	Если Режим = ""ИзТаблицыРезультата"" Тогда 
		Если ИмяКолонки = Неопределено Тогда 
			лСтрокаСПараметром.Значение = ЗначениеВСтрокуВнутр(ПолучитьТаблицуРезультатаНаСервере(АдресРезультата));
		Иначе
			Для каждого СтрокаРезультата Из ПолучитьТаблицуРезультатаНаСервере(АдресРезультата) Цикл
				лЗначение.Добавить(СтрокаРезультата[ИмяКолонки]);
			КонецЦикла; 
			лСтрокаСПараметром.Значение = ЗначениеВСтрокуВнутр(лЗначение);
		КонецЕсли;
	ИначеЕсли Режим = ""ИзБуфера"" Тогда 
		
		Если ИмяКолонки = Неопределено Тогда 
			// формируем список колонок для таблицы - параметра
			Сч = 0;
			Для каждого лКолонкаТаблицыИзБуфера Из ДополнительныеПараметры.МассивКолонок Цикл
				
				Если ЗначениеЗаполнено(лКолонкаТаблицыИзБуфера) Тогда 
					лИмяКолонки = лКолонкаТаблицыИзБуфера;
				Иначе
					лИмяКолонки = ИмяНовогоПараметраСтруктуры(""Поле"", лЗначение.Колонки);
				КонецЕсли;
				
				Если лТипыКолонок <> Неопределено И лТипыКолонок[Сч] <> Неопределено Тогда 
					Массив = Новый Массив;
					Массив.Добавить(лТипыКолонок[Сч]);
					ОписаниеТиповС = Новый ОписаниеТипов(Массив);
					лЗначение.Колонки.Добавить(лИмяКолонки, ОписаниеТиповС);
				Иначе
					лЗначение.Колонки.Добавить(лИмяКолонки);
				КонецЕсли;
				
				Сч = Сч + 1;
				
			КонецЦикла; 
		Иначе
			// определяем колонку, из которой будем формировать массив значений для параметра
			лНомерКолонки = ДополнительныеПараметры.МассивКолонок.Найти(ИмяКолонки);
		КонецЕсли;
		
		// формируем значение - параметр
		лПерваяСрока = ?(лПропуститьПервуюСтроку = Истина, 2, 1);
		Для Сч = лПерваяСрока По ДополнительныеПараметры.Текст.КоличествоСтрок() Цикл
			
			лМассивКолонокСтрокиТаблицы = гРазложитьСтрокуВМассивПодстрок( 
				ДополнительныеПараметры.Текст.ПолучитьСтроку(сч), 
				ДополнительныеПараметры.Разделитель);
			
			Если ИмяКолонки = Неопределено Тогда 
				
				лНоваяСтрока = лЗначение.Добавить();				
				
				лКоличествоКолонок = Мин(лМассивКолонокСтрокиТаблицы.Количество(), ДополнительныеПараметры.МассивКолонок.Количество());
					
				Сч1 = 0;
				Пока Сч1 < лКоличествоКолонок Цикл
					
					Если лТипыКолонок = Неопределено Тогда 
						лНоваяСтрока[Сч1] = лМассивКолонокСтрокиТаблицы[Сч1];
					Иначе
						лТекущийТипКолонки = лТипыКолонок[Сч1];
						Если лТекущийТипКолонки = Тип(""Число"") Тогда 
							лНоваяСтрока[Сч1] = СтрокаВЧисло(лМассивКолонокСтрокиТаблицы[Сч1]);
						ИначеЕсли лТекущийТипКолонки = Тип(""Дата"") Тогда 
							лНоваяСтрока[Сч1] = СтрокаВДату(лМассивКолонокСтрокиТаблицы[Сч1]);
						Иначе
							лНоваяСтрока[Сч1] = лМассивКолонокСтрокиТаблицы[Сч1]; // #рефакторинг вывести ошибку
						КонецЕсли;
					КонецЕсли;
					
					Сч1 = Сч1 + 1;
				КонецЦикла; 
			Иначе
				лЗначение.Добавить(лМассивКолонокСтрокиТаблицы[лНомерКолонки]);
			КонецЕсли;
		КонецЦикла; 
		лСтрокаСПараметром.Значение = ЗначениеВСтрокуВнутр(лЗначение);
	КонецЕсли;
	
	лСтрокаСПараметром.ЗначениеВФорме = ФормированиеПредставленияЗначения(лСтрокаСПараметром.Значение);
	
	ДанныеПоТипу = СписокТипов.НайтиПоЗначению(лСтрокаСПараметром.Тип); // простые типы
	
	лСтрокаСПараметром.ТипВФорме    = ДанныеПоТипу.Представление;
	лСтрокаСПараметром.КартинкаТипа = ДанныеПоТипу.Картинка;
	
КонецПроцедуры // ОбработкаДействияВыгрузитьВПараметрНаСервере()

Процедура ВыгрузитьРезультатЗапросаВDBF()
КонецПроцедуры // ВыгрузитьРезультатЗапросаВDBF()

Процедура ВыгрузитьРезультатЗапросаВXML()
КонецПроцедуры // ВыгрузитьРезультатЗапросаВXML()

&НаСервереБезКонтекста
Процедура ВыполнитьДействияСРезультатомЗапроса(АдресРезультата, ДополнительныеПараметры)
	
	лРезультатЗапроса = ПолучитьТаблицуРезультатаНаСервере(АдресРезультата);
	лДействие         = ДополнительныеПараметры.Действие;
	Для Каждого СтрокаРезультатаЗапроса ИЗ лРезультатЗапроса Цикл
		лОбъект = СтрокаРезультатаЗапроса[ДополнительныеПараметры.ИмяКолонки].ПолучитьОбъект();
		Если лДействие = Константы().УстановитьПометкуУдаления Тогда 
			лОбъект.УстановитьПометкуУдаления(ДополнительныеПараметры.ПометкаУдаления);
		ИначеЕсли лДействие = Константы().Провести Тогда 
			лОбъект.Записать(?(ДополнительныеПараметры.Провести, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.ОтменаПроведения));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьДействияСРезультатомЗапроса()

&НаКлиенте
Процедура ОбработкаДействияВыполнитьКод(ИдентификаторКода = Неопределено) Экспорт
 	
	лИдентификаторТекущегоЗапроса = ИдентификаторЗапроса();
	
	//АдресРезультата = ПоместитьРезультатВХранилищеНаСервере(РезультатЗапроса());
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить(""АдресРезультата""          , АдресРезультата);
	ПараметрыОткрытияФормы.Вставить(""ИсполняемыйКод""           , ПолучитьКодДляЗапроса(лИдентификаторТекущегоЗапроса));
	ПараметрыОткрытияФормы.Вставить(""СвойстваТаблицыРезультата"", СвойстваРеквизитаРезультатЗапроса);
	ПараметрыОткрытияФормы.Вставить(""ИдентификаторЗапроса""     , лИдентификаторТекущегоЗапроса);
	ПараметрыОткрытияФормы.Вставить(""ИдентификаторКода""        , ИдентификаторКода);
	ПараметрыОткрытияФормы.Вставить(""ЭтотОбъектФорма""          , ЭтотОбъектФорма);
	ПараметрыОткрытияФормы.Вставить(""ТекстТекущегоЗапроса""     , ТекстТекущегоЗапроса);
	ПараметрыОткрытияФормы.Вставить(""СтруктураКЭШ""             , СтруктураКЭШ);
	ПараметрыОткрытияФормы.Вставить(""СеансовыеДанные""          , СеансовыеДанные);
	
	ОткрытьФорму(""ВнешняяОбработка.КонсольЗапросов.Форма.ФормаУпрИсполняемыйКод"", 
		ПараметрыОткрытияФормы, 
		ЭтаФорма,,,, 
		Новый ОписаниеОповещения(""ОбработкаВыполненияКода"", Вычислить(ЭтотОбъектФорма)), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры // ОбработкаДействияВыполнитьКод()

&НаКлиенте
Процедура ОбработкаДействияПоказатьСекциюСЗапросами(Видимость)
	Элементы.ГруппаДанныеЗапроса.Видимость = Видимость;
	Элементы.ПоказатьПараметры.Доступность = Видимость;
	ОформитьКнопкуПоказатьСекциюСЗапросами(Видимость);
КонецПроцедуры // ОбработкаДействияПоказатьСекциюСЗапросами()

&НаКлиенте
Функция ПолучитьКодДляЗапроса(ИдентификаторЗапроса)
	лСтрокиСИсполняемымКодом = ИсполняемыйКод.НайтиСтроки(Новый Структура(""ИдентификаторЗапроса"", ИдентификаторЗапроса));
	лРезультат = Новый Массив;
	Для каждого лСтрокСИсполняемымКодом Из лСтрокиСИсполняемымКодом Цикл
		лРезультат.Добавить(Новый Структура(""Имя, Текст, Идентификатор"", лСтрокСИсполняемымКодом.Имя, лСтрокСИсполняемымКодом.Текст, лСтрокСИсполняемымКодом.ИдентификаторСтроки));
	КонецЦикла; 
	
	Возврат лРезультат
КонецФункции // ПолучитьКодДляЗапроса()

// Возвращает представление значения.
//
// Параметры:
//	Значение - передаваемое значение.
//
&НаСервереБезКонтекста
Функция ФормированиеПредставленияЗначения(Знач ЗначениеИсходное) Экспорт
	
	ВозврЗнач = """";
	
	Если ТипЗнч(ЗначениеИсходное) = Тип(""Строка"") Тогда 
		
		Если ЗначениеИсходное = """" Тогда 
			Возврат ЗначениеИсходное
		Иначе
			Попытка
				Значение = ЗначениеИзСтрокиВнутр(ЗначениеИсходное);
			Исключение
				Возврат """"
			КонецПопытки; 
		КонецЕсли;
	Иначе
		Значение = ЗначениеИсходное
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип(""ТаблицаЗначений"") Тогда 
		ВыводнаяСтрока = ""Таблица: строк = %КоличествоСтрок%, колонок = %КоличествоКолонок%"";
		ВыводнаяСтрока = СтрЗаменить(ВыводнаяСтрока, ""%КоличествоСтрок%"", Строка(Значение.Количество()));
		ВыводнаяСтрока = СтрЗаменить(ВыводнаяСтрока, ""%КоличествоКолонок%"", Строка(Значение.Колонки.Количество()));
		ВозврЗнач = ВыводнаяСтрока;
	ИначеЕсли ТипЗнч(Значение) = Тип(""Массив"") Тогда 
		ВыводнаяСтрока = ""Массив: размер = %КоличествоСтрок%"";
		ВыводнаяСтрока = СтрЗаменить(ВыводнаяСтрока, ""%КоличествоСтрок%"", Строка(Значение.Количество()));
		ВозврЗнач = ВыводнаяСтрока;
	ИначеЕсли ТипЗнч(Значение) = Тип(""МоментВремени"") Тогда 
		ВозврЗнач = Строка(Значение.Дата) + ""; "" + Строка(Значение.Ссылка);
	ИначеЕсли ТипЗнч(Значение) = Тип(""Граница"") Тогда 
		ВозврЗнач = Строка(Значение.Значение) + ""; "" + Строка(Значение.ВидГраницы);
	Иначе
		ВозврЗнач = Значение
	КонецЕсли;	
	
	Возврат ВозврЗнач;
КонецФункции // ФормированиеПредставленияЗначения()

&НаКлиенте
Процедура СохранитьЗапросыВОблако(Режим, СохранитьТекущийЗапрос = Ложь)
	
	СохранитьЗначенияПоЗапросу(мТекущаяСтрокаДереваЗапросов);
	
	лТекущийЗапрос       = СтрокаСЗапросом(мТекущаяСтрокаДереваЗапросов);
	лИмяЭлементаИзОблака = ИмяФайлаСЗапросом;
	
	Если Не СохранитьТекущийЗапрос Тогда 
		Если ПустаяСтрока(лИмяЭлементаИзОблака) Тогда 
			лИмяЭлементаИзОблака = ""Запросы от "" + Формат(ТекущаяДата(), ""ДФ='dd.MM.yyyy ЧЧ_ММ_сс'"");
		Иначе
			лИмяЭлементаИзОблака = СтрЗаменить(лИмяЭлементаИзОблака, "".sel"", """");
		КонецЕсли;
		лТипДиалога =  мТипыИсточниковДанных.Пакет;
	Иначе
		лИмяЭлементаИзОблака = лТекущийЗапрос.Имя;
		лТипДиалога          = мТипыИсточниковДанных.Запрос;
	КонецЕсли;
	
	лИдентификаторСессии = гВосстановитьИдентификаторСессииConsqueryCloud();
	
	Если Не ЗначениеЗаполнено(лИдентификаторСессии) Тогда 
		Оповестить(""НеобходимоПереподключиться"", , ЭтаФорма);
		Возврат;
	КонецЕсли;
		
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить(""Режим""              , Режим);
	ПараметрыОткрытияФормы.Вставить(""Тип""                , лТипДиалога);
	ПараметрыОткрытияФормы.Вставить(""ИмяЭлементаИзОблака"", лИмяЭлементаИзОблака);
	
	ОткрытьФорму(""ВнешняяОбработка.КонсольЗапросов.Форма.ФормаУпрДиалогВыбораИсточникаДанныхИзОблака"", 
		ПараметрыОткрытияФормы, 
		ЭтаФорма,,,, 
		Новый ОписаниеОповещения(""СохранитьЗапросыВОблакоПродолжение"", Вычислить(ЭтотОбъектФорма), Новый Структура(""ИдентификаторСессии, ТекущаяСтрокаДереваЗапросов"", лИдентификаторСессии, мТекущаяСтрокаДереваЗапросов)), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // СохранитьЗапросыВОблако()

&НаКлиентеНаСервереБезКонтекста
Функция НовоеИмяФайлаДляОперации(Операция, ДополнительныеПараметры)
	
	Возврат ""Новый файл"";
	
КонецФункции // НовоеИмяФайлаДляОперации()

&НаКлиенте
Процедура СохранитьВФайл(Операция, ФормироватьНовоеИмяЕслиНеНайденФайл, ДополнительныеПараметры)
	
	Перем ИмяФайла, ПутьКФайлу, ФайлСуществует;
	
	Если ФормироватьНовоеИмяЕслиНеНайденФайл Тогда 
		
		Если ДополнительныеПараметры.Свойство(""ИмяФайла"", ИмяФайла) Тогда 
		
			лФайл = Новый Файл(ИмяФайла); 
			
			Если Не ДополнительныеПараметры.Свойство(""ФайлСуществует"", ФайлСуществует) Тогда 
				
				ПараметрыОповещения = Новый Структура();
				ПараметрыОповещения.Вставить(""ТранзитныеПараметры""                , ДополнительныеПараметры);
				ПараметрыОповещения.Вставить(""Операция""                           , Операция);
				ПараметрыОповещения.Вставить(""ФормироватьНовоеИмяЕслиНеНайденФайл"", ФормироватьНовоеИмяЕслиНеНайденФайл);
				
				лФайл.НачатьПроверкуСуществования(Новый ОписаниеОповещения(""ОкончаниеПроверкиСуществованияФайла"", ЭтаФорма, ДополнительныеПараметры));
				
				Возврат;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ФайлСуществует = Истина Тогда 
		ПутьКФайлу = лФайл.Путь; 
		ИмяФайла   = лФайл.Имя;	
	Иначе
		ИмяФайла = НовоеИмяФайлаДляОперации(Операция, ДополнительныеПараметры);
	КонецЕсли;
	
	лДиалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	ЗаполнитьЗначенияСвойств(лДиалог, ДополнительныеПараметры); // ПолноеИмяФайла, Каталог, Заголовок, Фильтр, Расширение
	
	лОповещение = Новый ОписаниеОповещения(""СохранитьВФайлПродолжение"", ЭтаФорма, ДополнительныеПараметры);
	
	лДиалог.Показать(лОповещение);	
	
КонецПроцедуры // СохранитьВФайл()

&НаКлиенте
Процедура СохранитьЗапросыВФайлНачало(ВызыватьДиалог, СохранитьТекущийЗапрос, ДополнительныеПараметры)
	
	Перем ТекущийЗапрос, СохранитьЗначенияПоЗапросу, ФайлСуществует;
	
	Если СохранитьТекущийЗапрос И мТекущаяСтрокаДереваЗапросов = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда 
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	лПутьКФайлу     = """";                                                                                                
	лПолноеИмяФайла = ИмяФайлаСЗапросом;
	
	Если Не ДополнительныеПараметры.Свойство(""СохранитьЗначенияПоЗапросу"", СохранитьЗначенияПоЗапросу) ИЛИ СохранитьЗначенияПоЗапросу = Истина Тогда 
		СохранитьЗначенияПоЗапросу(мТекущаяСтрокаДереваЗапросов);
	КонецЕсли;
	
	Если Не СохранитьТекущийЗапрос Тогда 
		Если Не ПустаяСтрока(лПолноеИмяФайла) Тогда 
			
			лВремФайл = Новый Файл(лПолноеИмяФайла); 
			
			Если Не ДополнительныеПараметры.Свойство(""ФайлСуществует"", ФайлСуществует) Тогда 
				лТранзитныеПараметры = Новый Структура;
				лТранзитныеПараметры.Вставить(""ВызыватьДиалог""         , ВызыватьДиалог);
				лТранзитныеПараметры.Вставить(""СохранитьТекущийЗапрос"" , СохранитьТекущийЗапрос);
				лТранзитныеПараметры.Вставить(""ДополнительныеПараметры"", ДополнительныеПараметры);
					
				ПараметрыОповещения = Новый Структура();
				ПараметрыОповещения.Вставить(""ТранзитныеПараметры"", лТранзитныеПараметры);
				ПараметрыОповещения.Вставить(""ИсточникПроверки""   , ""СохранитьЗапросыВФайлНачало"");
				лВремФайл.НачатьПроверкуСуществования(Новый ОписаниеОповещения(""ОкончаниеПроверкиСуществования"", ЭтаФорма, ПараметрыОповещения));
				Возврат;
			КонецЕсли;
			
			Если ФайлСуществует Тогда 
				лПутьКФайлу = лВремФайл.Путь; 
				лИмяФайла   = лВремФайл.Имя;	
			Иначе
				лИмяФайла      = СтрЗаменить(лПолноеИмяФайла, "".sel"", """");
				ВызыватьДиалог = Истина;
			КонецЕсли;
		Иначе
			лИмяФайла      = ""Запросы от "" + Формат(ТекущаяДата(), ""ДФ='dd.MM.yyyy ЧЧ_ММ_сс'"");
			ВызыватьДиалог = Истина;
		КонецЕсли;
		
		лЗаголовок  = ""Укажите имя файла для сохранения запросов"";
		лФильтр     = ""Файлы с запросами (*.sel)|*.sel"";
		лРасширение = ""sel"";
	Иначе
		лИмяФайла   = ТекущийЗапрос.Имя;
		лЗаголовок  = ""Укажите имя файла для сохранения текущего запроса"";
		лФильтр     = ""Файлы веток (*.sl)|*.sl"";
		лРасширение = ""sl"";
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда 
		ДополнительныеПараметры = Новый Структура
	КонецЕсли;
	
	Если СохранитьТекущийЗапрос Тогда 
		ДополнительныеПараметры.Вставить(""ТекущийЗапрос"", ТекущийЗапрос);
	КонецЕсли;
	
	лОповещение = Новый ОписаниеОповещения(""СохранитьЗапросыВФайлПродолжение"", ЭтаФорма, ДополнительныеПараметры);
	
	Если ВызыватьДиалог Тогда		
		
		лДиалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		
		лДиалог.ПолноеИмяФайла = лПутьКФайлу + лИмяФайла;
		лДиалог.Каталог        = лПутьКФайлу;
		лДиалог.Заголовок      = лЗаголовок;
		лДиалог.Фильтр         = лФильтр;
		лДиалог.Расширение     = лРасширение;
		
		лДиалог.Показать(лОповещение);
		
	Иначе
		
		лМассивыВыбранныхФайлов = Новый Массив;
		лМассивыВыбранныхФайлов.Добавить(лПолноеИмяФайла);
		
		ВыполнитьОбработкуОповещения(лОповещение, лМассивыВыбранныхФайлов);
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьЗапросыВФайлНачало()

&НаСервереБезКонтекста
Функция ЗначениеВСтрокуСервер(Значение)
	ВозврЗнач = ЗначениеВСтрокуВнутр(Значение);
	Возврат ВозврЗнач;
КонецФункции	

Функция ВыполнитьНаСервере(КодДляВыполнения)
	Попытка
		Выполнить(КодДляВыполнения);
		Возврат Истина;
	Исключение
		лТекстОшибки = ОписаниеОшибки();
		гВывестиОшибкуВыполненияКода(лТекстОшибки, КодДляВыполнения);
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура НовыйФайлЗапросовДействие()
	
	ИмяФайлаСЗапросом = Неопределено;
	
	ОчиститьДанныеПоЗапросам();
	ДобавитьНовуюСтрокуСЗапросом();
	
	ОбновитьЗаголовок();
	
КонецПроцедуры // НовыйФайлЗапросовДействие()

&НаСервереБезКонтекста
Функция ПолучитьКоординатыОшибкиНаСервере(ТекстОшибки)
	Возврат ОбъектОбработки().гПолучитьКоординатыОшибки(ТекстОшибки);
КонецФункции

&НаКлиенте
Процедура ПеренестиВеткуРекурсивно(СтрокаПриемника, СтрокаИсточника)
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);		
	
	Для Каждого ПодчиненнаяВеткаИсточника из СтрокаИсточника.ПолучитьЭлементы() Цикл
		лНоваяСтрока = СтрокаПриемника.ПолучитьЭлементы().Добавить();
		ПеренестиВеткуРекурсивно(лНоваяСтрока, ПодчиненнаяВеткаИсточника);
	КонецЦикла;
	
КонецПроцедуры // ПеренестиВеткуРекурсивно()


#КонецОбласти

#Область ВыполнениеЗапроса

// Запускает выполнение запроса.
//
&НаКлиенте
Процедура ЗапуститьВыполнениеЗапроса(Удаленно = Ложь)
	
	СохранитьЗначенияПоЗапросу(мТекущаяСтрокаДереваЗапросов);

	ТекущийЗапрос = СтрокаСЗапросом();
	
	Если ПустаяСтрока(ТекущийЗапрос.ТекстЗапроса) Тогда 
		ТекстПредупреждения = НСтр(""ru = 'Введите текст запроса.'"");
		ПоказатьПредупреждение(Новый ОписаниеОповещения(""ПоказатьПредупреждениеЗавершение"", ЭтаФорма), ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ТекущийЗапрос.ТекстЗапроса = СтрЗаменить(ТекущийЗапрос.ТекстЗапроса, ""|"", """");
	
	// Определение текста запроса.
	ВыделенныйТекст = ВыделенныйТекстТекущегоЗапроса();
	Если Не ПустаяСтрока(ВыделенныйТекст) Тогда 
		ТекстЗапроса = ВыделенныйТекст;
	Иначе
		ТекстЗапроса = ТекущийЗапрос.ТекстЗапроса;
	КонецЕсли;	
	
	ТекстСообщения   = """";
	
	ОчиститьСообщения();
	
	Ошибка = Ложь;
	
	Если Не Ошибка Тогда 
		
		Если Удаленно Тогда 
			
			лИмяПараметраСоСтрокойСоединения = Константы().ИмяПараметраСоединенияСИБ;
			
			лПараметрыСоединенияСИБ = гНайтиЗначениеБезУчетаРегистраВПараметрахТекЗапросаНаСервере(
				лИмяПараметраСоСтрокойСоединения);
			
			лИмяПараметраСВерсией       = Константы().ВерсияВнешнейБазы;
			лПараметрыВерсияВнешнейБазы = ПараметрыТекущегоЗапроса.НайтиСтроки(Новый Структура(""Имя"", лИмяПараметраСВерсией));
			Если лПараметрыСоединенияСИБ.Количество() = 0 ИЛИ лПараметрыВерсияВнешнейБазы.Количество() = 0 Тогда 
				лСтрокаПредупреждения = ""Запрос к внешней базе не выполнен.
				|Отсутствует параметр %ИмяПараметраСоединенияСИБ% ИЛИ %ВерсияВнешнейБазы% для подключения к внешней базе.
				|Для добавления параметров текущей базы можно воспользоваться кнопкой """"Настройки подключения к внешней базе в параметры"""""";
				лСтрокаПредупреждения = СтрЗаменить(лСтрокаПредупреждения, ""%ИмяПараметраСоединенияСИБ%"", Константы().ИмяПараметраСоединенияСИБ);
				лСтрокаПредупреждения = СтрЗаменить(лСтрокаПредупреждения, ""%ВерсияВнешнейБазы%""        , Константы().ВерсияВнешнейБазы);
				ПоказатьПредупреждение(Новый ОписаниеОповещения(""ПоказатьПредупреждениеЗавершение"", ЭтаФорма), лСтрокаПредупреждения, 10);
				Возврат;
			Иначе
				лМассивПараметровСоединенияСИБ = Новый Массив;
				Для Каждого лПараметрСоединенияСИБ Из лПараметрыСоединенияСИБ Цикл 
					
					лСтруктурасПараметровСоединениясИБ = Новый Структура;
					лСтруктурасПараметровСоединениясИБ.Вставить(""ПараметрСоединения"", лПараметрСоединенияСИБ.ЗначениеВФорме);
					лСтруктурасПараметровСоединениясИБ.Вставить(""ИдентификаторБазы"" , 
						Сред(лПараметрСоединенияСИБ.Имя, 
						СтрДлина(лИмяПараметраСоСтрокойСоединения) + 1, 
						СтрДлина(лПараметрСоединенияСИБ.Имя) - СтрДлина(лИмяПараметраСоСтрокойСоединения)));
					
					лМассивПараметровСоединенияСИБ.Добавить(лСтруктурасПараметровСоединениясИБ);
				КонецЦикла;
			КонецЕсли;
			ПараметрыПодключенияКВнешнейБазе = Новый Структура;
			ПараметрыПодключенияКВнешнейБазе.Вставить(""ПараметрыСоединенияСИБ"", лМассивПараметровСоединенияСИБ);
			ПараметрыПодключенияКВнешнейБазе.Вставить(""ВерсияВнешнейБазы""     , лПараметрыВерсияВнешнейБазы[0].ЗначениеВФорме);
		Иначе
			ПараметрыПодключенияКВнешнейБазе = Неопределено;
		КонецЕсли;
		
		ВыполнитьЗапросСервер(ТекстЗапроса, ТекущийЗапрос.Идентификатор, ТекстСообщения, Ошибка, ПараметрыПодключенияКВнешнейБазе);
		
		Если Не Ошибка Тогда 
			лИмяРодителяЭлементаРезультатЗапроса = СвойстваРеквизитаРезультатЗапроса.ИмяЭлементаРодителя;
			Элементы[лИмяРодителяЭлементаРезультатЗапроса].Видимость = Истина;
			ОформитьКнопкуПоказатьРезультат(Элементы[лИмяРодителяЭлементаРезультатЗапроса].Видимость);
			ТекущийЭлемент = Элементы[СвойстваРеквизитаРезультатЗапроса.ИмяРеквизита].ПодчиненныеЭлементы[0];		
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСостояниеРезультатаЗапроса();
	
	Если Не ПустаяСтрока(ТекстСообщения) Тогда 
		ПоказатьСообщениеПользователю(ТекстСообщения, Объект, УникальныйИдентификатор, ""Объект"");
	КонецЕсли;	
	
	ПерерисоватьПодменюТаблицЗапроса(Элементы.ПодменюВременныеТаблицы, Истина);
	ПерерисоватьПодменюТаблицЗапроса(Элементы.ПодменюТаблицыПакета, Ложь);
	
КонецПроцедуры // ЗапуститьВыполнениеЗапроса()

Процедура УстановитьПараметрыЗапроса(Запрос, ИдентификаторЗапроса)
	
	//#Рефакторинг контекстный переход на сервер ?
	
	ПараметрыЗапросовТЗ = ПолучитьИзВременногоХранилища(АдресПараметровЗапросов);
	
	// добавляем локальные параметры текущего запроса
	лМассивПараметровЗапроса = ПараметрыЗапросовТЗ.НайтиСтроки(Новый Структура(""ИдентификаторЗапроса"", ИдентификаторЗапроса));
	Для каждого ЭлементПараметр из лМассивПараметровЗапроса Цикл 
		Если ЭлементПараметр.Значение <> """" Тогда 
			Запрос.УстановитьПараметр(ЭлементПараметр.Имя, ЗначениеИзСтрокиВнутр(ЭлементПараметр.Значение));
		КонецЕсли;
	КонецЦикла;
	
	// добавляем глобальные параметры
	лМассивПараметровЗапроса = ПараметрыЗапросовТЗ.НайтиСтроки(Новый Структура(""ИдентификаторЗапроса"", """"));
	Для каждого ЭлементПараметр из лМассивПараметровЗапроса Цикл 
		Если ЭлементПараметр.Значение <> """" Тогда 
			Запрос.УстановитьПараметр(ЭлементПараметр.Имя, ЗначениеИзСтрокиВнутр(ЭлементПараметр.Значение));
		КонецЕсли;
	КонецЦикла;
	
	АдресПараметровЗапросов = ПоместитьВоВременноеХранилище(ПараметрыЗапросовТЗ, УникальныйИдентификатор)
	
КонецПроцедуры	// УстановитьПараметрыЗапроса()

&НаКлиенте
Процедура ПоказатьПараметры(Команда)
	Элементы.ГруппаПараметрыЗапросов.Видимость = Не Элементы.ГруппаПараметрыЗапросов.Видимость;
	ОформитьКнопкуПоказатьПараметры(Элементы.ГруппаПараметрыЗапросов.Видимость);
КонецПроцедуры

Процедура ДобавитьВременныеТаблицыИзПараметров(Запрос)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	лПараметрыДляДобавленияВоВременнуюТаблицу = ПараметрыТекущегоЗапроса.НайтиСтроки(Новый Структура(""ДобавлятьВоВременнуюТаблицу"", Истина));
	Если лПараметрыДляДобавленияВоВременнуюТаблицу.Количество() > 0 Тогда 
		
		Массив = Новый Массив;
		Массив.Добавить(Тип(""Строка""));
		КС = Новый КвалификаторыСтроки(500);
		ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
		
		Для каждого лПараметрДляДобавленияВоВременнуюТаблицу Из лПараметрыДляДобавленияВоВременнуюТаблицу Цикл
			Запрос.Текст = ""Выбрать * Поместить "" + лПараметрДляДобавленияВоВременнуюТаблицу.Имя + "" из &"" + лПараметрДляДобавленияВоВременнуюТаблицу.Имя + "" КАК Выборка"";

			ТЗПараметры = ЗначениеИзСтрокиВнутр(лПараметрДляДобавленияВоВременнуюТаблицу.Значение);
			
			Если ТипЗнч(ТЗПараметры) <> Тип(""ТаблицаЗначений"") Тогда 
				ВызватьИсключение(""Параметр "" + лПараметрДляДобавленияВоВременнуюТаблицу.Имя + "" должен иметь тип """"ТаблицаЗначений"""""");
			КонецЕсли;
			
			ТЗПараметрыНовая = Новый ТаблицаЗначений;

			Для Каждого Колонка Из ТЗПараметры.Колонки Цикл
				Если ЗначениеЗаполнено(Колонка.ТипЗначения) Тогда 
					ТЗПараметрыНовая.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
				Иначе
					ТЗПараметрыНовая.Колонки.Добавить(Колонка.Имя, ОписаниеТиповС);
				КонецЕсли;
			КонецЦикла;

			Для Каждого Строка Из ТЗПараметры Цикл
				НоваяСтрока = ТЗПараметрыНовая.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;

			Запрос.УстановитьПараметр(лПараметрДляДобавленияВоВременнуюТаблицу.Имя, ТЗПараметрыНовая);
			Запрос.Выполнить();
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры //ДобавитьВременныеТаблицыИзПараметров()

Процедура ВыполнитьЗапросСервер(ТекстЗапроса, ИдентификаторЗапроса, ТекстСообщения, Ошибка, ПараметрыПодключенияКВнешнейБазе = Неопределено) Экспорт
	
	лМассивРезультатовЗапроса = Новый Массив;
	
	Если ПараметрыПодключенияКВнешнейБазе = Неопределено Тогда 
		
		Запрос = Новый Запрос;
		
		ДобавитьВременныеТаблицыИзПараметров(Запрос);
		
		Запрос.Текст = ТекстЗапроса;
		
		УстановитьПараметрыЗапроса(Запрос, ИдентификаторЗапроса);
		
		Попытка
			НачалоВыполненияЗапроса = ТекущаяДата();
			
			Если ПараметрыПодключенияКВнешнейБазе = Неопределено И ПоказыватьЗапросыПакета Тогда 
				лРезультатПакета = Запрос.ВыполнитьПакет();
				лРезультат       = лРезультатПакета[лРезультатПакета.ВГраница()];
			Иначе
				лРезультат = Запрос.Выполнить();
			КонецЕсли;
			
			КонецВыполненияЗапроса = ТекущаяДата();
			
			лМассивРезультатовЗапроса.Добавить(Новый Структура(""РезультатЗапроса, НачалоВыполненияЗапроса, КонецВыполненияЗапроса"", 
				лРезультат, НачалоВыполненияЗапроса, КонецВыполненияЗапроса));
			
		Исключение
			Ошибка = Истина;
			мПоказатьОшибкуНаСервере(ОписаниеОшибки());
		КонецПопытки;
		
	Иначе
		
		Для Каждого лПараметрПодключениякВнешнейБазе Из ПараметрыПодключенияКВнешнейБазе.ПараметрыСоединенияСИБ Цикл 
			
			V8COM = Коннектор(лПараметрПодключениякВнешнейБазе.ПараметрСоединения, ПараметрыПодключенияКВнешнейБазе.ВерсияВнешнейБазы);
			
			Если V8COM = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			Запрос = V8COM.NewObject(""Запрос"");
			
			Запрос.Текст = ТекстЗапроса;
			
			УстановитьПараметрыЗапроса(Запрос, ИдентификаторЗапроса);
			
			Попытка
				
				НачалоВыполненияЗапроса = ТекущаяДата();
				
				Если ПараметрыПодключенияКВнешнейБазе = Неопределено И ПоказыватьЗапросыПакета Тогда 
					лРезультатПакета = Запрос.ВыполнитьПакет();
					лРезультат       = лРезультатПакета[лРезультатПакета.ВГраница()];
				Иначе
					лРезультат = Запрос.Выполнить();
				КонецЕсли;
				
				КонецВыполненияЗапроса = ТекущаяДата();
				
			Исключение
				Ошибка = Истина;
				мПоказатьОшибкуНаСервере(ОписаниеОшибки());
			КонецПопытки;
			
			лМассивРезультатовЗапроса.Добавить(Новый Структура(""РезультатЗапроса, НачалоВыполненияЗапроса, КонецВыполненияЗапроса, ИдентификаторБазы"", 
				лРезультат, НачалоВыполненияЗапроса, КонецВыполненияЗапроса, лПараметрПодключениякВнешнейБазе.ИдентификаторБазы));
			
		КонецЦикла;
	КонецЕсли;
			
	лРезультатЗапроса                  = Неопределено;
	лДобавлятьПолеСИдентификаторомБазы = (лМассивРезультатовЗапроса.Количество() > 1);
	
	Для Каждого лТекРезультатЗапроса из лМассивРезультатовЗапроса Цикл 
		
		Если ПараметрыПодключенияКВнешнейБазе = Неопределено Тогда 
			
			Если РежимТестированияВыполненияЗапроса Тогда 
				лТекстСообщенияТестированияВыполненияЗапроса = СтрШаблон(""Время выполнения запроса: %1 сек, %2 мин"", 
					КонецВыполненияЗапроса - НачалоВыполненияЗапроса, Окр((КонецВыполненияЗапроса - НачалоВыполненияЗапроса)/60, 2));
				Сообщить(лТекстСообщенияТестированияВыполненияЗапроса);
				Сообщить(СтрШаблон(""Начало выполнения запроса: %1""   , лТекРезультатЗапроса.НачалоВыполненияЗапроса));
				Сообщить(СтрШаблон(""Окончание выполнения запроса: %1"", лТекРезультатЗапроса.КонецВыполненияЗапроса));
				Сообщить(СтрШаблон(""Размер выборки: %1 строк""        , лТекРезультатЗапроса.РезультатЗапроса.Выбрать().Количество()));
				
				Продолжить;
			КонецЕсли;
			
			Если РезультатЗапросаВДерево Тогда 
				лОбходРезультатаЗапроса = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией;
			Иначе
				лОбходРезультатаЗапроса = ОбходРезультатаЗапроса.Прямой;
			КонецЕсли;
			
			лРезультатЗапроса = лТекРезультатЗапроса.РезультатЗапроса.Выгрузить(лОбходРезультатаЗапроса);
			
			Если ПоказыватьВременныеТаблицы Тогда 

				лСоответствиеВременныеТаблицы = Новый Соответствие;
				
				лВременныеТаблицы = ПолучитьТаблицыЗапросаНаСервере(Запрос.Текст, Истина);
				
				Для Каждого лТекущаяТаблица Из лВременныеТаблицы Цикл
					лСоответствиеВременныеТаблицы.Вставить(лТекущаяТаблица.Представление, ОбъектОбработки().гВременнаяТаблицаВТЗ(лТекущаяТаблица, Запрос.МенеджерВременныхТаблиц));
				КонецЦикла;
				
				АдресСоответствияВременныхТаблиц = ПоместитьВоВременноеХранилище(лСоответствиеВременныеТаблицы, УникальныйИдентификатор);
			Иначе
				АдресСоответствияВременныхТаблиц = """";
			КонецЕсли;
			
			Если ПоказыватьЗапросыПакета Тогда 

				лСоответствиеТаблицПакета = Новый Соответствие;
				
				лТаблицыПакета = ПолучитьТаблицыЗапросаНаСервере(Запрос.Текст, Ложь);
				
				Для Каждого лТекущаяТаблица Из лТаблицыПакета Цикл
					лСоответствиеТаблицПакета.Вставить(лТекущаяТаблица.Представление, лРезультатПакета[лТекущаяТаблица.Значение].Выгрузить());
				КонецЦикла;
				
				АдресСоответствияТаблицПакета = ПоместитьВоВременноеХранилище(лСоответствиеТаблицПакета, УникальныйИдентификатор);
			Иначе
				АдресСоответствияТаблицПакета = """";
			КонецЕсли;
		Иначе
			лРезультатЗапроса = СформироватьТаблицуПоВнешнейВыборке(лТекРезультатЗапроса.РезультатЗапроса.Выгрузить(), 
				?(лДобавлятьПолеСИдентификаторомБазы, лТекРезультатЗапроса.ИдентификаторБазы, Неопределено), лРезультатЗапроса);			
		КонецЕсли;
	КонецЦикла;
	
	Если лРезультатЗапроса <> Неопределено Тогда 
		АдресРезультата = ПоместитьВоВременноеХранилище(лРезультатЗапроса, УникальныйИдентификатор);
		СоздатьРеквизитCРезультатомЗапроса(АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьЗапросСервер()

&НаКлиенте
Процедура ДеревоЗапросовПараметрыЗапросовЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоЗапросовПараметрыЗапросов.ТекущиеДанные;	
	
	Если ТекущиеДанные.Значение = Неопределено Тогда
		Элемент.ВыбиратьТип = Истина;
	Иначе
		Элемент.ВыбиратьТип = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСекциюСЗапросами(Команда)
	ОбработкаДействияПоказатьСекциюСЗапросами(Не Элементы.ГруппаДанныеЗапроса.Видимость);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультат(Команда)
	лИмяРодителяЭлементаРезультатЗапроса = СвойстваРеквизитаРезультатЗапроса.ИмяЭлементаРодителя;
	лЭлементРезультатЗапроса             = Элементы[лИмяРодителяЭлементаРезультатЗапроса];
	лЭлементРезультатЗапроса.Видимость   = Не лЭлементРезультатЗапроса.Видимость;
	ОформитьКнопкуПоказатьРезультат(лЭлементРезультатЗапроса.Видимость);
КонецПроцедуры

&НаКлиенте
Процедура ПозицияКурсора(Команда)
	Элементы.ФормаКнопкаПозицияКурсора.Пометка = Не Элементы.ФормаКнопкаПозицияКурсора.Пометка;
	АвтоопределениеПозицииКурсора = Элементы.ФормаКнопкаПозицияКурсора.Пометка;	
	ВывестиПозициюКурсора();
КонецПроцедуры

#КонецОбласти


#КонецОбласти

мВыполняетсяЗакрытие              = Ложь;
мКэшЗначений                      = Новый Структура;
мДлительнаяОперацияЗапущена       = Ложь;
мОперацияПослеСохраненияИзменений = Неопределено;
",
{4,35,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",e9687fdc-7755-439c-8c4c-c2e3ff7dc837}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,1,0,0,
{0,0},
{0,0}
},
{9,
{7},0,"ИмяФайлаСЗапросом",
{1,1,
{"ru","Имя файла с запросом"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{10},0,"ДеревоЗапросов",
{1,1,
{"ru","Дерево запросов"}
},
{"Pattern",
{"#",e603c0f2-92fb-4d47-8f38-a44a381cf235}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,1,0,5,
{5,1,0,"ТекстЗапроса",
{1,1,
{"ru","Текст запроса"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"СпособВыгрузки",
{1,1,
{"ru","Способ выгрузки"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"ПараметрыИБ",
{1,1,
{"ru","Параметры ИБ"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"Идентификатор",
{1,1,
{"ru","Идентификатор"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"Имя",
{1,1,
{"ru","Имя"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{14},0,"РежимОтладки",
{1,1,
{"ru","Режим отладки"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{17},0,"ПутьКФайлуСОбработкой",
{1,1,
{"ru","Путь к файлу с обработкой"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{19},0,"АдресРезультата",
{1,1,
{"ru","Адрес результата"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{20},0,"АдресСпискаСпецПолей",
{1,1,
{"ru","Адрес списка спец полей"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{21},0,"ТекстТекущегоЗапроса",
{1,1,
{"ru","Текст текущего запроса"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,1,0,0,
{0,0},
{0,0}
},
{9,
{24},0,"ПараметрыТекущегоЗапроса",
{1,1,
{"ru","Параметры текущего запроса"}
},
{"Pattern",
{"#",acf6192e-81ca-46ef-93a6-5a6968b78663}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,1,0,9,
{5,1,0,"Имя",
{1,1,
{"ru","Имя"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"Тип",
{1,1,
{"ru","Тип"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"Значение",
{1,1,
{"ru","Значение"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"ТипВФорме",
{1,1,
{"ru","Тип в форме"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"ЗначениеВФорме",
{1,1,
{"ru","Значение"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"КартинкаТипа",
{1,1,
{"ru","Картинка типа"}
},
{"Pattern",
{"#",e6f51714-91cb-4dce-94fe-90ae3e3e1ad1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,8,0,"ГлобальныйПараметр",
{1,1,
{"ru","Глобальный параметр"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,7,0,"ИдентификаторСтроки",
{1,1,
{"ru","Идентификатор строки"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,9,0,"ДобавлятьВоВременнуюТаблицу",
{1,1,
{"ru","Добавлять во временную таблицу"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{25},0,"СписокТипов",
{1,1,
{"ru","Список типов"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,1,"ElementType",
{"#",f5c65050-3bbb-11d5-b988-0050bae0a95d,
{"Pattern",
{"#",280f5f0e-9c8a-49cc-bf6d-4d296cc17a63},
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3},
{"B"},
{"S"},
{"D"},
{"N",10,0,0},
{"#",dcfc3784-a14f-4786-ac7b-c82db5ba275f},
{"#",f5c65050-3bbb-11d5-b988-0050bae0a95d}
}
}
},
{0,0}
},
{9,
{26},0,"ИсполняемыйКод",
{1,1,
{"ru","Исполняемый код"}
},
{"Pattern",
{"#",acf6192e-81ca-46ef-93a6-5a6968b78663}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,4,
{5,1,0,"Имя",
{1,1,
{"ru","Имя"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"Текст",
{1,1,
{"ru","Текст"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"ИдентификаторЗапроса",
{1,1,
{"ru","Идентификатор запроса"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"ИдентификаторСтроки",
{1,1,
{"ru","Идентификатор строки"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{27},0,"ПараметрыЗапросов",
{1,1,
{"ru","Параметры запросов"}
},
{"Pattern",
{"#",acf6192e-81ca-46ef-93a6-5a6968b78663}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,9,
{5,1,0,"Имя",
{1,1,
{"ru","Имя"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"Тип",
{1,1,
{"ru","Тип"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"Значение",
{1,1,
{"ru","Значение"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"ТипВФорме",
{1,1,
{"ru","Тип в форме"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"ЗначениеВФорме",
{1,1,
{"ru","Значение"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"КартинкаТипа",
{1,1,
{"ru","Картинка типа"}
},
{"Pattern",
{"#",e6f51714-91cb-4dce-94fe-90ae3e3e1ad1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,7,0,"ИдентификаторЗапроса",
{1,1,
{"ru","Идентификатор запроса"}
},
{"Pattern",
{"S",40,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,8,0,"ИдентификаторСтроки",
{1,1,
{"ru","Идентификатор строки"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,9,0,"ДобавлятьВоВременнуюТаблицу",
{1,1,
{"ru","Добавлять во временную таблицу"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{30},0,"ПлатформаАктуальна",
{1,1,
{"ru","Платформа актуальна"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{31},0,"РежимСовместимости",
{1,1,
{"ru","Режим совместимости"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{32},0,"ВерсияПлатформы",
{1,1,
{"ru","Версия платформы"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{33},0,"ЗначенияПоУмолчанию",
{1,1,
{"ru","Значения по умолчанию"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{34},0,"ЭтотОбъектФорма",
{1,1,
{"ru","Этот объект форма"}
},
{"Pattern",
{"S",100,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{37},0,"АвтоопределениеПозицииКурсора",
{1,1,
{"ru","Автоопределение позиции курсора"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{39},0,"СвойстваРеквизитаРезультатЗапроса",
{1,1,
{"ru","Реквизиты таблицы результата"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{40},0,"ИмяПользователяВОблаке",
{1,1,
{"ru","Имя пользователя в облаке"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{41},0,"ИдентификаторСессии",
{1,1,
{"ru","Идентификатор сессии"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{42},0,"СписокИзмененныхСтрок",
{1,1,
{"ru","Список измененных строк"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{43},0,"СохранитьПередВыполнением",
{1,1,
{"ru","Сохранить перед выполнением"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{44},0,"ЭтотОбъектДоступен",
{1,1,
{"ru","Этот объект доступен"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"РезультатЗапросаВДерево",
{1,1,
{"ru","Результат запроса в дерево"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{3},0,"ПоказыватьВременныеТаблицы",
{1,1,
{"ru","Показывать временные таблицы"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{4},0,"АдресСоответствияВременныхТаблиц",
{1,1,
{"ru","Адрес соответствия временных таблиц"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{5},0,"СеансовыеДанные",
{1,1,
{"ru","Сеансовые данные"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{6},0,"СтруктураКЭШ",
{1,1,
{"ru","Структура КЭШ"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{8},0,"ПоказыватьЗапросыПакета",
{1,1,
{"ru","Показывать запросы пакета"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{9},0,"АдресСоответствияТаблицПакета",
{1,1,
{"ru","Адрес соответствия таблиц пакета"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{11},0,"РежимТестированияВыполненияЗапроса",
{1,1,
{"ru","Режим тестирования выполнения запроса"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{12},0,"АдресПараметровЗапросов",
{1,1,
{"ru","Адрес параметров запросов"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{13},0,"КолонкиПараметровТекущегоЗапроса",
{1,1,
{"ru","Колонки параметров текущего запроса"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{15},0,"КолонкиПараметровЗапросов",
{1,1,
{"ru","Колонки параметров запросов"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,1,"ПараметрыТекущегоЗапроса.ГлобальныйПараметр","ПараметрыТекущегоЗапроса.ГлобальныйПараметр",
{2,
{24},
{8}
},
{1,
{24}
},
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxjb25kaXRp
b25hbEFwcGVhcmFuY2U+DQoJCTxpdGVtPg0KCQkJPHNlbGVjdGlvbj4NCgkJCQk8
aXRlbT4NCgkJCQkJPGZpZWxkPtCf0LDRgNCw0LzQtdGC0YDRi9CX0LDQv9GA0L7R
gdC+0LLQmNC80Y88L2ZpZWxkPg0KCQkJCTwvaXRlbT4NCgkJCTwvc2VsZWN0aW9u
Pg0KCQkJPGZpbHRlcj4NCgkJCQk8aXRlbSB4c2k6dHlwZT0iRmlsdGVySXRlbUNv
bXBhcmlzb24iPg0KCQkJCQk8bGVmdCB4c2k6dHlwZT0iZGNzY29yOkZpZWxkIj7Q
n9Cw0YDQsNC80LXRgtGA0YvQotC10LrRg9GJ0LXQs9C+0JfQsNC/0YDQvtGB0LAu
0JPQu9C+0LHQsNC70YzQvdGL0LnQn9Cw0YDQsNC80LXRgtGAPC9sZWZ0Pg0KCQkJ
CQk8Y29tcGFyaXNvblR5cGU+RXF1YWw8L2NvbXBhcmlzb25UeXBlPg0KCQkJCQk8
cmlnaHQgeHNpOnR5cGU9InhzOmJvb2xlYW4iPnRydWU8L3JpZ2h0Pg0KCQkJCTwv
aXRlbT4NCgkJCTwvZmlsdGVyPg0KCQkJPGFwcGVhcmFuY2U+DQoJCQkJPGRjc2Nv
cjppdGVtIHhzaTp0eXBlPSJTZXR0aW5nc1BhcmFtZXRlclZhbHVlIj4NCgkJCQkJ
PGRjc2NvcjpwYXJhbWV0ZXI+0KbQstC10YLQpNC+0L3QsDwvZGNzY29yOnBhcmFt
ZXRlcj4NCgkJCQkJPGRjc2Nvcjp2YWx1ZSB4c2k6dHlwZT0idjh1aTpDb2xvciI+
d2ViOlJlZDwvZGNzY29yOnZhbHVlPg0KCQkJCTwvZGNzY29yOml0ZW0+DQoJCQk8
L2FwcGVhcmFuY2U+DQoJCTwvaXRlbT4NCgk8L2NvbmRpdGlvbmFsQXBwZWFyYW5j
ZT4NCgk8b3V0cHV0UGFyYW1ldGVycy8+DQo8L1NldHRpbmdzPg==}
},
{0,4,
{0,"ДействиеВыбора",
{"Pattern"},1},
{0,"РежимВыбора",
{"Pattern",
{"B"}
},1},
{0,"ЗакрыватьПриВыборе",
{"Pattern",
{"B"}
},1},
{0,"Заголовок",
{"Pattern",
{"S"}
},1}
},
{0,34,
{9,
{3,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗаполнитьПараметрыИзЗапроса",
{1,1,
{"ru","Обновить параметры запроса"}
},
{1,1,
{"ru","Обновить параметры запроса"}
},
{0,
{0,
{"B",1},0}
},
{0,120,0},
{4,1,
{0,a064544f-6037-48ca-b19f-8ad63e43af23},"",-1,-1,1,0,""},"ЗаполнитьПараметрыИзЗапроса",1,0,0,
{0,0},1,0,1,0,0,1},
{9,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"НастроитьДополнительно",
{1,1,
{"ru","Дополнительно"}
},
{1,1,
{"ru","Настроить дополнительно"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,6b909f65-95a4-4697-8ca0-c8f331227b9a},"",-1,-1,1,0,""},"ОткрытьФормуНастроекАвтоСохранения",2,0,0,
{0,0},1,0,1,0,0,1},
{9,
{5,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыполнитьЗапрос",
{1,1,
{"ru","Выполнить"}
},
{1,1,
{"ru","Выполнить запрос"}
},
{0,
{0,
{"B",1},0}
},
{0,118,0},
{4,1,
{0,0ce78048-0196-4f80-a781-9829cdb7f43e},"",-1,-1,1,0,""},"ВыполнитьЗапрос",2,0,0,
{0,0},1,0,1,0,0,1},
{9,
{7,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СохранитьЗапросыВФайл",
{1,1,
{"ru","Сохранить запросы в файл"}
},
{1,1,
{"ru","Сохранить запросы в файл"}
},
{0,
{0,
{"B",1},0}
},
{0,83,8},
{4,1,
{0,818ab7d0-4654-4542-bd5e-fd9d1352b5a1},"",-1,-1,1,0,""},"КомандаСохранитьЗапросыВФайл",1,0,0,
{0,0},1,0,1,0,0,1},
{9,
{8,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СохранитьЗапросыВНовыйФайл",
{1,1,
{"ru","Сохранить как ... (локально)"}
},
{1,1,
{"ru","Сохранить запросы как"}
},
{0,
{0,
{"B",1},0}
},
{0,83,12},
{4,1,
{0,ed0bec43-4633-416c-8c08-0384ca444e32},"",-1,-1,1,0,""},"КомандаСохранитьЗапросыВНовыйФайл",1,0,0,
{0,0},1,0,1,0,0,1},
{9,
{10,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ОткрытьФайлСЗапросами",
{1,1,
{"ru","Открыть"}
},
{1,1,
{"ru","Открыть файл с запросами"}
},
{0,
{0,
{"B",1},0}
},
{0,79,12},
{4,1,
{0,785362cb-3756-48ed-87d2-292ded17054a},"",-1,-1,1,0,""},"ОткрытьФайлСЗапросами",1,0,0,
{0,0},1,0,1,0,0,1},
{9,
{17,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыполнитьКод",
{1,1,
{"ru","Выполнить код"}
},
{1,1,
{"ru","Выполнить код"}
},
{0,
{0,
{"B",1},0}
},
{0,116,0},
{4,1,
{0,a6cbfd77-fcf0-40f4-a8de-ee0d3e580fe6},"",-1,-1,1,0,""},"ВыполнитьКод",1,0,0,
{0,0},1,0,1,0,0,1},
{9,
{19,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПоказатьДеревоЗапросов",
{1,1,
{"ru","Показать/скрыть дерево запросов"}
},
{1,0},
{0,
{0,
{"B",1},0}
},
{0,72,16},
{4,0,
{0},"",-1,-1,1,0,""},"ПоказатьДеревоЗапросов",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{20,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"Intellisense",
{1,1,
{"ru","Intellisense"}
},
{1,1,
{"ru","Intellisense"}
},
{0,
{0,
{"B",1},0}
},
{0,32,8},
{4,1,
{0,affb1617-24bc-4170-9c84-0902cc3ef206},"",-1,-1,1,0,""},"КнопкаДействияКнопкаМенюIntellisense",1,0,0,
{0,0},1,0,1,0,0,1},
{9,
{21,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ДобавитьКомментарий",
{1,1,
{"ru","Добавить комментарий"}
},
{1,1,
{"ru","Добавить комментарий"}
},
{0,
{0,
{"B",1},0}
},
{0,111,8},
{4,0,
{0},"",-1,-1,1,0,""},"ДобавитьКомментарий",3,1,0,
{0,0},1,0,1,0,0,1},
{9,
{22,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"УдалитьКомментарий",
{1,1,
{"ru","Удалить комментарии"}
},
{1,1,
{"ru","Удалить комментарий"}
},
{0,
{0,
{"B",1},0}
},
{0,111,12},
{4,0,
{0},"",-1,-1,1,0,""},"УдалитьКомментарий",3,1,0,
{0,0},1,0,1,0,0,1},
{9,
{23,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КонструкторЗапроса",
{1,1,
{"ru","Конструктор запроса"}
},
{1,1,
{"ru","Конструктор запроса"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,1f046bc2-d6c5-46a3-a459-b2c0508f86fb},"",-1,-1,1,0,""},"КонструкторЗапроса",2,0,0,
{0,0},1,0,1,0,0,1},
{9,
{24,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СкопироватьОбработкуДляОтладки",
{1,1,
{"ru","Скопировать обработку для отладки"}
},
{1,1,
{"ru","Скопировать обработку для отладки"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,f62488ee-f90c-47f7-929d-f42ec11a1e63},"",-1,-1,1,0,""},"СкопироватьОбработкуДляОтладки",1,0,0,
{0,0},1,0,1,0,0,1},
{9,
{25,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗагрузитьЗапросыДляОтладки",
{1,1,
{"ru","Загрузить запросы для отладки"}
},
{1,1,
{"ru","Загрузить запросы для отладки"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,83c8f18d-8701-41f3-bef4-53f88adbb868},"",-1,-1,1,0,""},"ЗагрузитьЗапросыДляОтладки",1,0,0,
{0,0},1,0,1,0,0,1},
{9,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПоказатьРезультат",
{1,1,
{"ru","Показать результат"}
},
{1,1,
{"ru","Показать результат"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПоказатьРезультат",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПоказатьСекциюСЗапросами",
{1,1,
{"ru","Показать секцию с запросами"}
},
{1,1,
{"ru","Показать секцию с запросами"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПоказатьСекциюСЗапросами",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{6,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПоказатьПараметры",
{1,1,
{"ru","Показать параметры"}
},
{1,1,
{"ru","Показать параметры"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПоказатьПараметры",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{15,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"МенюИнформация",
{1,1,
{"ru","..."}
},
{1,1,
{"ru","Меню информация"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"МенюИнформация",0,0,0,
{0,0},1,0,1,0,0,1},
{9,
{14,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"НовыйФайлЗапросов",
{1,1,
{"ru","Новый файл запросов"}
},
{1,1,
{"ru","Новый файл запросов"}
},
{0,
{0,
{"B",1},0}
},
{0,78,8},
{4,1,
{0,894afc03-9904-465d-b671-f555ffb9b21c},"",-1,-1,1,0,""},"НовыйФайлЗапросов",1,0,0,
{0,0},1,0,1,0,0,1},
{9,
{16,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"МенюДополнительно",
{1,1,
{"ru","..."}
},
{1,1,
{"ru","Меню информация"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,258a0e41-255f-4239-8457-8b0e1983786c},"",-1,-1,1,0,""},"МенюДополнительно",0,0,0,
{0,0},1,0,1,0,0,1},
{9,
{9,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ДобавитьПараметрИзБуфера",
{1,1,
{"ru","Создать параметр из буфера"}
},
{1,1,
{"ru","Создать параметр из буфера"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ДобавитьПараметрИзБуфера",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{11,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПозицияКурсора",
{1,1,
{"ru","Позиция курсора"}
},
{1,1,
{"ru","Позиция курсора"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПозицияКурсора",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{12,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"НоваяСтрокаНаТомЖеУровне",
{1,1,
{"ru","Новая строка на том же уровне"}
},
{1,1,
{"ru","Новая строка на том же уровне"}
},
{0,
{0,
{"B",1},0}
},
{0,78,12},
{4,0,
{0},"",-1,-1,1,0,""},"НоваяСтрокаНаТомЖеУровне",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{13,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПараметрыПодключенияКОблаку",
{1,1,
{"ru","Параметры подключения к облаку"}
},
{1,1,
{"ru","Параметры подключения к облаку"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,6ff3ddbd-56e3-4ddf-a5bf-048c1e2dfb2f},"",-1,-1,1,0,""},"ПараметрыПодключенияКОблаку",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{18,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ДобавитьЗапросИзОблака",
{1,1,
{"ru","Добавить запрос из облака"}
},
{1,1,
{"ru","Добавить запрос из облака"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,785362cb-3756-48ed-87d2-292ded17054a},"",-1,-1,1,0,""},"ДобавитьЗапросИзОблака",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{26,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыгрузитьВсеЗапросыВОблако",
{1,1,
{"ru","Выгрузить все запросы в облако"}
},
{1,1,
{"ru","Выгрузить все запросы в облако"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ВыгрузитьВсеЗапросыВОблако",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{27,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыгрузитьТекущийЗапросВОблако",
{1,1,
{"ru","Выгрузить текущий запрос в облако"}
},
{1,1,
{"ru","Выгрузить текущий запрос в облако"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ВыгрузитьТекущийЗапросВОблако",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{28,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ОткрытьНастройкиОбработки",
{1,1,
{"ru","Открыть настройки обработки"}
},
{1,1,
{"ru","Открыть настройки обработки"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,ee7c4a5b-2d9b-4087-ae3e-947792085f09},"",-1,-1,1,0,""},"КомандаОткрытьНастройкиОбработки",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{29,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"СгруппироватьЗапросы",
{1,1,
{"ru","Сгруппировать запросы"}
},
{1,1,
{"ru","Сгруппировать запросы"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"СгруппироватьЗапросы",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{30,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыполнитьЗапросУдаленно",
{1,1,
{"ru","Выполнить запрос удаленно"}
},
{1,1,
{"ru","Выполнить запрос удаленно"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ВыполнитьЗапросУдаленно",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{31,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"НастройкиПодключенияКВнешнейБазеВПараметры",
{1,1,
{"ru","Настройки подключения к внешней базе в параметры"}
},
{1,1,
{"ru","Настройки подключения к внешней базе в параметры"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,6b909f65-95a4-4697-8ca0-c8f331227b9a},"",-1,-1,1,0,""},"НастройкиПодключенияКВнешнейБазеВПараметры",3,0,0,
{0,0},1,0,1,0,0,1},
{9,
{32,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗагрузитьСохраненныеПечатныеФормы",
{1,1,
{"ru","Загрузить сохраненные печатные формы"}
},
{1,1,
{"ru","Загрузить сохраненные печатные формы"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,a7707ed1-39b0-418f-974d-4d500d27a9c6},"",-1,-1,1,0,""},"ЗагрузитьСохраненныеПечатныеФормы",1,0,0,
{0,0},1,0,1,0,0,1},
{9,
{33,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗагрузитьСохраненныеСхемыСКД",
{1,1,
{"ru","Загрузить сохраненные схемы СКД"}
},
{1,1,
{"ru","Загрузить сохраненные схемы СКД"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,6b322d7c-3fa2-437d-b311-fd70c4c7ed46},"",-1,-1,1,0,""},"ЗагрузитьСохраненныеСхемыСКД",1,0,0,
{0,0},1,0,1,0,0,2},
{9,
{34,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ЗагрузитьСериализованныеОбъекты",
{1,1,
{"ru","Загрузить сериализованные объекты"}
},
{1,1,
{"ru","Загрузить сериализованные объекты"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,3bdc16c8-6a96-4467-9442-a8e4804b3fa2},"",-1,-1,1,0,""},"ЗагрузитьСериализованныеОбъекты",1,0,0,
{0,0},1,0,1,0,0,2}
},
{0,0},
{0,0},0,0}