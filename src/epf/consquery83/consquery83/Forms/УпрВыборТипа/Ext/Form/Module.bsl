// Консоль запросов 1С от Евгения Лавелина
// e-mail:support@consquery.ru
// http: www.consquery.ru

// Форма выбора типа от Евгения Лавелина
// e-mail:mail@lavelin.ru
// http: www.lavelin.ru
// 	
// Использованы иконки с ресурсов: 
// 	https://www.flaticon.com/ru/authors/vectoricons, 
// 	https://www.freepik.com/,  
// 	https://www.flaticon.com/ru/authors/voysla
// 	
// Использован код для проставления флажков: https://infostart.ru/public/356823/
// 	
// Места для редактирования помечены строкой: #ДЛЯ РЕДАКТИРОВАНИЯ#
// При добавлении нового типа, необходимо добавить в библиотеку картинок (макет typesimages с архивом *.zip)
//  файл с картинкой для данного типа. Имя файла должно совпадать с полем "ИмяДляКонструктора"
// 	

#Область ОписаниеПеременных

&НаКлиенте
Перем ТекущийФильтр;

#КонецОбласти

#Область ОбработчикиСобытийФормы

Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Перем ТекВыбранныйТип, НастройкиФормы;
	
	ИнициализацияФормы();
	
	НастройкиФормы = ПолучитьЗначениеИзКэша(КлючиКэша().НастройкиФормы);
	
	Если Не НастройкиФормы.МножественныйВыбор Тогда 
		Элементы.ДеревоТиповДанныхПометка.Видимость = Ложь;
	КонецЕсли;
	
	Если Не НастройкиФормы.ПоказыватьДополнительныеПоля Тогда 
		Элементы.ГруппаДополнительныеПоля.Видимость = Ложь;
	КонецЕсли;
	
	Параметры.Свойство("АдресСеансовыхДанных", АдресСеансовыхДанных);
	Параметры.Свойство("АдресТЗСИнформациейПоТипам", АдресТЗСИнформациейПоТипам);

	Если Параметры.Свойство("ВыбранныеТипы") Тогда 
		Для Каждого ТекВыбранныйТип Из Параметры.ВыбранныеТипы Цикл 
			ВыбранныеТипы.Добавить(ИдентификаторТипа(ТекВыбранныйТип));
		КонецЦикла;
	КонецЕсли;

	Если Параметры.Свойство("Заголовок") Тогда 
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	ОбновитьСписокТипов();
	
	Если ВыбранныеТипы.Количество() Тогда 
		// позиционирование на выбранном типе
		лИдентификаторСтроки = Неопределено;
		ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(лИдентификаторСтроки, ДеревоТиповДанных.ПолучитьЭлементы(), ВыбранныеТипы[0].Значение);
		Если лИдентификаторСтроки <> Неопределено Тогда 
			Элементы.ДеревоТиповДанных.ТекущаяСтрока = лИдентификаторСтроки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	УдалитьВременныеФайлыФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФильтрОчистка(Элемент, СтандартнаяОбработка)
	ПодключитьОбработчикОжидания("УстановитьФильтр", 1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ФильтрИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	ПодключитьОбработчикОжидания("УстановитьФильтр", 1, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоТиповДанных

&НаКлиенте
Процедура ДеревоТиповДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Перем НастройкиФормы, ТекущиеДанные;
	
	НастройкиФормы = ПолучитьЗначениеИзКэша(КлючиКэша().НастройкиФормы);
	Если Не НастройкиФормы.ИспользоватьДвойнойКликМыши Тогда 
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы.ДеревоТиповДанных.ТекущиеДанные;
	
	Если Не НастройкиФормы.МножественныйВыбор И ПустаяСтрока(ТекущиеДанные.ИмяДляКонструктора) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Пометка = 0 Тогда 
		ТекущиеДанные.Пометка = 1;
		ОбработатьПометкуПоТекущимДанным(ТекущиеДанные);
	КонецЕсли;
	
	ВыбратьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповДанныхПометкаПриИзменении(Элемент)
	
	лТекущиеДанные = Элементы.ДеревоТиповДанных.ТекущиеДанные;
	
	ОбработатьПометкуПоТекущимДанным(лТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выбрать(Команда)
	ВыбратьИЗакрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УниверсальныеПроцедурыИФункции

// Получает идентификатор (метод ПолучитьИдентификатор()) строки дерева значений для заданного значения поля строки
// дерева.
// Используется для позиционирования курсора в иерархических списках.
// 
Процедура ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИдентификаторСтроки, КоллекцияЭлементовДерева, ИдТипа, ПрекратитьПоиск = Ложь)
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл
		
		Если ПрекратитьПоиск Тогда
			Возврат;
		КонецЕсли;

		Если ИдентификаторТипа(СтрокаДерева) = ИдТипа Тогда 
			
			ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
			
			ПрекратитьПоиск = Истина;
			
			Возврат;
			
		КонецЕсли;
		
		КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
		
		Если КоллекцияЭлементов.Количество() > 0 Тогда
			
			ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИдентификаторСтроки, КоллекцияЭлементов, ИдТипа, ПрекратитьПоиск);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает необхоидмые каталоги по указанному пути
// Параметры:
//   Путь - Строка - строка вида "c:\Каталог1\Каталог2\Каталог3\Каталог4\"
//
// Возвращаемое значение:
//   Булево - признак успешного создания каталогов по указанному пути
//
//&НаКлиентеНаСервереБезКонтекста
&НаКлиентеНаСервереБезКонтекста
Функция СоздатьКаталогРекурсивно(Путь)
	
	Если Путь = "" Тогда 
		Возврат Ложь
	КонецЕсли;
	
	лФайл = Новый Файл(Путь);
	Если лФайл.Существует() Тогда 
		Возврат Истина
	КонецЕсли;
	
	лМассив     = СтрРазделить(Путь, "\");
	лПодкаталог = "";
	Сч          = 0;
	Пока Сч < лМассив.Количество() - 1 Цикл
		лПодкаталог = лПодкаталог + ?(лПодкаталог = "", "", "\") + лМассив[Сч];
		Сч = Сч + 1
	КонецЦикла;
	
	СоздатьКаталогРекурсивно(лПодкаталог);
	
	СоздатьКаталог(Путь);
	
	лФайл = Новый Файл(Путь);                                                                             
	Возврат лФайл.Существует();
	
КонецФункции // СоздатьКаталогРекурсивно()

// Функция заменяет все некорректные символы на выбранный символ-заменитель
// Параметры:
//   ИсходноеНазвание - Строка - название, которое необходимо преобразовать
//   ДополнительныеСимволы - Строка - дополнительные доступные символы
//
// Возвращаемое значение:
//   Строка - преобразованная строка
//
//&НаКлиентеНаСервереБезКонтекста
&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьВПравильноеНазвание(Знач ИсходноеНазвание, ДополнительныеСимволы = "")
	
	Если СокрЛП(ИсходноеНазвание) = "" Тогда 
		Возврат "";
	КонецЕсли;
	
	ЗаменительНекорректныхСимволов = "_";
	ДоступныеСимволы               = ЗаменительНекорректныхСимволов + "qwertyuiopasdfghjklzxcvbnmйцукенгшщзхъфывапролджэячсмитьбю" + ДополнительныеСимволы;
	ДоступныеНеНачальныеСимволы    = "1234567890";
	
	сч = 0;
	Пока сч <= СтрДлина(ИсходноеНазвание) Цикл
		сч = сч + 1;
		лТекСимвол = Сред(НРег(ИсходноеНазвание), сч, 1);
		Если сч = 1 Тогда 
			Если Найти(ДоступныеСимволы, лТекСимвол) = 0 Тогда
				ИсходноеНазвание = ЗаменительНекорректныхСимволов + Сред(ИсходноеНазвание, 2); 
				сч = сч - 1;
			КонецЕсли;
		Иначе
			Если Найти(ДоступныеСимволы + ДоступныеНеНачальныеСимволы, лТекСимвол) = 0 Тогда
				ИсходноеНазвание = СтрЗаменить(ИсходноеНазвание, лТекСимвол, ЗаменительНекорректныхСимволов);
				сч = сч - 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИсходноеНазвание
	
КонецФункции // ПреобразоватьВПравильноеНазвание()

#КонецОбласти

#Область РаботаСКартинками

// Возвращает картинку по имени на основании файла, выгруженного из макета с картинками
// Параметры:
//   ИмяКартинки - Строка - имя файла без расширения
//   ПутьККартинке - Строка - пусть к каталогу с файлами-картнками (см. функцию ИзвлечьКартинкиОбработкиНаСервере)
//   ВернутьАдрес - Булево - 
//   	Истина - картинка помещается во временное хранилище и возврается ее адрес в этом хранилище
//   	Ложь - возвращается сама картинка
//
// Возвращаемое значение:
//   [Строка | Картинка | Неопределено] - адрес во временном хранилище или сама картинка (см. параметр ВернутьАдрес)
//
&НаСервереБезКонтекста
Функция ПолучитьВнешнююКартинку(ИмяКартинки, ПутьККартинке, ВернутьАдрес = Ложь)
	
	лПолныйПутьККартинке = СтрШаблон("%1\%2.png", ПутьККартинке, ИмяКартинки);
	
	Попытка		
		
		Если ВернутьАдрес Тогда 
			Результат = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(лПолныйПутьККартинке))
		Иначе 
			Результат = Новый Картинка(лПолныйПутьККартинке);
		КонецЕсли;		
		
	Исключение
		
		Результат = Неопределено;
		
	КонецПопытки; 
	
	Возврат Результат
	
КонецФункции // ПолучитьВнешнююКартинку()

#КонецОбласти

// Инициализирует переменные формы
// 
Процедура ИнициализацияФормы()

	Результат = Новый Структура();

	// #ДЛЯ РЕДАКТИРОВАНИЯ# + настройки формы - допустимо изменение значений ключей настроек
	Результат.Вставить("ФильтроватьПоПолноеИмя", Истина);
	Результат.Вставить("ФильтроватьКоллекцияXML", Истина);
	Результат.Вставить("ФильтроватьКоллекция", Истина);
	Результат.Вставить("ФильтроватьИмяДляКонструктора", Истина);
	Результат.Вставить("ФильтроватьИмя", Истина);
	Результат.Вставить("ФильтроватьВид", Истина);
	Результат.Вставить("ПоказыватьДополнительныеПоля", Истина);
	Результат.Вставить("ИспользоватьДвойнойКликМыши", Истина);
	Результат.Вставить("МножественныйВыбор", Ложь);
	// #ДЛЯ РЕДАКТИРОВАНИЯ# - настройки формы

	УстановитьЗначениеВКэш(КлючиКэша().НастройкиФормы, Результат);
	
КонецПроцедуры // ИнициализацияФормы()
           
// Обертка для доступа к процедурам / функциям модуля обработки 
// 
&НаСервереБезКонтекста
Функция ОбъектОбработки()
	
	Возврат Новый ("ВнешняяОбработкаОбъект.КонсольЗапросов");
	
КонецФункции

#Область КЭШ

// Возвращает структуру КЭШа
// 
&НаКлиентеНаСервереБезКонтекста
Функция КлючиКэша()
	
	Результат = Новый Структура;
	//Результат.Вставить("КаталогСКартинками", "КаталогСКартинками");
	//Результат.Вставить("ИдентификаторСеанса", "ИдентификаторСеанса"); ##Рефакторинг
	Результат.Вставить("ПутьККартинкам", "ПутьККартинкам");
	Результат.Вставить("НастройкиФормы", "НастройкиФормы");	
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗначениеИзКэша(Ключ)

	Перем Значение;
	
	Если КЭШ = Неопределено Тогда 
		Возврат Неопределено
	КонецЕсли;
	
	Если Не КЭШ.Свойство(Ключ, Значение) Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции // ПолучитьЗначениеИзКЭШ()

Процедура УстановитьЗначениеВКэш(Ключ, Значение)
	
	Если КЭШ = Неопределено Тогда 
		КЭШ = Новый Структура;
	КонецЕсли;

	КЭШ.Вставить(Ключ, Значение);
	
КонецПроцедуры // УстановитьЗначениеВКЭШ()

#КонецОбласти

// Формирует результат выбора формы
//
// Параметры:
//   Нет
//
// Возвращаемое значение:
//   Массив - массив структур [Имя, URIПространстваИмен, ЭтоXMLТип] с данными по выбранным типам
//
Функция РезультатВыбораНаСервере()
	
	Перем ТаблицаСТипами, РезультатВыбора, ДанныеВыбранногоТипа;
	
	ТаблицаСТипами = ПолучитьИзВременногоХранилища(АдресТЗСИнформациейПоТипам);
	РезультатВыбора = Новый Массив;
	Для Каждого ТекВыбранныйТип Из ВыбранныеТипы Цикл 
		
		ДанныеВыбранногоТипа = ТаблицаСТипами.НайтиСтроки(ИдентификаторТипаВСтруктуру(ТекВыбранныйТип.Значение));
		
		Если ДанныеВыбранногоТипа.Количество() = 0 Тогда 
			// при открытии формы передали тип, отсутствующий в доступных типах. Исключаем его при возврате.
			Продолжить;
		КонецЕсли;
		
		ДанныеВыбранногоТипа = ДанныеВыбранногоТипа[0];
		
		СтруктураСДаннымиТипа = Новый Структура;
		СтруктураСДаннымиТипа.Вставить("ИмяДляКонструктора", ДанныеВыбранногоТипа.ИмяДляКонструктора);
		СтруктураСДаннымиТипа.Вставить("Имя", ДанныеВыбранногоТипа.Имя);
		СтруктураСДаннымиТипа.Вставить("URIПространстваИмен", ДанныеВыбранногоТипа.URIПространстваИмен);
		СтруктураСДаннымиТипа.Вставить("Картинка", ДанныеВыбранногоТипа.Картинка);
		СтруктураСДаннымиТипа.Вставить("Представление", ДанныеВыбранногоТипа.Представление);
		СтруктураСДаннымиТипа.Вставить("Вид", ДанныеВыбранногоТипа.Вид);
		РезультатВыбора.Добавить(СтруктураСДаннымиТипа);
	КонецЦикла;

	Результат = Новый Структура;
	Результат.Вставить("ВыбранныеТипы"        , РезультатВыбора);
	Результат.Вставить("АдресТЗСИнформациейПоТипам", АдресТЗСИнформациейПоТипам);
	
	Возврат Результат;
	
КонецФункции // РезультатВыбораНаСервере()

// Возвращает имя типа в списке 
//
// Параметры:
//   ДетальнаяИнформацияПоТипу - СтрокаТаблицыЗначений - детальная информация по типу (см. ДетальнаяИнформацияПоТипам)
//   ЭтоКоллекция - Булево - признак группирующей строки или самого типа
//
// Возвращаемое значение:
//   Строка - имя типа для подстановки в список
//
&НаСервереБезКонтекста
Функция ИмяТипа(ДетальнаяИнформацияПоТипу, ЭтоКоллекция)
	
	Если ЭтоКоллекция Тогда 
		Возврат ДетальнаяИнформацияПоТипу.Коллекция
	Иначе
		Возврат ДетальнаяИнформацияПоТипу.Имя
	КонецЕсли;
	
КонецФункции

// Возвращает строку, по которой можно идентифицировать тип
//
// Параметры:
//   Тип - Структура - структура с обязательными ключами {"ИмяДляКонструктора, URIПространстваИмен"}
//
// Возвращаемое значение:
//   Строка - идентификатор типа
//
&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторТипа(Тип)
	//Возврат Тип.ИмяДляКонструктора + "|" + Тип.URIПространстваИмен;
	Возврат Тип.ИмяДляКонструктора;
КонецФункции

// Возвращает структури из строки ИдТипа, сформированной функцией ИдентификаторТипа()
//
// Параметры:
//   ИдТипа - Строка - строка, сформированная функциоей ИдентификаторТипа()
//
// Возвращаемое значение:
//   Структура - {"ИмяДляКонструктора, URIПространстваИмен"}
//
&НаСервереБезКонтекста
Функция ИдентификаторТипаВСтруктуру(ИдТипа)
	
	//МассивПолей = СтрРазделить(ИдТипа, "|", Истина);
	//
	//Результат = Новый Структура("ИмяДляКонструктора, URIПространстваИмен",
	//	МассивПолей[0],
	//	МассивПолей[1]
	//);

	Результат = Новый Структура("ИмяДляКонструктора", ИдТипа);
	
	Возврат Результат;
	
КонецФункции

// Фильтрует переданную таблицу с типами по переданному фильтру в полях по списку полей из детальной информации, 
// указанных в настройках формы
//
// Параметры:
//   ТаблицаСТипами - ТаблицаЗначений - исходная таблица с типами
//   Фильтр - Строка - строка-фильтр, где через пробел указаны подстроки для фильтрации по полям из детальной 
//   			информации по типам, входящих в таком же порядке, в котором они указаны в фильтре
//   			Так же доступны символы:
//		   			^ - для уточнения поиска по подстроке, с которой начинаются фильтруемые поля
//   				$- для уточнения поиска по подстроке, на которую заканчиваются фильтруемые поля
//   НастройкиФормы - Структура - структура настроек формы, в которой указаны правила фильтрации/не фильтрации полей 
//   			 из детальной информации по типам. 
//   			 По полю "Представление" фильтрации происходит всегда.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица со строками, в которых указанные в настройках поля удовлетворяют фильтру
//
&НаСервереБезКонтекста
Функция ТаблицаСТипамиФильтрованная(ТаблицаСТипами, Фильтр, НастройкиФормы)

	Если ПустаяСтрока(СокрЛП(Фильтр)) Тогда 
		Возврат ТаблицаСТипами;
	КонецЕсли;
	
	ФильтрВМассив = СтрРазделить(Фильтр, " ", Ложь);
	ТекстФильтра = СтрСоединить(ФильтрВМассив, "%");
	
	//обработаем спец символ $ (конец строки как в RegExp)
	Если Прав(Фильтр, 1) = "$" Тогда 
		 ТекстФильтра = Сред(ТекстФильтра, 1, СтрДлина(ТекстФильтра) - 1);
	Иначе
		 ТекстФильтра = ТекстФильтра + "%";
	КонецЕсли;
	 
	//обработаем спец символ ^ (начало строки как в RegExp)
	Если Лев(Фильтр, 1) = "^" Тогда 
		 ТекстФильтра = Сред(ТекстФильтра, 2);
	Иначе
		 ТекстФильтра = "%" + ТекстФильтра;
	КонецЕсли;
	 
	ТекстФильтра = СтрЗаменить(ТекстФильтра, " ", "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Фильтр", ТекстФильтра);
	Запрос.УстановитьПараметр("ТаблицаСТипами", ТаблицаСТипами);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Выборка.ИндексТипаВКоллекции КАК ИндексТипаВКоллекции,
	|	Выборка.ПолноеИмя КАК ПолноеИмя,
	|	Выборка.КоллекцияXML КАК КоллекцияXML,
	|	Выборка.Коллекция КАК Коллекция,
	|	Выборка.ИмяДляКонструктора КАК ИмяДляКонструктора,
	|	Выборка.Имя КАК Имя,
	|	Выборка.Представление КАК Представление,
	|	Выборка.Вид КАК Вид
	|ПОМЕСТИТЬ ТаблицаСТипами_ВТ
	|ИЗ
	|	&ТаблицаСТипами КАК Выборка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСТипами_ВТ.ИндексТипаВКоллекции КАК ИндексТипаВКоллекции
	|ИЗ
	|	ТаблицаСТипами_ВТ КАК ТаблицаСТипами_ВТ
	|ГДЕ
	|	(ТаблицаСТипами_ВТ.Представление ПОДОБНО &Фильтр
	|			ИЛИ ТаблицаСТипами_ВТ.ПолноеИмя ПОДОБНО &Фильтр
	|			ИЛИ ТаблицаСТипами_ВТ.ПолноеИмя ПОДОБНО &Фильтр
	|			ИЛИ ТаблицаСТипами_ВТ.КоллекцияXML ПОДОБНО &Фильтр
	|			ИЛИ ТаблицаСТипами_ВТ.Коллекция ПОДОБНО &Фильтр
	|			ИЛИ ТаблицаСТипами_ВТ.ИмяДляКонструктора ПОДОБНО &Фильтр
	|			ИЛИ ТаблицаСТипами_ВТ.Имя ПОДОБНО &Фильтр
	|			ИЛИ ТаблицаСТипами_ВТ.Вид ПОДОБНО &Фильтр)"; 
	
	ШаблонУсловия = "ИЛИ ТаблицаСТипами_ВТ.%1 ПОДОБНО &Фильтр";
	Если Не НастройкиФормы.ФильтроватьПоПолноеИмя Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрШаблон(ШаблонУсловия, "ПолноеИмя"), "");
	КонецЕсли;
	Если Не НастройкиФормы.ФильтроватьКоллекцияXML Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрШаблон(ШаблонУсловия, "КоллекцияXML"), "");
	КонецЕсли;
	Если Не НастройкиФормы.ФильтроватьКоллекция Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрШаблон(ШаблонУсловия, "Коллекция"), "");
	КонецЕсли;
	Если Не НастройкиФормы.ФильтроватьИмяДляКонструктора Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрШаблон(ШаблонУсловия, "ИмяДляКонструктора"), "");
	КонецЕсли;
	Если Не НастройкиФормы.ФильтроватьИмя Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрШаблон(ШаблонУсловия, "Имя"), "");
	КонецЕсли;
	Если Не НастройкиФормы.ФильтроватьВид Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрШаблон(ШаблонУсловия, "Вид"), "");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();

	ТаблицаСТипамиФильтрованнная = ТаблицаСТипами.СкопироватьКолонки();
	
	Если Результат.Пустой() Тогда 
		Возврат ТаблицаСТипамиФильтрованнная;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() = ТаблицаСТипами.Количество() Тогда 
		Возврат ТаблицаСТипами;
	КонецЕсли;

	Пока Выборка.Следующий() Цикл 
		НоваяСтрока = ТаблицаСТипамиФильтрованнная.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаСТипами.Найти(Выборка.ИндексТипаВКоллекции, "ИндексТипаВКоллекции"));
	КонецЦикла;

	Возврат ТаблицаСТипамиФильтрованнная;
	
КонецФункции // ТаблицаСТипамиФильтрованная()

// Заполняет дерево с типами
//
Процедура ОбновитьСписокТипов()

	Перем Ошибки, СеансовыеДанные;
	
	Если Не ЗначениеЗаполнено(АдресТЗСИнформациейПоТипам) Тогда 

		Если ЭтоАдресВременногоХранилища(АдресСеансовыхДанных) Тогда 
			СеансовыеДанные = ПолучитьИзВременногоХранилища(АдресСеансовыхДанных);
		КонецЕсли;
		
		Если Не ОбъектОбработки().СформироватьТаблицуСТипами(АдресТЗСИнформациейПоТипам, УникальныйИдентификатор, Ошибки, АдресСеансовыхДанных) Тогда 
			СообщитьПользователю(СтрСоединить(Ошибки, Символы.ПС));
		КонецЕсли;
	КонецЕсли;

	ТаблицаСТипамиИсходная = ПолучитьИзВременногоХранилища(АдресТЗСИнформациейПоТипам);
	
	Если ЗначениеЗаполнено(Фильтр) Тогда 
		
		НастройкиФормы = ПолучитьЗначениеИзКэша(КлючиКэша().НастройкиФормы);
		
		ТаблицаСТипами = ТаблицаСТипамиФильтрованная(ТаблицаСТипамиИсходная, Фильтр, НастройкиФормы);
		
	Иначе
		
		ТаблицаСТипами = ТаблицаСТипамиИсходная;
		
	КонецЕсли;
	
	ТекущийУзел = Неопределено;
	
    ДеревоТиповДанныхТЗ = РеквизитФормыВЗначение("ДеревоТиповДанных");
	ДеревоТиповДанныхТЗ.Строки.Очистить();
	
	Корень = ДеревоТиповДанныхТЗ;	
	ТекущаяКоллекция = Неопределено;
	Для Каждого ИнформацияПоТипуДанных Из ТаблицаСТипами Цикл 
		
		// таблица должна быть отсортирована по ["Коллекция, Вид"]
		Если ЗначениеЗаполнено(ИнформацияПоТипуДанных.Коллекция) И 
				(
				ТекущаяКоллекция = Неопределено ИЛИ ТекущаяКоллекция.Имя  <> ИмяТипа(ИнформацияПоТипуДанных, Истина)
				) Тогда 

			НоваяСтрока = Корень.Строки.Добавить();
			НоваяСтрока.Имя = ИмяТипа(ИнформацияПоТипуДанных, Истина);
			НоваяСтрока.Представление = НоваяСтрока.Имя;
			НоваяСтрока.Картинка = ИнформацияПоТипуДанных.Картинка;
			
			ТекущаяКоллекция = НоваяСтрока;
			
		КонецЕсли;			
		
		Если Не ЗначениеЗаполнено(ИнформацияПоТипуДанных.Коллекция) Тогда 
			НоваяСтрока = Корень.Строки.Добавить();
		Иначе
			НоваяСтрока = ТекущаяКоллекция.Строки.Добавить();
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИнформацияПоТипуДанных);
		НоваяСтрока.Имя = ИмяТипа(ИнформацияПоТипуДанных, Ложь);
		
		Если ВыбранныеТипы.НайтиПоЗначению(ИдентификаторТипа(НоваяСтрока)) <> Неопределено
			Тогда 
			НоваяСтрока.Пометка = Истина;
			ПроставитьПометкиВверхНаСервере(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоТиповДанныхТЗ, "ДеревоТиповДанных");
	
КонецПроцедуры // ОбновитьСписокТипов()

Процедура УдалитьВременныеФайлыФормы() Экспорт

	лПутьККартинкам = ПолучитьЗначениеИзКэша(КлючиКэша().ПутьККартинкам);
	
	Если ЗначениеЗаполнено(лПутьККартинкам) Тогда 
		Попытка
			УдалитьФайлы(лПутьККартинкам);
		Исключение
		КонецПопытки; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИЗакрыть()

	Перем Настройкиформы, ТекущиеДанные;	

	НастройкиФормы = ПолучитьЗначениеИзКэша(КлючиКэша().НастройкиФормы);

	Если Не НастройкиФормы.МножественныйВыбор Тогда 

		ТекущиеДанные = Элементы.ДеревоТиповДанных.ТекущиеДанные;
		
		Если ПустаяСтрока(ТекущиеДанные.ИмяДляКонструктора) Тогда 
			Возврат;
		КонецЕсли;
		
		ВыбранныеТипы.Очистить();
		
		ОбработатьПометкуПоТекущимДанным(ТекущиеДанные);
	КонецЕсли;
	
	Если ВыбранныеТипы.Количество() = 0 Тогда 
		ПоказатьПредупреждение(, "Нет выбранных типов.");
	Иначе
		Закрыть(РезультатВыбораНаСервере())
	КонецЕсли;
КонецПроцедуры

Процедура СообщитьПользователю(ТекстСообщения)

	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщения;
	Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФильтр() Экспорт
	НовыйФильтр = Элементы.Фильтр.ТекстРедактирования;
	Если ТекущийФильтр <> НовыйФильтр Тогда 
		Фильтр = НовыйФильтр;
		ОбновитьСписокТипов();

		Если ЗначениеЗаполнено(Фильтр) Тогда 
			МаксимальноеКоличествоРазворачиваемыхСтрок = 20; //#ДЛЯ РЕДАКТИРОВАНИЯ#
			Для Каждого ТекущаяСтрока Из ДеревоТиповДанных.ПолучитьЭлементы() Цикл 
				МаксимальноеКоличествоРазворачиваемыхСтрок = МаксимальноеКоличествоРазворачиваемыхСтрок - 1;
				Если МаксимальноеКоличествоРазворачиваемыхСтрок < 0 Тогда 
					Прервать;
				КонецЕсли;
				Элементы.ДеревоТиповДанных.Развернуть(ТекущаяСтрока.ПолучитьИдентификатор());
			КонецЦикла;
		КонецЕсли;
		
		ТекущийФильтр = НовыйФильтр;
	КонецЕсли;
КонецПроцедуры

#Область Пометки

&НаКлиенте
Процедура ОбработатьПометкуПоТекущимДанным(ТекущиеДанные)
	
	ТекущиеДанные.Пометка = ТекущиеДанные.Пометка % 2;
	ОбновитьВыбранныеТипы(ТекущиеДанные);
	ПроставитьПометкиВниз(ТекущиеДанные);
	ПроставитьПометкиВверх(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВыбранныеТипы(ТекущиеДанные)
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда 
		Возврат;
	КонецЕсли;  
	
	ИдТипа = ИдентификаторТипа(ТекущиеДанные);
	
	Если ТекущиеДанные.Пометка = 1 Тогда 
		ВыбранныеТипы.Добавить(ИдТипа)
	ИначеЕсли ТекущиеДанные.Пометка = 0 Тогда 
		ТекущийТипВВыбранных = ВыбранныеТипы.НайтиПоЗначению(ИдТипа);
		Если ТекущийТипВВыбранных <> Неопределено Тогда 
			ВыбранныеТипы.Удалить(ВыбранныеТипы.НайтиПоЗначению(ИдТипа));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВниз(ТекущиеДанные)
	Потомки = ТекущиеДанные.ПолучитьЭлементы();
	Значение = ТекущиеДанные.Пометка;
	Для Каждого Потомок из Потомки Цикл
		Потомок.Пометка = Значение;
		ОбновитьВыбранныеТипы(Потомок);
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВверх(ТекущиеДанные)
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		ВсеИстина = Истина;
		НеВсеЛожь = Ложь;
		Потомки = Родитель.ПолучитьЭлементы();
		Для Каждого Потомок из Потомки Цикл
			ВсеИстина = ВсеИстина И (Потомок.Пометка = 1);
			НеВсеЛожь = НеВсеЛожь ИЛИ Булево(Потомок.Пометка);
		КонецЦикла;
		Если ВсеИстина Тогда
			Родитель.Пометка = 1;
		ИначеЕсли НеВсеЛожь Тогда
			Родитель.Пометка = 2;
		Иначе
			Родитель.Пометка = 0;
		КонецЕсли;
		ПроставитьПометкиВверх(Родитель);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроставитьПометкиВнизНаСервере(ТекущиеДанные)
	Потомки = ТекущиеДанные.Строки;
	Значение = ТекущиеДанные.Пометка;
	Для Каждого Потомок из Потомки Цикл
		Потомок.Пометка = Значение;
		ПроставитьПометкиВнизНаСервере(Потомок);
	КонецЦикла;
КонецПроцедуры

Процедура ПроставитьПометкиВверхНаСервере(ТекущиеДанные)
	
	Родитель = ТекущиеДанные.Родитель;
	Если Родитель <> Неопределено Тогда
		ВсеИстина = Истина;
		НеВсеЛожь = Ложь;
		Потомки = Родитель.Строки;
		Для Каждого Потомок из Потомки Цикл
			ВсеИстина = ВсеИстина И (Потомок.Пометка = 1);
			НеВсеЛожь = НеВсеЛожь ИЛИ Булево(Потомок.Пометка);
		КонецЦикла;
		Если ВсеИстина Тогда
			Родитель.Пометка = 1;
		ИначеЕсли НеВсеЛожь Тогда
			Родитель.Пометка = 2;
		Иначе
			Родитель.Пометка = 0;
		КонецЕсли;
		ПроставитьПометкиВверхНаСервере(Родитель);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


